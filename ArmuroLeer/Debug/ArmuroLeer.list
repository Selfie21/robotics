
ArmuroLeer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ff8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08007188  08007188  00017188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800721c  0800721c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800721c  0800721c  0001721c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007224  08007224  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007224  08007224  00017224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007228  08007228  00017228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800722c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000074  080072a0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  080072a0  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a79c  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034d4  00000000  00000000  0003a840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  0003dd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001120  00000000  00000000  0003efb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024ffa  00000000  00000000  000400d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000172a7  00000000  00000000  000650ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dcce6  00000000  00000000  0007c371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00159057  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005118  00000000  00000000  001590ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007170 	.word	0x08007170

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007170 	.word	0x08007170

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b96e 	b.w	8000de0 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	468c      	mov	ip, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	f040 8083 	bne.w	8000c32 <__udivmoddi4+0x116>
 8000b2c:	428a      	cmp	r2, r1
 8000b2e:	4617      	mov	r7, r2
 8000b30:	d947      	bls.n	8000bc2 <__udivmoddi4+0xa6>
 8000b32:	fab2 f282 	clz	r2, r2
 8000b36:	b142      	cbz	r2, 8000b4a <__udivmoddi4+0x2e>
 8000b38:	f1c2 0020 	rsb	r0, r2, #32
 8000b3c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b40:	4091      	lsls	r1, r2
 8000b42:	4097      	lsls	r7, r2
 8000b44:	ea40 0c01 	orr.w	ip, r0, r1
 8000b48:	4094      	lsls	r4, r2
 8000b4a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b4e:	0c23      	lsrs	r3, r4, #16
 8000b50:	fbbc f6f8 	udiv	r6, ip, r8
 8000b54:	fa1f fe87 	uxth.w	lr, r7
 8000b58:	fb08 c116 	mls	r1, r8, r6, ip
 8000b5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b60:	fb06 f10e 	mul.w	r1, r6, lr
 8000b64:	4299      	cmp	r1, r3
 8000b66:	d909      	bls.n	8000b7c <__udivmoddi4+0x60>
 8000b68:	18fb      	adds	r3, r7, r3
 8000b6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b6e:	f080 8119 	bcs.w	8000da4 <__udivmoddi4+0x288>
 8000b72:	4299      	cmp	r1, r3
 8000b74:	f240 8116 	bls.w	8000da4 <__udivmoddi4+0x288>
 8000b78:	3e02      	subs	r6, #2
 8000b7a:	443b      	add	r3, r7
 8000b7c:	1a5b      	subs	r3, r3, r1
 8000b7e:	b2a4      	uxth	r4, r4
 8000b80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b84:	fb08 3310 	mls	r3, r8, r0, r3
 8000b88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b90:	45a6      	cmp	lr, r4
 8000b92:	d909      	bls.n	8000ba8 <__udivmoddi4+0x8c>
 8000b94:	193c      	adds	r4, r7, r4
 8000b96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9a:	f080 8105 	bcs.w	8000da8 <__udivmoddi4+0x28c>
 8000b9e:	45a6      	cmp	lr, r4
 8000ba0:	f240 8102 	bls.w	8000da8 <__udivmoddi4+0x28c>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	443c      	add	r4, r7
 8000ba8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bac:	eba4 040e 	sub.w	r4, r4, lr
 8000bb0:	2600      	movs	r6, #0
 8000bb2:	b11d      	cbz	r5, 8000bbc <__udivmoddi4+0xa0>
 8000bb4:	40d4      	lsrs	r4, r2
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bbc:	4631      	mov	r1, r6
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	b902      	cbnz	r2, 8000bc6 <__udivmoddi4+0xaa>
 8000bc4:	deff      	udf	#255	; 0xff
 8000bc6:	fab2 f282 	clz	r2, r2
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	d150      	bne.n	8000c70 <__udivmoddi4+0x154>
 8000bce:	1bcb      	subs	r3, r1, r7
 8000bd0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bd4:	fa1f f887 	uxth.w	r8, r7
 8000bd8:	2601      	movs	r6, #1
 8000bda:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bde:	0c21      	lsrs	r1, r4, #16
 8000be0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000be4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bec:	428b      	cmp	r3, r1
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0xe4>
 8000bf0:	1879      	adds	r1, r7, r1
 8000bf2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0xe2>
 8000bf8:	428b      	cmp	r3, r1
 8000bfa:	f200 80e9 	bhi.w	8000dd0 <__udivmoddi4+0x2b4>
 8000bfe:	4684      	mov	ip, r0
 8000c00:	1ac9      	subs	r1, r1, r3
 8000c02:	b2a3      	uxth	r3, r4
 8000c04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c08:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c0c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c10:	fb08 f800 	mul.w	r8, r8, r0
 8000c14:	45a0      	cmp	r8, r4
 8000c16:	d907      	bls.n	8000c28 <__udivmoddi4+0x10c>
 8000c18:	193c      	adds	r4, r7, r4
 8000c1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x10a>
 8000c20:	45a0      	cmp	r8, r4
 8000c22:	f200 80d9 	bhi.w	8000dd8 <__udivmoddi4+0x2bc>
 8000c26:	4618      	mov	r0, r3
 8000c28:	eba4 0408 	sub.w	r4, r4, r8
 8000c2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c30:	e7bf      	b.n	8000bb2 <__udivmoddi4+0x96>
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x12e>
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	f000 80b1 	beq.w	8000d9e <__udivmoddi4+0x282>
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c42:	4630      	mov	r0, r6
 8000c44:	4631      	mov	r1, r6
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	fab3 f683 	clz	r6, r3
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	d14a      	bne.n	8000ce8 <__udivmoddi4+0x1cc>
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0x140>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 80b8 	bhi.w	8000dcc <__udivmoddi4+0x2b0>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	468c      	mov	ip, r1
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d0a8      	beq.n	8000bbc <__udivmoddi4+0xa0>
 8000c6a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c6e:	e7a5      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000c70:	f1c2 0320 	rsb	r3, r2, #32
 8000c74:	fa20 f603 	lsr.w	r6, r0, r3
 8000c78:	4097      	lsls	r7, r2
 8000c7a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c7e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c82:	40d9      	lsrs	r1, r3
 8000c84:	4330      	orrs	r0, r6
 8000c86:	0c03      	lsrs	r3, r0, #16
 8000c88:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c8c:	fa1f f887 	uxth.w	r8, r7
 8000c90:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c98:	fb06 f108 	mul.w	r1, r6, r8
 8000c9c:	4299      	cmp	r1, r3
 8000c9e:	fa04 f402 	lsl.w	r4, r4, r2
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x19c>
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000caa:	f080 808d 	bcs.w	8000dc8 <__udivmoddi4+0x2ac>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 808a 	bls.w	8000dc8 <__udivmoddi4+0x2ac>
 8000cb4:	3e02      	subs	r6, #2
 8000cb6:	443b      	add	r3, r7
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	b281      	uxth	r1, r0
 8000cbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc8:	fb00 f308 	mul.w	r3, r0, r8
 8000ccc:	428b      	cmp	r3, r1
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x1c4>
 8000cd0:	1879      	adds	r1, r7, r1
 8000cd2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cd6:	d273      	bcs.n	8000dc0 <__udivmoddi4+0x2a4>
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	d971      	bls.n	8000dc0 <__udivmoddi4+0x2a4>
 8000cdc:	3802      	subs	r0, #2
 8000cde:	4439      	add	r1, r7
 8000ce0:	1acb      	subs	r3, r1, r3
 8000ce2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ce6:	e778      	b.n	8000bda <__udivmoddi4+0xbe>
 8000ce8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cec:	fa03 f406 	lsl.w	r4, r3, r6
 8000cf0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cf4:	431c      	orrs	r4, r3
 8000cf6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000cfe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d02:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d06:	431f      	orrs	r7, r3
 8000d08:	0c3b      	lsrs	r3, r7, #16
 8000d0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d0e:	fa1f f884 	uxth.w	r8, r4
 8000d12:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d16:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d1a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d1e:	458a      	cmp	sl, r1
 8000d20:	fa02 f206 	lsl.w	r2, r2, r6
 8000d24:	fa00 f306 	lsl.w	r3, r0, r6
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x220>
 8000d2a:	1861      	adds	r1, r4, r1
 8000d2c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d30:	d248      	bcs.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d32:	458a      	cmp	sl, r1
 8000d34:	d946      	bls.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d36:	f1a9 0902 	sub.w	r9, r9, #2
 8000d3a:	4421      	add	r1, r4
 8000d3c:	eba1 010a 	sub.w	r1, r1, sl
 8000d40:	b2bf      	uxth	r7, r7
 8000d42:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d46:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d4a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d4e:	fb00 f808 	mul.w	r8, r0, r8
 8000d52:	45b8      	cmp	r8, r7
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x24a>
 8000d56:	19e7      	adds	r7, r4, r7
 8000d58:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5c:	d22e      	bcs.n	8000dbc <__udivmoddi4+0x2a0>
 8000d5e:	45b8      	cmp	r8, r7
 8000d60:	d92c      	bls.n	8000dbc <__udivmoddi4+0x2a0>
 8000d62:	3802      	subs	r0, #2
 8000d64:	4427      	add	r7, r4
 8000d66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d6a:	eba7 0708 	sub.w	r7, r7, r8
 8000d6e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d72:	454f      	cmp	r7, r9
 8000d74:	46c6      	mov	lr, r8
 8000d76:	4649      	mov	r1, r9
 8000d78:	d31a      	bcc.n	8000db0 <__udivmoddi4+0x294>
 8000d7a:	d017      	beq.n	8000dac <__udivmoddi4+0x290>
 8000d7c:	b15d      	cbz	r5, 8000d96 <__udivmoddi4+0x27a>
 8000d7e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d82:	eb67 0701 	sbc.w	r7, r7, r1
 8000d86:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d8a:	40f2      	lsrs	r2, r6
 8000d8c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d90:	40f7      	lsrs	r7, r6
 8000d92:	e9c5 2700 	strd	r2, r7, [r5]
 8000d96:	2600      	movs	r6, #0
 8000d98:	4631      	mov	r1, r6
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	462e      	mov	r6, r5
 8000da0:	4628      	mov	r0, r5
 8000da2:	e70b      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000da4:	4606      	mov	r6, r0
 8000da6:	e6e9      	b.n	8000b7c <__udivmoddi4+0x60>
 8000da8:	4618      	mov	r0, r3
 8000daa:	e6fd      	b.n	8000ba8 <__udivmoddi4+0x8c>
 8000dac:	4543      	cmp	r3, r8
 8000dae:	d2e5      	bcs.n	8000d7c <__udivmoddi4+0x260>
 8000db0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000db4:	eb69 0104 	sbc.w	r1, r9, r4
 8000db8:	3801      	subs	r0, #1
 8000dba:	e7df      	b.n	8000d7c <__udivmoddi4+0x260>
 8000dbc:	4608      	mov	r0, r1
 8000dbe:	e7d2      	b.n	8000d66 <__udivmoddi4+0x24a>
 8000dc0:	4660      	mov	r0, ip
 8000dc2:	e78d      	b.n	8000ce0 <__udivmoddi4+0x1c4>
 8000dc4:	4681      	mov	r9, r0
 8000dc6:	e7b9      	b.n	8000d3c <__udivmoddi4+0x220>
 8000dc8:	4666      	mov	r6, ip
 8000dca:	e775      	b.n	8000cb8 <__udivmoddi4+0x19c>
 8000dcc:	4630      	mov	r0, r6
 8000dce:	e74a      	b.n	8000c66 <__udivmoddi4+0x14a>
 8000dd0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dd4:	4439      	add	r1, r7
 8000dd6:	e713      	b.n	8000c00 <__udivmoddi4+0xe4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	443c      	add	r4, r7
 8000ddc:	e724      	b.n	8000c28 <__udivmoddi4+0x10c>
 8000dde:	bf00      	nop

08000de0 <__aeabi_idiv0>:
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop

08000de4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dea:	463b      	mov	r3, r7
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
 8000df8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000dfa:	4b4d      	ldr	r3, [pc, #308]	; (8000f30 <MX_ADC1_Init+0x14c>)
 8000dfc:	4a4d      	ldr	r2, [pc, #308]	; (8000f34 <MX_ADC1_Init+0x150>)
 8000dfe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000e00:	4b4b      	ldr	r3, [pc, #300]	; (8000f30 <MX_ADC1_Init+0x14c>)
 8000e02:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e06:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e08:	4b49      	ldr	r3, [pc, #292]	; (8000f30 <MX_ADC1_Init+0x14c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e0e:	4b48      	ldr	r3, [pc, #288]	; (8000f30 <MX_ADC1_Init+0x14c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e14:	4b46      	ldr	r3, [pc, #280]	; (8000f30 <MX_ADC1_Init+0x14c>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000e1a:	4b45      	ldr	r3, [pc, #276]	; (8000f30 <MX_ADC1_Init+0x14c>)
 8000e1c:	2208      	movs	r2, #8
 8000e1e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e20:	4b43      	ldr	r3, [pc, #268]	; (8000f30 <MX_ADC1_Init+0x14c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e26:	4b42      	ldr	r3, [pc, #264]	; (8000f30 <MX_ADC1_Init+0x14c>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 6;
 8000e2c:	4b40      	ldr	r3, [pc, #256]	; (8000f30 <MX_ADC1_Init+0x14c>)
 8000e2e:	2206      	movs	r2, #6
 8000e30:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e32:	4b3f      	ldr	r3, [pc, #252]	; (8000f30 <MX_ADC1_Init+0x14c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e3a:	4b3d      	ldr	r3, [pc, #244]	; (8000f30 <MX_ADC1_Init+0x14c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e40:	4b3b      	ldr	r3, [pc, #236]	; (8000f30 <MX_ADC1_Init+0x14c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e46:	4b3a      	ldr	r3, [pc, #232]	; (8000f30 <MX_ADC1_Init+0x14c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e4e:	4b38      	ldr	r3, [pc, #224]	; (8000f30 <MX_ADC1_Init+0x14c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e54:	4b36      	ldr	r3, [pc, #216]	; (8000f30 <MX_ADC1_Init+0x14c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e5c:	4834      	ldr	r0, [pc, #208]	; (8000f30 <MX_ADC1_Init+0x14c>)
 8000e5e:	f001 fc3b 	bl	80026d8 <HAL_ADC_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000e68:	f000 fa64 	bl	8001334 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000e6c:	4b32      	ldr	r3, [pc, #200]	; (8000f38 <MX_ADC1_Init+0x154>)
 8000e6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e70:	2306      	movs	r3, #6
 8000e72:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e74:	2300      	movs	r3, #0
 8000e76:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e78:	237f      	movs	r3, #127	; 0x7f
 8000e7a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e7c:	2304      	movs	r3, #4
 8000e7e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e84:	463b      	mov	r3, r7
 8000e86:	4619      	mov	r1, r3
 8000e88:	4829      	ldr	r0, [pc, #164]	; (8000f30 <MX_ADC1_Init+0x14c>)
 8000e8a:	f001 fe05 	bl	8002a98 <HAL_ADC_ConfigChannel>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000e94:	f000 fa4e 	bl	8001334 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000e98:	4b28      	ldr	r3, [pc, #160]	; (8000f3c <MX_ADC1_Init+0x158>)
 8000e9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e9c:	230c      	movs	r3, #12
 8000e9e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ea0:	463b      	mov	r3, r7
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4822      	ldr	r0, [pc, #136]	; (8000f30 <MX_ADC1_Init+0x14c>)
 8000ea6:	f001 fdf7 	bl	8002a98 <HAL_ADC_ConfigChannel>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8000eb0:	f000 fa40 	bl	8001334 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000eb4:	4b22      	ldr	r3, [pc, #136]	; (8000f40 <MX_ADC1_Init+0x15c>)
 8000eb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000eb8:	2312      	movs	r3, #18
 8000eba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	481b      	ldr	r0, [pc, #108]	; (8000f30 <MX_ADC1_Init+0x14c>)
 8000ec2:	f001 fde9 	bl	8002a98 <HAL_ADC_ConfigChannel>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8000ecc:	f000 fa32 	bl	8001334 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000ed0:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <MX_ADC1_Init+0x160>)
 8000ed2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000ed4:	2318      	movs	r3, #24
 8000ed6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ed8:	463b      	mov	r3, r7
 8000eda:	4619      	mov	r1, r3
 8000edc:	4814      	ldr	r0, [pc, #80]	; (8000f30 <MX_ADC1_Init+0x14c>)
 8000ede:	f001 fddb 	bl	8002a98 <HAL_ADC_ConfigChannel>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8000ee8:	f000 fa24 	bl	8001334 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000eec:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <MX_ADC1_Init+0x164>)
 8000eee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000ef0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ef4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	4619      	mov	r1, r3
 8000efa:	480d      	ldr	r0, [pc, #52]	; (8000f30 <MX_ADC1_Init+0x14c>)
 8000efc:	f001 fdcc 	bl	8002a98 <HAL_ADC_ConfigChannel>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 8000f06:	f000 fa15 	bl	8001334 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <MX_ADC1_Init+0x168>)
 8000f0c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000f0e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000f12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f14:	463b      	mov	r3, r7
 8000f16:	4619      	mov	r1, r3
 8000f18:	4805      	ldr	r0, [pc, #20]	; (8000f30 <MX_ADC1_Init+0x14c>)
 8000f1a:	f001 fdbd 	bl	8002a98 <HAL_ADC_ConfigChannel>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_ADC1_Init+0x144>
  {
    Error_Handler();
 8000f24:	f000 fa06 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f28:	bf00      	nop
 8000f2a:	3718      	adds	r7, #24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200000bc 	.word	0x200000bc
 8000f34:	50040000 	.word	0x50040000
 8000f38:	14f00020 	.word	0x14f00020
 8000f3c:	19200040 	.word	0x19200040
 8000f40:	21800100 	.word	0x21800100
 8000f44:	25b00200 	.word	0x25b00200
 8000f48:	2a000400 	.word	0x2a000400
 8000f4c:	32601000 	.word	0x32601000

08000f50 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	; 0x28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a2b      	ldr	r2, [pc, #172]	; (800101c <HAL_ADC_MspInit+0xcc>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d14f      	bne.n	8001012 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f72:	4b2b      	ldr	r3, [pc, #172]	; (8001020 <HAL_ADC_MspInit+0xd0>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f76:	4a2a      	ldr	r2, [pc, #168]	; (8001020 <HAL_ADC_MspInit+0xd0>)
 8000f78:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f7e:	4b28      	ldr	r3, [pc, #160]	; (8001020 <HAL_ADC_MspInit+0xd0>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	4b25      	ldr	r3, [pc, #148]	; (8001020 <HAL_ADC_MspInit+0xd0>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8e:	4a24      	ldr	r2, [pc, #144]	; (8001020 <HAL_ADC_MspInit+0xd0>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f96:	4b22      	ldr	r3, [pc, #136]	; (8001020 <HAL_ADC_MspInit+0xd0>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = lineSensor_middle_Pin|encoder_left_Pin|lineSensor_right_Pin|battery_Pin
 8000fa2:	23bb      	movs	r3, #187	; 0xbb
 8000fa4:	617b      	str	r3, [r7, #20]
                          |encoder_right_Pin|lineSensor_left_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000fa6:	230b      	movs	r3, #11
 8000fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb8:	f002 fd4e 	bl	8003a58 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000fbc:	4b19      	ldr	r3, [pc, #100]	; (8001024 <HAL_ADC_MspInit+0xd4>)
 8000fbe:	4a1a      	ldr	r2, [pc, #104]	; (8001028 <HAL_ADC_MspInit+0xd8>)
 8000fc0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000fc2:	4b18      	ldr	r3, [pc, #96]	; (8001024 <HAL_ADC_MspInit+0xd4>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fc8:	4b16      	ldr	r3, [pc, #88]	; (8001024 <HAL_ADC_MspInit+0xd4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <HAL_ADC_MspInit+0xd4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fd4:	4b13      	ldr	r3, [pc, #76]	; (8001024 <HAL_ADC_MspInit+0xd4>)
 8000fd6:	2280      	movs	r2, #128	; 0x80
 8000fd8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000fda:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_ADC_MspInit+0xd4>)
 8000fdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fe0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000fe2:	4b10      	ldr	r3, [pc, #64]	; (8001024 <HAL_ADC_MspInit+0xd4>)
 8000fe4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fe8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <HAL_ADC_MspInit+0xd4>)
 8000fec:	2220      	movs	r2, #32
 8000fee:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <HAL_ADC_MspInit+0xd4>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ff6:	480b      	ldr	r0, [pc, #44]	; (8001024 <HAL_ADC_MspInit+0xd4>)
 8000ff8:	f002 fb36 	bl	8003668 <HAL_DMA_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8001002:	f000 f997 	bl	8001334 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a06      	ldr	r2, [pc, #24]	; (8001024 <HAL_ADC_MspInit+0xd4>)
 800100a:	64da      	str	r2, [r3, #76]	; 0x4c
 800100c:	4a05      	ldr	r2, [pc, #20]	; (8001024 <HAL_ADC_MspInit+0xd4>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001012:	bf00      	nop
 8001014:	3728      	adds	r7, #40	; 0x28
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	50040000 	.word	0x50040000
 8001020:	40021000 	.word	0x40021000
 8001024:	20000120 	.word	0x20000120
 8001028:	40020008 	.word	0x40020008

0800102c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <MX_DMA_Init+0x38>)
 8001034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001036:	4a0b      	ldr	r2, [pc, #44]	; (8001064 <MX_DMA_Init+0x38>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6493      	str	r3, [r2, #72]	; 0x48
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <MX_DMA_Init+0x38>)
 8001040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2100      	movs	r1, #0
 800104e:	200b      	movs	r0, #11
 8001050:	f002 fad3 	bl	80035fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001054:	200b      	movs	r0, #11
 8001056:	f002 faec 	bl	8003632 <HAL_NVIC_EnableIRQ>

}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40021000 	.word	0x40021000

08001068 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106e:	f107 030c 	add.w	r3, r7, #12
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800107e:	4b30      	ldr	r3, [pc, #192]	; (8001140 <MX_GPIO_Init+0xd8>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001082:	4a2f      	ldr	r2, [pc, #188]	; (8001140 <MX_GPIO_Init+0xd8>)
 8001084:	f043 0304 	orr.w	r3, r3, #4
 8001088:	64d3      	str	r3, [r2, #76]	; 0x4c
 800108a:	4b2d      	ldr	r3, [pc, #180]	; (8001140 <MX_GPIO_Init+0xd8>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108e:	f003 0304 	and.w	r3, r3, #4
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	4b2a      	ldr	r3, [pc, #168]	; (8001140 <MX_GPIO_Init+0xd8>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	4a29      	ldr	r2, [pc, #164]	; (8001140 <MX_GPIO_Init+0xd8>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a2:	4b27      	ldr	r3, [pc, #156]	; (8001140 <MX_GPIO_Init+0xd8>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ae:	4b24      	ldr	r3, [pc, #144]	; (8001140 <MX_GPIO_Init+0xd8>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b2:	4a23      	ldr	r2, [pc, #140]	; (8001140 <MX_GPIO_Init+0xd8>)
 80010b4:	f043 0302 	orr.w	r3, r3, #2
 80010b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ba:	4b21      	ldr	r3, [pc, #132]	; (8001140 <MX_GPIO_Init+0xd8>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(phase2_L_GPIO_Port, phase2_L_Pin, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d0:	f002 fe44 	bl	8003d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LED_right_Pin|LED_left_Pin|phase2_R_Pin, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	21b8      	movs	r1, #184	; 0xb8
 80010d8:	481a      	ldr	r0, [pc, #104]	; (8001144 <MX_GPIO_Init+0xdc>)
 80010da:	f002 fe3f 	bl	8003d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = switch_right_Pin|switch_middle_Pin|switch_left_Pin;
 80010de:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 80010e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e4:	2300      	movs	r3, #0
 80010e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	4619      	mov	r1, r3
 80010f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f6:	f002 fcaf 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = phase2_L_Pin;
 80010fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001100:	2301      	movs	r3, #1
 8001102:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001108:	2300      	movs	r3, #0
 800110a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(phase2_L_GPIO_Port, &GPIO_InitStruct);
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	4619      	mov	r1, r3
 8001112:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001116:	f002 fc9f 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LED_right_Pin|LED_left_Pin|phase2_R_Pin;
 800111a:	23b8      	movs	r3, #184	; 0xb8
 800111c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111e:	2301      	movs	r3, #1
 8001120:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2300      	movs	r3, #0
 8001128:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112a:	f107 030c 	add.w	r3, r7, #12
 800112e:	4619      	mov	r1, r3
 8001130:	4804      	ldr	r0, [pc, #16]	; (8001144 <MX_GPIO_Init+0xdc>)
 8001132:	f002 fc91 	bl	8003a58 <HAL_GPIO_Init>

}
 8001136:	bf00      	nop
 8001138:	3720      	adds	r7, #32
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40021000 	.word	0x40021000
 8001144:	48000400 	.word	0x48000400

08001148 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800114c:	f001 f887 	bl	800225e <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8001150:	f000 f85c 	bl	800120c <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001154:	f7ff ff88 	bl	8001068 <MX_GPIO_Init>
	MX_DMA_Init();
 8001158:	f7ff ff68 	bl	800102c <MX_DMA_Init>
	MX_USART2_UART_Init();
 800115c:	f000 ff26 	bl	8001fac <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8001160:	f7ff fe40 	bl	8000de4 <MX_ADC1_Init>
	MX_TIM1_Init();
 8001164:	f000 fe12 	bl	8001d8c <MX_TIM1_Init>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001168:	2104      	movs	r1, #4
 800116a:	4823      	ldr	r0, [pc, #140]	; (80011f8 <main+0xb0>)
 800116c:	f004 fda8 	bl	8005cc0 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001170:	2108      	movs	r1, #8
 8001172:	4821      	ldr	r0, [pc, #132]	; (80011f8 <main+0xb0>)
 8001174:	f004 fda4 	bl	8005cc0 <HAL_TIMEx_PWMN_Start>

	TIM1->CCR2 = 0;
 8001178:	4b20      	ldr	r3, [pc, #128]	; (80011fc <main+0xb4>)
 800117a:	2200      	movs	r2, #0
 800117c:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 800117e:	4b1f      	ldr	r3, [pc, #124]	; (80011fc <main+0xb4>)
 8001180:	2200      	movs	r2, #0
 8001182:	63da      	str	r2, [r3, #60]	; 0x3c

	while (1) {
		HAL_ADC_Start_DMA(&hadc1, buffer, 6);
 8001184:	2206      	movs	r2, #6
 8001186:	491e      	ldr	r1, [pc, #120]	; (8001200 <main+0xb8>)
 8001188:	481e      	ldr	r0, [pc, #120]	; (8001204 <main+0xbc>)
 800118a:	f001 fbed 	bl	8002968 <HAL_ADC_Start_DMA>
		evaluateEncoder();
 800118e:	f000 f99b 	bl	80014c8 <evaluateEncoder>
		taskBlinkLED();
 8001192:	f000 fdb9 	bl	8001d08 <taskBlinkLED>

		if(objectDetected()){
 8001196:	f001 f80d 	bl	80021b4 <objectDetected>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d002      	beq.n	80011a6 <main+0x5e>
			robotState = AVOID_OBSTACLE;
 80011a0:	4b19      	ldr	r3, [pc, #100]	; (8001208 <main+0xc0>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	701a      	strb	r2, [r3, #0]
		}

		switch(robotState){
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <main+0xc0>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	d8ea      	bhi.n	8001184 <main+0x3c>
 80011ae:	a201      	add	r2, pc, #4	; (adr r2, 80011b4 <main+0x6c>)
 80011b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b4:	080011c9 	.word	0x080011c9
 80011b8:	080011cf 	.word	0x080011cf
 80011bc:	080011d5 	.word	0x080011d5
 80011c0:	08001185 	.word	0x08001185
 80011c4:	080011db 	.word	0x080011db
			case FOLLOW_TRAJECTORY:
				taskFollowTrajectory();
 80011c8:	f000 fb86 	bl	80018d8 <taskFollowTrajectory>
				break;
 80011cc:	e012      	b.n	80011f4 <main+0xac>

			case AVOID_OBSTACLE:
				taskAvoidObstacle();
 80011ce:	f000 fc3b 	bl	8001a48 <taskAvoidObstacle>
				break;
 80011d2:	e00f      	b.n	80011f4 <main+0xac>

			case FOLLOW_LINE:
				taskFollowLine();
 80011d4:	f000 fb22 	bl	800181c <taskFollowLine>
				break;
 80011d8:	e00c      	b.n	80011f4 <main+0xac>

			case OVERCOME_GAP:
				break;

			case SEARCH_LINE:
				taskSearchLine();
 80011da:	f000 fcf1 	bl	8001bc0 <taskSearchLine>
				if(lineDetected(2000)){
 80011de:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011e2:	f000 ffaf 	bl	8002144 <lineDetected>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d002      	beq.n	80011f2 <main+0xaa>
					robotState = FOLLOW_LINE;
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <main+0xc0>)
 80011ee:	2202      	movs	r2, #2
 80011f0:	701a      	strb	r2, [r3, #0]
				}
				break;
 80011f2:	bf00      	nop
		HAL_ADC_Start_DMA(&hadc1, buffer, 6);
 80011f4:	e7c6      	b.n	8001184 <main+0x3c>
 80011f6:	bf00      	nop
 80011f8:	2000019c 	.word	0x2000019c
 80011fc:	40012c00 	.word	0x40012c00
 8001200:	20000168 	.word	0x20000168
 8001204:	200000bc 	.word	0x200000bc
 8001208:	20000090 	.word	0x20000090

0800120c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b0ac      	sub	sp, #176	; 0xb0
 8001210:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001212:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001216:	2244      	movs	r2, #68	; 0x44
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f005 fb72 	bl	8006904 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001220:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	2254      	movs	r2, #84	; 0x54
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f005 fb64 	bl	8006904 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 800123c:	f002 fda6 	bl	8003d8c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001240:	4b3b      	ldr	r3, [pc, #236]	; (8001330 <SystemClock_Config+0x124>)
 8001242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001246:	4a3a      	ldr	r2, [pc, #232]	; (8001330 <SystemClock_Config+0x124>)
 8001248:	f023 0318 	bic.w	r3, r3, #24
 800124c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001250:	2314      	movs	r3, #20
 8001252:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001254:	2301      	movs	r3, #1
 8001256:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001258:	2301      	movs	r3, #1
 800125a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	RCC_OscInitStruct.MSICalibrationValue = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001264:	2360      	movs	r3, #96	; 0x60
 8001266:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800126a:	2302      	movs	r3, #2
 800126c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001270:	2301      	movs	r3, #1
 8001272:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001276:	2301      	movs	r3, #1
 8001278:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.PLL.PLLN = 16;
 800127c:	2310      	movs	r3, #16
 800127e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001282:	2307      	movs	r3, #7
 8001284:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001288:	2302      	movs	r3, #2
 800128a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800128e:	2302      	movs	r3, #2
 8001290:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001294:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001298:	4618      	mov	r0, r3
 800129a:	f002 fdeb 	bl	8003e74 <HAL_RCC_OscConfig>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 80012a4:	f000 f846 	bl	8001334 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a8:	230f      	movs	r3, #15
 80012aa:	65bb      	str	r3, [r7, #88]	; 0x58
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ac:	2303      	movs	r3, #3
 80012ae:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	66bb      	str	r3, [r7, #104]	; 0x68

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80012c0:	2101      	movs	r1, #1
 80012c2:	4618      	mov	r0, r3
 80012c4:	f003 f9f6 	bl	80046b4 <HAL_RCC_ClockConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SystemClock_Config+0xc6>
	{
		Error_Handler();
 80012ce:	f000 f831 	bl	8001334 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 80012d2:	f244 0302 	movw	r3, #16386	; 0x4002
 80012d6:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012d8:	2300      	movs	r3, #0
 80012da:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80012dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80012e0:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80012e2:	2301      	movs	r3, #1
 80012e4:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80012e6:	2301      	movs	r3, #1
 80012e8:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80012ea:	2310      	movs	r3, #16
 80012ec:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80012ee:	2307      	movs	r3, #7
 80012f0:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80012f2:	2302      	movs	r3, #2
 80012f4:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80012f6:	2302      	movs	r3, #2
 80012f8:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80012fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012fe:	623b      	str	r3, [r7, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	4618      	mov	r0, r3
 8001304:	f003 fbdc 	bl	8004ac0 <HAL_RCCEx_PeriphCLKConfig>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <SystemClock_Config+0x106>
	{
		Error_Handler();
 800130e:	f000 f811 	bl	8001334 <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001312:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001316:	f002 fd57 	bl	8003dc8 <HAL_PWREx_ControlVoltageScaling>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <SystemClock_Config+0x118>
	{
		Error_Handler();
 8001320:	f000 f808 	bl	8001334 <Error_Handler>
	}
	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8001324:	f003 fdc0 	bl	8004ea8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001328:	bf00      	nop
 800132a:	37b0      	adds	r7, #176	; 0xb0
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40021000 	.word	0x40021000

08001334 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001338:	b672      	cpsid	i
}
 800133a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800133c:	e7fe      	b.n	800133c <Error_Handler+0x8>
	...

08001340 <setMotorSpeed>:
const int8_t KP = 24;

uint32_t ticksLeft;
uint32_t ticksRight;

void setMotorSpeed(float leftMotorSpeed, float rightMotorSpeed) {
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	ed87 0a01 	vstr	s0, [r7, #4]
 800134a:	edc7 0a00 	vstr	s1, [r7]

	if ((leftMotorSpeed == 0.0f) || (rightMotorSpeed == 0.0f)) {
 800134e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001352:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135a:	d006      	beq.n	800136a <setMotorSpeed+0x2a>
 800135c:	edd7 7a00 	vldr	s15, [r7]
 8001360:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001368:	d103      	bne.n	8001372 <setMotorSpeed+0x32>
		driving = false;
 800136a:	4b53      	ldr	r3, [pc, #332]	; (80014b8 <setMotorSpeed+0x178>)
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]
 8001370:	e002      	b.n	8001378 <setMotorSpeed+0x38>
	} else {
		driving = true;
 8001372:	4b51      	ldr	r3, [pc, #324]	; (80014b8 <setMotorSpeed+0x178>)
 8001374:	2201      	movs	r2, #1
 8001376:	701a      	strb	r2, [r3, #0]
	}

	if (leftMotorSpeed > 0) {
 8001378:	edd7 7a01 	vldr	s15, [r7, #4]
 800137c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001384:	dd07      	ble.n	8001396 <setMotorSpeed+0x56>
		HAL_GPIO_WritePin(GPIOA, phase2_L_Pin, GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800138c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001390:	f002 fce4 	bl	8003d5c <HAL_GPIO_WritePin>
 8001394:	e00d      	b.n	80013b2 <setMotorSpeed+0x72>
	} else if (leftMotorSpeed < 0) {
 8001396:	edd7 7a01 	vldr	s15, [r7, #4]
 800139a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800139e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a2:	d506      	bpl.n	80013b2 <setMotorSpeed+0x72>
		HAL_GPIO_WritePin(GPIOA, phase2_L_Pin, GPIO_PIN_SET);
 80013a4:	2201      	movs	r2, #1
 80013a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ae:	f002 fcd5 	bl	8003d5c <HAL_GPIO_WritePin>
	}
	if (rightMotorSpeed > 0) {
 80013b2:	edd7 7a00 	vldr	s15, [r7]
 80013b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013be:	dd05      	ble.n	80013cc <setMotorSpeed+0x8c>
		HAL_GPIO_WritePin(GPIOB, phase2_R_Pin, GPIO_PIN_SET);
 80013c0:	2201      	movs	r2, #1
 80013c2:	2180      	movs	r1, #128	; 0x80
 80013c4:	483d      	ldr	r0, [pc, #244]	; (80014bc <setMotorSpeed+0x17c>)
 80013c6:	f002 fcc9 	bl	8003d5c <HAL_GPIO_WritePin>
 80013ca:	e00b      	b.n	80013e4 <setMotorSpeed+0xa4>
	} else if (rightMotorSpeed < 0) {
 80013cc:	edd7 7a00 	vldr	s15, [r7]
 80013d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d8:	d504      	bpl.n	80013e4 <setMotorSpeed+0xa4>
		HAL_GPIO_WritePin(GPIOB, phase2_R_Pin, GPIO_PIN_RESET);
 80013da:	2200      	movs	r2, #0
 80013dc:	2180      	movs	r1, #128	; 0x80
 80013de:	4837      	ldr	r0, [pc, #220]	; (80014bc <setMotorSpeed+0x17c>)
 80013e0:	f002 fcbc 	bl	8003d5c <HAL_GPIO_WritePin>
	}

	leftMotorSpeed = (fabs(leftMotorSpeed) > 1) ? (leftMotorSpeed/leftMotorSpeed) : leftMotorSpeed;
 80013e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80013e8:	eef0 7ae7 	vabs.f32	s15, s15
 80013ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f8:	dd04      	ble.n	8001404 <setMotorSpeed+0xc4>
 80013fa:	ed97 7a01 	vldr	s14, [r7, #4]
 80013fe:	eec7 7a07 	vdiv.f32	s15, s14, s14
 8001402:	e001      	b.n	8001408 <setMotorSpeed+0xc8>
 8001404:	edd7 7a01 	vldr	s15, [r7, #4]
 8001408:	edc7 7a01 	vstr	s15, [r7, #4]
	rightMotorSpeed = (fabs(rightMotorSpeed) > 1) ? (rightMotorSpeed/rightMotorSpeed) : rightMotorSpeed;
 800140c:	edd7 7a00 	vldr	s15, [r7]
 8001410:	eef0 7ae7 	vabs.f32	s15, s15
 8001414:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001418:	eef4 7ac7 	vcmpe.f32	s15, s14
 800141c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001420:	dd04      	ble.n	800142c <setMotorSpeed+0xec>
 8001422:	ed97 7a00 	vldr	s14, [r7]
 8001426:	eec7 7a07 	vdiv.f32	s15, s14, s14
 800142a:	e001      	b.n	8001430 <setMotorSpeed+0xf0>
 800142c:	edd7 7a00 	vldr	s15, [r7]
 8001430:	edc7 7a00 	vstr	s15, [r7]

	TIM1->CCR2 = (uint32_t) (fabs(leftMotorSpeed) * 65535);
 8001434:	edd7 7a01 	vldr	s15, [r7, #4]
 8001438:	eef0 7ae7 	vabs.f32	s15, s15
 800143c:	ee17 0a90 	vmov	r0, s15
 8001440:	f7ff f87a 	bl	8000538 <__aeabi_f2d>
 8001444:	a31a      	add	r3, pc, #104	; (adr r3, 80014b0 <setMotorSpeed+0x170>)
 8001446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144a:	f7ff f8cd 	bl	80005e8 <__aeabi_dmul>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4c1b      	ldr	r4, [pc, #108]	; (80014c0 <setMotorSpeed+0x180>)
 8001454:	4610      	mov	r0, r2
 8001456:	4619      	mov	r1, r3
 8001458:	f7ff fad8 	bl	8000a0c <__aeabi_d2uiz>
 800145c:	4603      	mov	r3, r0
 800145e:	63a3      	str	r3, [r4, #56]	; 0x38
	TIM1->CCR3 = (uint32_t) ((1 - fabs(rightMotorSpeed)) * 65535);
 8001460:	edd7 7a00 	vldr	s15, [r7]
 8001464:	eef0 7ae7 	vabs.f32	s15, s15
 8001468:	ee17 0a90 	vmov	r0, s15
 800146c:	f7ff f864 	bl	8000538 <__aeabi_f2d>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	f04f 0000 	mov.w	r0, #0
 8001478:	4912      	ldr	r1, [pc, #72]	; (80014c4 <setMotorSpeed+0x184>)
 800147a:	f7fe fefd 	bl	8000278 <__aeabi_dsub>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4610      	mov	r0, r2
 8001484:	4619      	mov	r1, r3
 8001486:	a30a      	add	r3, pc, #40	; (adr r3, 80014b0 <setMotorSpeed+0x170>)
 8001488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148c:	f7ff f8ac 	bl	80005e8 <__aeabi_dmul>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	4c0a      	ldr	r4, [pc, #40]	; (80014c0 <setMotorSpeed+0x180>)
 8001496:	4610      	mov	r0, r2
 8001498:	4619      	mov	r1, r3
 800149a:	f7ff fab7 	bl	8000a0c <__aeabi_d2uiz>
 800149e:	4603      	mov	r3, r0
 80014a0:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd90      	pop	{r4, r7, pc}
 80014aa:	bf00      	nop
 80014ac:	f3af 8000 	nop.w
 80014b0:	00000000 	.word	0x00000000
 80014b4:	40efffe0 	.word	0x40efffe0
 80014b8:	20000000 	.word	0x20000000
 80014bc:	48000400 	.word	0x48000400
 80014c0:	40012c00 	.word	0x40012c00
 80014c4:	3ff00000 	.word	0x3ff00000

080014c8 <evaluateEncoder>:
uint32_t ticksLeft = 0;
uint32_t ticksRight = 0;
volatile uint32_t adc[6];
uint32_t buffer[6];

void evaluateEncoder() {
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
	if (adc[1] > HIGH_THRESHOLD && !encoderStatusLeft) {
 80014cc:	4b2a      	ldr	r3, [pc, #168]	; (8001578 <evaluateEncoder+0xb0>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d90f      	bls.n	80014f8 <evaluateEncoder+0x30>
 80014d8:	4b28      	ldr	r3, [pc, #160]	; (800157c <evaluateEncoder+0xb4>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	f083 0301 	eor.w	r3, r3, #1
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d008      	beq.n	80014f8 <evaluateEncoder+0x30>
		ticksLeft++;
 80014e6:	4b26      	ldr	r3, [pc, #152]	; (8001580 <evaluateEncoder+0xb8>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	3301      	adds	r3, #1
 80014ec:	4a24      	ldr	r2, [pc, #144]	; (8001580 <evaluateEncoder+0xb8>)
 80014ee:	6013      	str	r3, [r2, #0]
		encoderStatusLeft = true;
 80014f0:	4b22      	ldr	r3, [pc, #136]	; (800157c <evaluateEncoder+0xb4>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	701a      	strb	r2, [r3, #0]
 80014f6:	e011      	b.n	800151c <evaluateEncoder+0x54>
	} else if (adc[1] < LOW_THRESHOLD && encoderStatusLeft) {
 80014f8:	4b1f      	ldr	r3, [pc, #124]	; (8001578 <evaluateEncoder+0xb0>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8001500:	4293      	cmp	r3, r2
 8001502:	d20b      	bcs.n	800151c <evaluateEncoder+0x54>
 8001504:	4b1d      	ldr	r3, [pc, #116]	; (800157c <evaluateEncoder+0xb4>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d007      	beq.n	800151c <evaluateEncoder+0x54>
		ticksLeft++;
 800150c:	4b1c      	ldr	r3, [pc, #112]	; (8001580 <evaluateEncoder+0xb8>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	3301      	adds	r3, #1
 8001512:	4a1b      	ldr	r2, [pc, #108]	; (8001580 <evaluateEncoder+0xb8>)
 8001514:	6013      	str	r3, [r2, #0]
		encoderStatusLeft = false;
 8001516:	4b19      	ldr	r3, [pc, #100]	; (800157c <evaluateEncoder+0xb4>)
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]
	}

	if (adc[4] > HIGH_THRESHOLD && !encoderStatusRight) {
 800151c:	4b16      	ldr	r3, [pc, #88]	; (8001578 <evaluateEncoder+0xb0>)
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001524:	4293      	cmp	r3, r2
 8001526:	d90f      	bls.n	8001548 <evaluateEncoder+0x80>
 8001528:	4b16      	ldr	r3, [pc, #88]	; (8001584 <evaluateEncoder+0xbc>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	f083 0301 	eor.w	r3, r3, #1
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d008      	beq.n	8001548 <evaluateEncoder+0x80>
		ticksRight++;
 8001536:	4b14      	ldr	r3, [pc, #80]	; (8001588 <evaluateEncoder+0xc0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	3301      	adds	r3, #1
 800153c:	4a12      	ldr	r2, [pc, #72]	; (8001588 <evaluateEncoder+0xc0>)
 800153e:	6013      	str	r3, [r2, #0]
		encoderStatusRight = true;
 8001540:	4b10      	ldr	r3, [pc, #64]	; (8001584 <evaluateEncoder+0xbc>)
 8001542:	2201      	movs	r2, #1
 8001544:	701a      	strb	r2, [r3, #0]
	} else if (adc[4] < LOW_THRESHOLD && encoderStatusRight) {
		ticksRight++;
		encoderStatusRight = false;
	}
}
 8001546:	e011      	b.n	800156c <evaluateEncoder+0xa4>
	} else if (adc[4] < LOW_THRESHOLD && encoderStatusRight) {
 8001548:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <evaluateEncoder+0xb0>)
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8001550:	4293      	cmp	r3, r2
 8001552:	d20b      	bcs.n	800156c <evaluateEncoder+0xa4>
 8001554:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <evaluateEncoder+0xbc>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d007      	beq.n	800156c <evaluateEncoder+0xa4>
		ticksRight++;
 800155c:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <evaluateEncoder+0xc0>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	3301      	adds	r3, #1
 8001562:	4a09      	ldr	r2, [pc, #36]	; (8001588 <evaluateEncoder+0xc0>)
 8001564:	6013      	str	r3, [r2, #0]
		encoderStatusRight = false;
 8001566:	4b07      	ldr	r3, [pc, #28]	; (8001584 <evaluateEncoder+0xbc>)
 8001568:	2200      	movs	r2, #0
 800156a:	701a      	strb	r2, [r3, #0]
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	20000180 	.word	0x20000180
 800157c:	20000198 	.word	0x20000198
 8001580:	20000094 	.word	0x20000094
 8001584:	20000199 	.word	0x20000199
 8001588:	20000098 	.word	0x20000098

0800158c <writeSensorUSB>:

void writeSensorUSB() {
 800158c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800158e:	b09f      	sub	sp, #124	; 0x7c
 8001590:	af04      	add	r7, sp, #16
	char stringBuf[100];
	int len = sprintf((char*) stringBuf, "%d, %d, %d, %d, %d, %d\n", adc[0],
 8001592:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <writeSensorUSB+0x4c>)
 8001594:	681d      	ldr	r5, [r3, #0]
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <writeSensorUSB+0x4c>)
 8001598:	685e      	ldr	r6, [r3, #4]
 800159a:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <writeSensorUSB+0x4c>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	4a0e      	ldr	r2, [pc, #56]	; (80015d8 <writeSensorUSB+0x4c>)
 80015a0:	68d2      	ldr	r2, [r2, #12]
 80015a2:	490d      	ldr	r1, [pc, #52]	; (80015d8 <writeSensorUSB+0x4c>)
 80015a4:	6909      	ldr	r1, [r1, #16]
 80015a6:	480c      	ldr	r0, [pc, #48]	; (80015d8 <writeSensorUSB+0x4c>)
 80015a8:	6940      	ldr	r0, [r0, #20]
 80015aa:	463c      	mov	r4, r7
 80015ac:	9003      	str	r0, [sp, #12]
 80015ae:	9102      	str	r1, [sp, #8]
 80015b0:	9201      	str	r2, [sp, #4]
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	4633      	mov	r3, r6
 80015b6:	462a      	mov	r2, r5
 80015b8:	4908      	ldr	r1, [pc, #32]	; (80015dc <writeSensorUSB+0x50>)
 80015ba:	4620      	mov	r0, r4
 80015bc:	f005 f9aa 	bl	8006914 <siprintf>
 80015c0:	6678      	str	r0, [r7, #100]	; 0x64
			adc[1], adc[2], adc[3], adc[4], adc[5]);
	HAL_UART_Transmit(&huart2, (uint8_t*) stringBuf, len, 1000000);
 80015c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	4639      	mov	r1, r7
 80015c8:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <writeSensorUSB+0x54>)
 80015ca:	4806      	ldr	r0, [pc, #24]	; (80015e4 <writeSensorUSB+0x58>)
 80015cc:	f004 fd67 	bl	800609e <HAL_UART_Transmit>
}
 80015d0:	bf00      	nop
 80015d2:	376c      	adds	r7, #108	; 0x6c
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015d8:	20000180 	.word	0x20000180
 80015dc:	08007188 	.word	0x08007188
 80015e0:	000f4240 	.word	0x000f4240
 80015e4:	200001e8 	.word	0x200001e8

080015e8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc1) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 6; i++) {
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	e00a      	b.n	800160c <HAL_ADC_ConvCpltCallback+0x24>
		adc[i] = buffer[i];
 80015f6:	4a0a      	ldr	r2, [pc, #40]	; (8001620 <HAL_ADC_ConvCpltCallback+0x38>)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015fe:	4909      	ldr	r1, [pc, #36]	; (8001624 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 6; i++) {
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	3301      	adds	r3, #1
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2b05      	cmp	r3, #5
 8001610:	ddf1      	ble.n	80015f6 <HAL_ADC_ConvCpltCallback+0xe>
	}
	writeSensorUSB();
 8001612:	f7ff ffbb 	bl	800158c <writeSensorUSB>
}
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000168 	.word	0x20000168
 8001624:	20000180 	.word	0x20000180

08001628 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162e:	4b0f      	ldr	r3, [pc, #60]	; (800166c <HAL_MspInit+0x44>)
 8001630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001632:	4a0e      	ldr	r2, [pc, #56]	; (800166c <HAL_MspInit+0x44>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6613      	str	r3, [r2, #96]	; 0x60
 800163a:	4b0c      	ldr	r3, [pc, #48]	; (800166c <HAL_MspInit+0x44>)
 800163c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <HAL_MspInit+0x44>)
 8001648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164a:	4a08      	ldr	r2, [pc, #32]	; (800166c <HAL_MspInit+0x44>)
 800164c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001650:	6593      	str	r3, [r2, #88]	; 0x58
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_MspInit+0x44>)
 8001654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165a:	603b      	str	r3, [r7, #0]
 800165c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40021000 	.word	0x40021000

08001670 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001674:	e7fe      	b.n	8001674 <NMI_Handler+0x4>

08001676 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800167a:	e7fe      	b.n	800167a <HardFault_Handler+0x4>

0800167c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001680:	e7fe      	b.n	8001680 <MemManage_Handler+0x4>

08001682 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001686:	e7fe      	b.n	8001686 <BusFault_Handler+0x4>

08001688 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800168c:	e7fe      	b.n	800168c <UsageFault_Handler+0x4>

0800168e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016bc:	f000 fe24 	bl	8002308 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016c8:	4802      	ldr	r0, [pc, #8]	; (80016d4 <DMA1_Channel1_IRQHandler+0x10>)
 80016ca:	f002 f8e5 	bl	8003898 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000120 	.word	0x20000120

080016d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016e0:	4a14      	ldr	r2, [pc, #80]	; (8001734 <_sbrk+0x5c>)
 80016e2:	4b15      	ldr	r3, [pc, #84]	; (8001738 <_sbrk+0x60>)
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016ec:	4b13      	ldr	r3, [pc, #76]	; (800173c <_sbrk+0x64>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d102      	bne.n	80016fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016f4:	4b11      	ldr	r3, [pc, #68]	; (800173c <_sbrk+0x64>)
 80016f6:	4a12      	ldr	r2, [pc, #72]	; (8001740 <_sbrk+0x68>)
 80016f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016fa:	4b10      	ldr	r3, [pc, #64]	; (800173c <_sbrk+0x64>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4413      	add	r3, r2
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	429a      	cmp	r2, r3
 8001706:	d207      	bcs.n	8001718 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001708:	f005 f8d2 	bl	80068b0 <__errno>
 800170c:	4603      	mov	r3, r0
 800170e:	220c      	movs	r2, #12
 8001710:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001712:	f04f 33ff 	mov.w	r3, #4294967295
 8001716:	e009      	b.n	800172c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <_sbrk+0x64>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800171e:	4b07      	ldr	r3, [pc, #28]	; (800173c <_sbrk+0x64>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4413      	add	r3, r2
 8001726:	4a05      	ldr	r2, [pc, #20]	; (800173c <_sbrk+0x64>)
 8001728:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800172a:	68fb      	ldr	r3, [r7, #12]
}
 800172c:	4618      	mov	r0, r3
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20010000 	.word	0x20010000
 8001738:	00000400 	.word	0x00000400
 800173c:	2000009c 	.word	0x2000009c
 8001740:	20000280 	.word	0x20000280

08001744 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001748:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <SystemInit+0x5c>)
 800174a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800174e:	4a14      	ldr	r2, [pc, #80]	; (80017a0 <SystemInit+0x5c>)
 8001750:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001754:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <SystemInit+0x60>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a11      	ldr	r2, [pc, #68]	; (80017a4 <SystemInit+0x60>)
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001764:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <SystemInit+0x60>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800176a:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <SystemInit+0x60>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a0d      	ldr	r2, [pc, #52]	; (80017a4 <SystemInit+0x60>)
 8001770:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001774:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001778:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800177a:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <SystemInit+0x60>)
 800177c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001780:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001782:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <SystemInit+0x60>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a07      	ldr	r2, [pc, #28]	; (80017a4 <SystemInit+0x60>)
 8001788:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800178c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800178e:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <SystemInit+0x60>)
 8001790:	2200      	movs	r2, #0
 8001792:	619a      	str	r2, [r3, #24]
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000ed00 	.word	0xe000ed00
 80017a4:	40021000 	.word	0x40021000

080017a8 <setDriveState>:

ROUTINE_STATE routineState = START;
uint32_t routinePersistent = 0;
uint32_t distanceToCover = 0;

void setDriveState(double leftMotorSpeed, double rightMotorSpeed, uint32_t newDistance, ROUTINE_STATE newState){
 80017a8:	b590      	push	{r4, r7, lr}
 80017aa:	b087      	sub	sp, #28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	ed87 0b04 	vstr	d0, [r7, #16]
 80017b2:	ed87 1b02 	vstr	d1, [r7, #8]
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	460b      	mov	r3, r1
 80017ba:	70fb      	strb	r3, [r7, #3]
	if(ticksRight > (routinePersistent + distanceToCover)){
 80017bc:	4b13      	ldr	r3, [pc, #76]	; (800180c <setDriveState+0x64>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4b13      	ldr	r3, [pc, #76]	; (8001810 <setDriveState+0x68>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	441a      	add	r2, r3
 80017c6:	4b13      	ldr	r3, [pc, #76]	; (8001814 <setDriveState+0x6c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d219      	bcs.n	8001802 <setDriveState+0x5a>
		routineState = newState;
 80017ce:	4a12      	ldr	r2, [pc, #72]	; (8001818 <setDriveState+0x70>)
 80017d0:	78fb      	ldrb	r3, [r7, #3]
 80017d2:	7013      	strb	r3, [r2, #0]
		setMotorSpeed(leftMotorSpeed, rightMotorSpeed);
 80017d4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017d8:	f7ff f938 	bl	8000a4c <__aeabi_d2f>
 80017dc:	4604      	mov	r4, r0
 80017de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017e2:	f7ff f933 	bl	8000a4c <__aeabi_d2f>
 80017e6:	4603      	mov	r3, r0
 80017e8:	ee00 3a90 	vmov	s1, r3
 80017ec:	ee00 4a10 	vmov	s0, r4
 80017f0:	f7ff fda6 	bl	8001340 <setMotorSpeed>
		routinePersistent = ticksRight;
 80017f4:	4b07      	ldr	r3, [pc, #28]	; (8001814 <setDriveState+0x6c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a04      	ldr	r2, [pc, #16]	; (800180c <setDriveState+0x64>)
 80017fa:	6013      	str	r3, [r2, #0]
		distanceToCover = newDistance;
 80017fc:	4a04      	ldr	r2, [pc, #16]	; (8001810 <setDriveState+0x68>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6013      	str	r3, [r2, #0]
	}
}
 8001802:	bf00      	nop
 8001804:	371c      	adds	r7, #28
 8001806:	46bd      	mov	sp, r7
 8001808:	bd90      	pop	{r4, r7, pc}
 800180a:	bf00      	nop
 800180c:	200000a4 	.word	0x200000a4
 8001810:	200000a8 	.word	0x200000a8
 8001814:	20000098 	.word	0x20000098
 8001818:	200000a0 	.word	0x200000a0

0800181c <taskFollowLine>:


void taskFollowLine() {
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0

	if (threewayLightComparator(1, 0, 1, WHITE_THRESHOLD)) {
 8001820:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001824:	2201      	movs	r2, #1
 8001826:	2100      	movs	r1, #0
 8001828:	2001      	movs	r0, #1
 800182a:	f000 fc43 	bl	80020b4 <threewayLightComparator>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d006      	beq.n	8001842 <taskFollowLine+0x26>
		setMotorSpeed(0.5f, 0.5f);
 8001834:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8001838:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800183c:	f7ff fd80 	bl	8001340 <setMotorSpeed>
		robotState = SEARCH_LINE;
		routineState = START;
		setMotorSpeed(0.5f, 0.5f);
	}

}
 8001840:	e042      	b.n	80018c8 <taskFollowLine+0xac>
	} else if ((threewayLightComparator(0, 0, 1, WHITE_THRESHOLD))
 8001842:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001846:	2201      	movs	r2, #1
 8001848:	2100      	movs	r1, #0
 800184a:	2000      	movs	r0, #0
 800184c:	f000 fc32 	bl	80020b4 <threewayLightComparator>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d109      	bne.n	800186a <taskFollowLine+0x4e>
			|| (threewayLightComparator(0, 1, 1, WHITE_THRESHOLD))) {
 8001856:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800185a:	2201      	movs	r2, #1
 800185c:	2101      	movs	r1, #1
 800185e:	2000      	movs	r0, #0
 8001860:	f000 fc28 	bl	80020b4 <threewayLightComparator>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d006      	beq.n	8001878 <taskFollowLine+0x5c>
		setMotorSpeed(-0.5f, 0.5f);
 800186a:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800186e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8001872:	f7ff fd65 	bl	8001340 <setMotorSpeed>
 8001876:	e027      	b.n	80018c8 <taskFollowLine+0xac>
	} else if ((threewayLightComparator(1, 1, 0, WHITE_THRESHOLD))
 8001878:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800187c:	2200      	movs	r2, #0
 800187e:	2101      	movs	r1, #1
 8001880:	2001      	movs	r0, #1
 8001882:	f000 fc17 	bl	80020b4 <threewayLightComparator>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d109      	bne.n	80018a0 <taskFollowLine+0x84>
			|| (threewayLightComparator(1, 0, 0, WHITE_THRESHOLD))) {
 800188c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001890:	2200      	movs	r2, #0
 8001892:	2100      	movs	r1, #0
 8001894:	2001      	movs	r0, #1
 8001896:	f000 fc0d 	bl	80020b4 <threewayLightComparator>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d006      	beq.n	80018ae <taskFollowLine+0x92>
		setMotorSpeed(0.5f, -0.5f);
 80018a0:	eefe 0a00 	vmov.f32	s1, #224	; 0xbf000000 -0.5
 80018a4:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80018a8:	f7ff fd4a 	bl	8001340 <setMotorSpeed>
 80018ac:	e00c      	b.n	80018c8 <taskFollowLine+0xac>
		robotState = SEARCH_LINE;
 80018ae:	4b07      	ldr	r3, [pc, #28]	; (80018cc <taskFollowLine+0xb0>)
 80018b0:	2204      	movs	r2, #4
 80018b2:	701a      	strb	r2, [r3, #0]
		routineState = START;
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <taskFollowLine+0xb4>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	701a      	strb	r2, [r3, #0]
		setMotorSpeed(0.5f, 0.5f);
 80018ba:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80018be:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80018c2:	f7ff fd3d 	bl	8001340 <setMotorSpeed>
}
 80018c6:	e7ff      	b.n	80018c8 <taskFollowLine+0xac>
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000090 	.word	0x20000090
 80018d0:	200000a0 	.word	0x200000a0
 80018d4:	00000000 	.word	0x00000000

080018d8 <taskFollowTrajectory>:

void taskFollowTrajectory(){
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0

	switch(routineState) {
 80018dc:	4b54      	ldr	r3, [pc, #336]	; (8001a30 <taskFollowTrajectory+0x158>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b07      	cmp	r3, #7
 80018e2:	f200 8087 	bhi.w	80019f4 <taskFollowTrajectory+0x11c>
 80018e6:	a201      	add	r2, pc, #4	; (adr r2, 80018ec <taskFollowTrajectory+0x14>)
 80018e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ec:	0800190d 	.word	0x0800190d
 80018f0:	08001939 	.word	0x08001939
 80018f4:	08001969 	.word	0x08001969
 80018f8:	08001987 	.word	0x08001987
 80018fc:	080019b7 	.word	0x080019b7
 8001900:	080019f5 	.word	0x080019f5
 8001904:	080019f5 	.word	0x080019f5
 8001908:	080019d5 	.word	0x080019d5
		case START:
			routineState = LINE_A;
 800190c:	4b48      	ldr	r3, [pc, #288]	; (8001a30 <taskFollowTrajectory+0x158>)
 800190e:	2201      	movs	r2, #1
 8001910:	701a      	strb	r2, [r3, #0]
			setMotorSpeed(0.5f, 0.5f);
 8001912:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8001916:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800191a:	f7ff fd11 	bl	8001340 <setMotorSpeed>
			routinePersistent = ticksRight;
 800191e:	4b45      	ldr	r3, [pc, #276]	; (8001a34 <taskFollowTrajectory+0x15c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a45      	ldr	r2, [pc, #276]	; (8001a38 <taskFollowTrajectory+0x160>)
 8001924:	6013      	str	r3, [r2, #0]
			distanceToCover = 47 * TRIGGER_PER_CM;
 8001926:	2202      	movs	r2, #2
 8001928:	4613      	mov	r3, r2
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	4413      	add	r3, r2
 800192e:	011b      	lsls	r3, r3, #4
 8001930:	1a9b      	subs	r3, r3, r2
 8001932:	4a42      	ldr	r2, [pc, #264]	; (8001a3c <taskFollowTrajectory+0x164>)
 8001934:	6013      	str	r3, [r2, #0]
			break;
 8001936:	e065      	b.n	8001a04 <taskFollowTrajectory+0x12c>

		case LINE_A:
			setDriveState(0.5f, -0.5f, (uint32_t) (150 * TRIGGER_PER_DEGREE_RIGHT), TURN_A);
 8001938:	a133      	add	r1, pc, #204	; (adr r1, 8001a08 <taskFollowTrajectory+0x130>)
 800193a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800193e:	a334      	add	r3, pc, #208	; (adr r3, 8001a10 <taskFollowTrajectory+0x138>)
 8001940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001944:	f7fe fe50 	bl	80005e8 <__aeabi_dmul>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4610      	mov	r0, r2
 800194e:	4619      	mov	r1, r3
 8001950:	f7ff f85c 	bl	8000a0c <__aeabi_d2uiz>
 8001954:	4603      	mov	r3, r0
 8001956:	2102      	movs	r1, #2
 8001958:	4618      	mov	r0, r3
 800195a:	ed9f 1b2f 	vldr	d1, [pc, #188]	; 8001a18 <taskFollowTrajectory+0x140>
 800195e:	ed9f 0b30 	vldr	d0, [pc, #192]	; 8001a20 <taskFollowTrajectory+0x148>
 8001962:	f7ff ff21 	bl	80017a8 <setDriveState>
			break;
 8001966:	e04d      	b.n	8001a04 <taskFollowTrajectory+0x12c>

		case TURN_A:
			setDriveState(0.5f, 0.5f, (uint32_t) 35.5f * TRIGGER_PER_CM, LINE_B);
 8001968:	2202      	movs	r2, #2
 800196a:	4613      	mov	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
 8001970:	00da      	lsls	r2, r3, #3
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2103      	movs	r1, #3
 8001976:	4618      	mov	r0, r3
 8001978:	ed9f 1b29 	vldr	d1, [pc, #164]	; 8001a20 <taskFollowTrajectory+0x148>
 800197c:	ed9f 0b28 	vldr	d0, [pc, #160]	; 8001a20 <taskFollowTrajectory+0x148>
 8001980:	f7ff ff12 	bl	80017a8 <setDriveState>
			break;
 8001984:	e03e      	b.n	8001a04 <taskFollowTrajectory+0x12c>

		case LINE_B:
			setDriveState(-0.5f, 0.5f, (uint32_t) (90 * TRIGGER_PER_DEGREE_LEFT), TURN_B);
 8001986:	a128      	add	r1, pc, #160	; (adr r1, 8001a28 <taskFollowTrajectory+0x150>)
 8001988:	e9d1 0100 	ldrd	r0, r1, [r1]
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	4b2b      	ldr	r3, [pc, #172]	; (8001a40 <taskFollowTrajectory+0x168>)
 8001992:	f7fe fe29 	bl	80005e8 <__aeabi_dmul>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4610      	mov	r0, r2
 800199c:	4619      	mov	r1, r3
 800199e:	f7ff f835 	bl	8000a0c <__aeabi_d2uiz>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2104      	movs	r1, #4
 80019a6:	4618      	mov	r0, r3
 80019a8:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8001a20 <taskFollowTrajectory+0x148>
 80019ac:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8001a18 <taskFollowTrajectory+0x140>
 80019b0:	f7ff fefa 	bl	80017a8 <setDriveState>
			break;
 80019b4:	e026      	b.n	8001a04 <taskFollowTrajectory+0x12c>

		case TURN_B:
			setDriveState(0.5f, 0.5f, 29 * TRIGGER_PER_CM, FINALE);
 80019b6:	2202      	movs	r2, #2
 80019b8:	4613      	mov	r3, r2
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	1a9b      	subs	r3, r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	2107      	movs	r1, #7
 80019c4:	4618      	mov	r0, r3
 80019c6:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8001a20 <taskFollowTrajectory+0x148>
 80019ca:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8001a20 <taskFollowTrajectory+0x148>
 80019ce:	f7ff feeb 	bl	80017a8 <setDriveState>
			break;
 80019d2:	e017      	b.n	8001a04 <taskFollowTrajectory+0x12c>

		case FINALE:
			if(ticksRight > (routinePersistent + distanceToCover)){
 80019d4:	4b18      	ldr	r3, [pc, #96]	; (8001a38 <taskFollowTrajectory+0x160>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <taskFollowTrajectory+0x164>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	441a      	add	r2, r3
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <taskFollowTrajectory+0x15c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d20d      	bcs.n	8001a02 <taskFollowTrajectory+0x12a>
				robotState = FOLLOW_LINE;
 80019e6:	4b17      	ldr	r3, [pc, #92]	; (8001a44 <taskFollowTrajectory+0x16c>)
 80019e8:	2202      	movs	r2, #2
 80019ea:	701a      	strb	r2, [r3, #0]
				routineState = START;
 80019ec:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <taskFollowTrajectory+0x158>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	701a      	strb	r2, [r3, #0]
			}
			break;
 80019f2:	e006      	b.n	8001a02 <taskFollowTrajectory+0x12a>

		default:
			robotState = FOLLOW_LINE;
 80019f4:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <taskFollowTrajectory+0x16c>)
 80019f6:	2202      	movs	r2, #2
 80019f8:	701a      	strb	r2, [r3, #0]
			routineState = START;
 80019fa:	4b0d      	ldr	r3, [pc, #52]	; (8001a30 <taskFollowTrajectory+0x158>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	701a      	strb	r2, [r3, #0]
			break;
 8001a00:	e000      	b.n	8001a04 <taskFollowTrajectory+0x12c>
			break;
 8001a02:	bf00      	nop
	}
}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	1eb851ec 	.word	0x1eb851ec
 8001a0c:	3fc1eb85 	.word	0x3fc1eb85
 8001a10:	00000000 	.word	0x00000000
 8001a14:	4062c000 	.word	0x4062c000
 8001a18:	00000000 	.word	0x00000000
 8001a1c:	bfe00000 	.word	0xbfe00000
 8001a20:	00000000 	.word	0x00000000
 8001a24:	3fe00000 	.word	0x3fe00000
 8001a28:	0a3d70a4 	.word	0x0a3d70a4
 8001a2c:	3fc0a3d7 	.word	0x3fc0a3d7
 8001a30:	200000a0 	.word	0x200000a0
 8001a34:	20000098 	.word	0x20000098
 8001a38:	200000a4 	.word	0x200000a4
 8001a3c:	200000a8 	.word	0x200000a8
 8001a40:	40568000 	.word	0x40568000
 8001a44:	20000090 	.word	0x20000090

08001a48 <taskAvoidObstacle>:


void taskAvoidObstacle(){
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0

	switch(routineState) {
 8001a4c:	4b56      	ldr	r3, [pc, #344]	; (8001ba8 <taskAvoidObstacle+0x160>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b07      	cmp	r3, #7
 8001a52:	f200 8096 	bhi.w	8001b82 <taskAvoidObstacle+0x13a>
 8001a56:	a201      	add	r2, pc, #4	; (adr r2, 8001a5c <taskAvoidObstacle+0x14>)
 8001a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a5c:	08001a7d 	.word	0x08001a7d
 8001a60:	08001ad1 	.word	0x08001ad1
 8001a64:	08001abb 	.word	0x08001abb
 8001a68:	08001b1d 	.word	0x08001b1d
 8001a6c:	08001b01 	.word	0x08001b01
 8001a70:	08001b83 	.word	0x08001b83
 8001a74:	08001b4d 	.word	0x08001b4d
 8001a78:	08001b63 	.word	0x08001b63

		case START:
			routineState = TURN_A;
 8001a7c:	4b4a      	ldr	r3, [pc, #296]	; (8001ba8 <taskAvoidObstacle+0x160>)
 8001a7e:	2202      	movs	r2, #2
 8001a80:	701a      	strb	r2, [r3, #0]
			setMotorSpeed(0.5f, -0.5f);
 8001a82:	eefe 0a00 	vmov.f32	s1, #224	; 0xbf000000 -0.5
 8001a86:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8001a8a:	f7ff fc59 	bl	8001340 <setMotorSpeed>
			routinePersistent = ticksRight;
 8001a8e:	4b47      	ldr	r3, [pc, #284]	; (8001bac <taskAvoidObstacle+0x164>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a47      	ldr	r2, [pc, #284]	; (8001bb0 <taskAvoidObstacle+0x168>)
 8001a94:	6013      	str	r3, [r2, #0]
			distanceToCover = (uint32_t) (90 * TRIGGER_PER_DEGREE_RIGHT);
 8001a96:	a13c      	add	r1, pc, #240	; (adr r1, 8001b88 <taskAvoidObstacle+0x140>)
 8001a98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	4b44      	ldr	r3, [pc, #272]	; (8001bb4 <taskAvoidObstacle+0x16c>)
 8001aa2:	f7fe fda1 	bl	80005e8 <__aeabi_dmul>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	f7fe ffad 	bl	8000a0c <__aeabi_d2uiz>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	4a40      	ldr	r2, [pc, #256]	; (8001bb8 <taskAvoidObstacle+0x170>)
 8001ab6:	6013      	str	r3, [r2, #0]
			break;
 8001ab8:	e063      	b.n	8001b82 <taskAvoidObstacle+0x13a>

		case TURN_A:
			setDriveState(0.5f, 0.5f, (8 * TRIGGER_PER_CM), LINE_A);
 8001aba:	2302      	movs	r3, #2
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	2101      	movs	r1, #1
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	ed9f 1b33 	vldr	d1, [pc, #204]	; 8001b90 <taskAvoidObstacle+0x148>
 8001ac6:	ed9f 0b32 	vldr	d0, [pc, #200]	; 8001b90 <taskAvoidObstacle+0x148>
 8001aca:	f7ff fe6d 	bl	80017a8 <setDriveState>
			break;
 8001ace:	e058      	b.n	8001b82 <taskAvoidObstacle+0x13a>

		case LINE_A:
			setDriveState(-0.5f, 0.5f, (uint32_t) (90 * TRIGGER_PER_DEGREE_LEFT), TURN_B);
 8001ad0:	a131      	add	r1, pc, #196	; (adr r1, 8001b98 <taskAvoidObstacle+0x150>)
 8001ad2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	4b36      	ldr	r3, [pc, #216]	; (8001bb4 <taskAvoidObstacle+0x16c>)
 8001adc:	f7fe fd84 	bl	80005e8 <__aeabi_dmul>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4610      	mov	r0, r2
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	f7fe ff90 	bl	8000a0c <__aeabi_d2uiz>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2104      	movs	r1, #4
 8001af0:	4618      	mov	r0, r3
 8001af2:	ed9f 1b27 	vldr	d1, [pc, #156]	; 8001b90 <taskAvoidObstacle+0x148>
 8001af6:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 8001ba0 <taskAvoidObstacle+0x158>
 8001afa:	f7ff fe55 	bl	80017a8 <setDriveState>
			break;
 8001afe:	e040      	b.n	8001b82 <taskAvoidObstacle+0x13a>

		case TURN_B:
			setDriveState(0.5f, 0.5f, (24 * TRIGGER_PER_CM), LINE_B);
 8001b00:	2202      	movs	r2, #2
 8001b02:	4613      	mov	r3, r2
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	4413      	add	r3, r2
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	2103      	movs	r1, #3
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	ed9f 1b20 	vldr	d1, [pc, #128]	; 8001b90 <taskAvoidObstacle+0x148>
 8001b12:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8001b90 <taskAvoidObstacle+0x148>
 8001b16:	f7ff fe47 	bl	80017a8 <setDriveState>
			break;
 8001b1a:	e032      	b.n	8001b82 <taskAvoidObstacle+0x13a>

		case LINE_B:
			setDriveState(-0.5f, 0.5f, (uint32_t) (90 * TRIGGER_PER_DEGREE_LEFT), TURN_C);
 8001b1c:	a11e      	add	r1, pc, #120	; (adr r1, 8001b98 <taskAvoidObstacle+0x150>)
 8001b1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b22:	f04f 0200 	mov.w	r2, #0
 8001b26:	4b23      	ldr	r3, [pc, #140]	; (8001bb4 <taskAvoidObstacle+0x16c>)
 8001b28:	f7fe fd5e 	bl	80005e8 <__aeabi_dmul>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4610      	mov	r0, r2
 8001b32:	4619      	mov	r1, r3
 8001b34:	f7fe ff6a 	bl	8000a0c <__aeabi_d2uiz>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2106      	movs	r1, #6
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8001b90 <taskAvoidObstacle+0x148>
 8001b42:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8001ba0 <taskAvoidObstacle+0x158>
 8001b46:	f7ff fe2f 	bl	80017a8 <setDriveState>
			break;
 8001b4a:	e01a      	b.n	8001b82 <taskAvoidObstacle+0x13a>

		case TURN_C:
			setDriveState(0.5f, 0.5f, (8 * TRIGGER_PER_CM), FINALE);
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	2107      	movs	r1, #7
 8001b52:	4618      	mov	r0, r3
 8001b54:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8001b90 <taskAvoidObstacle+0x148>
 8001b58:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8001b90 <taskAvoidObstacle+0x148>
 8001b5c:	f7ff fe24 	bl	80017a8 <setDriveState>
			break;
 8001b60:	e00f      	b.n	8001b82 <taskAvoidObstacle+0x13a>

		case FINALE:
			if(ticksRight > (routinePersistent + distanceToCover)){
 8001b62:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <taskAvoidObstacle+0x168>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	4b14      	ldr	r3, [pc, #80]	; (8001bb8 <taskAvoidObstacle+0x170>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	441a      	add	r2, r3
 8001b6c:	4b0f      	ldr	r3, [pc, #60]	; (8001bac <taskAvoidObstacle+0x164>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d205      	bcs.n	8001b80 <taskAvoidObstacle+0x138>
				routineState = START;
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <taskAvoidObstacle+0x160>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	701a      	strb	r2, [r3, #0]
				robotState = FOLLOW_LINE;
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <taskAvoidObstacle+0x174>)
 8001b7c:	2202      	movs	r2, #2
 8001b7e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001b80:	bf00      	nop
	}

}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	1eb851ec 	.word	0x1eb851ec
 8001b8c:	3fc1eb85 	.word	0x3fc1eb85
 8001b90:	00000000 	.word	0x00000000
 8001b94:	3fe00000 	.word	0x3fe00000
 8001b98:	0a3d70a4 	.word	0x0a3d70a4
 8001b9c:	3fc0a3d7 	.word	0x3fc0a3d7
 8001ba0:	00000000 	.word	0x00000000
 8001ba4:	bfe00000 	.word	0xbfe00000
 8001ba8:	200000a0 	.word	0x200000a0
 8001bac:	20000098 	.word	0x20000098
 8001bb0:	200000a4 	.word	0x200000a4
 8001bb4:	40568000 	.word	0x40568000
 8001bb8:	200000a8 	.word	0x200000a8
 8001bbc:	20000090 	.word	0x20000090

08001bc0 <taskSearchLine>:





void taskSearchLine(){
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0

	switch(routineState){
 8001bc4:	4b4a      	ldr	r3, [pc, #296]	; (8001cf0 <taskSearchLine+0x130>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b07      	cmp	r3, #7
 8001bca:	d87c      	bhi.n	8001cc6 <taskSearchLine+0x106>
 8001bcc:	a201      	add	r2, pc, #4	; (adr r2, 8001bd4 <taskSearchLine+0x14>)
 8001bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd2:	bf00      	nop
 8001bd4:	08001bf5 	.word	0x08001bf5
 8001bd8:	08001cc7 	.word	0x08001cc7
 8001bdc:	08001c33 	.word	0x08001c33
 8001be0:	08001cc7 	.word	0x08001cc7
 8001be4:	08001c63 	.word	0x08001c63
 8001be8:	08001cc7 	.word	0x08001cc7
 8001bec:	08001c93 	.word	0x08001c93
 8001bf0:	08001cad 	.word	0x08001cad
		case START:
			routineState = TURN_A;
 8001bf4:	4b3e      	ldr	r3, [pc, #248]	; (8001cf0 <taskSearchLine+0x130>)
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	701a      	strb	r2, [r3, #0]
			setMotorSpeed(0.5f, -0.5f);
 8001bfa:	eefe 0a00 	vmov.f32	s1, #224	; 0xbf000000 -0.5
 8001bfe:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8001c02:	f7ff fb9d 	bl	8001340 <setMotorSpeed>
			routinePersistent = ticksRight;
 8001c06:	4b3b      	ldr	r3, [pc, #236]	; (8001cf4 <taskSearchLine+0x134>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a3b      	ldr	r2, [pc, #236]	; (8001cf8 <taskSearchLine+0x138>)
 8001c0c:	6013      	str	r3, [r2, #0]
			distanceToCover = (uint32_t) (100 * TRIGGER_PER_DEGREE_RIGHT);
 8001c0e:	a130      	add	r1, pc, #192	; (adr r1, 8001cd0 <taskSearchLine+0x110>)
 8001c10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	4b38      	ldr	r3, [pc, #224]	; (8001cfc <taskSearchLine+0x13c>)
 8001c1a:	f7fe fce5 	bl	80005e8 <__aeabi_dmul>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	4610      	mov	r0, r2
 8001c24:	4619      	mov	r1, r3
 8001c26:	f7fe fef1 	bl	8000a0c <__aeabi_d2uiz>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	4a34      	ldr	r2, [pc, #208]	; (8001d00 <taskSearchLine+0x140>)
 8001c2e:	6013      	str	r3, [r2, #0]
			break;
 8001c30:	e049      	b.n	8001cc6 <taskSearchLine+0x106>

		case TURN_A:
			setDriveState(-0.5f, 0.5f, (uint32_t) (200 * TRIGGER_PER_DEGREE_LEFT), TURN_B);
 8001c32:	a129      	add	r1, pc, #164	; (adr r1, 8001cd8 <taskSearchLine+0x118>)
 8001c34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c38:	f04f 0200 	mov.w	r2, #0
 8001c3c:	4b31      	ldr	r3, [pc, #196]	; (8001d04 <taskSearchLine+0x144>)
 8001c3e:	f7fe fcd3 	bl	80005e8 <__aeabi_dmul>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	4610      	mov	r0, r2
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f7fe fedf 	bl	8000a0c <__aeabi_d2uiz>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2104      	movs	r1, #4
 8001c52:	4618      	mov	r0, r3
 8001c54:	ed9f 1b22 	vldr	d1, [pc, #136]	; 8001ce0 <taskSearchLine+0x120>
 8001c58:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8001ce8 <taskSearchLine+0x128>
 8001c5c:	f7ff fda4 	bl	80017a8 <setDriveState>
			break;
 8001c60:	e031      	b.n	8001cc6 <taskSearchLine+0x106>

		case TURN_B:
			setDriveState(0.5f, -0.5f, (uint32_t) (100 * TRIGGER_PER_DEGREE_RIGHT), TURN_C);
 8001c62:	a11b      	add	r1, pc, #108	; (adr r1, 8001cd0 <taskSearchLine+0x110>)
 8001c64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c68:	f04f 0200 	mov.w	r2, #0
 8001c6c:	4b23      	ldr	r3, [pc, #140]	; (8001cfc <taskSearchLine+0x13c>)
 8001c6e:	f7fe fcbb 	bl	80005e8 <__aeabi_dmul>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4610      	mov	r0, r2
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f7fe fec7 	bl	8000a0c <__aeabi_d2uiz>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2106      	movs	r1, #6
 8001c82:	4618      	mov	r0, r3
 8001c84:	ed9f 1b18 	vldr	d1, [pc, #96]	; 8001ce8 <taskSearchLine+0x128>
 8001c88:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8001ce0 <taskSearchLine+0x120>
 8001c8c:	f7ff fd8c 	bl	80017a8 <setDriveState>
			break;
 8001c90:	e019      	b.n	8001cc6 <taskSearchLine+0x106>

		case TURN_C:
			setDriveState(0.5f, 0.5f, 5 * TRIGGER_PER_CM, FINALE);
 8001c92:	2202      	movs	r2, #2
 8001c94:	4613      	mov	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	2107      	movs	r1, #7
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8001ce0 <taskSearchLine+0x120>
 8001ca2:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8001ce0 <taskSearchLine+0x120>
 8001ca6:	f7ff fd7f 	bl	80017a8 <setDriveState>
			break;
 8001caa:	e00c      	b.n	8001cc6 <taskSearchLine+0x106>

		case FINALE:
			if(ticksRight > (routinePersistent + distanceToCover)){
 8001cac:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <taskSearchLine+0x138>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <taskSearchLine+0x140>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	441a      	add	r2, r3
 8001cb6:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <taskSearchLine+0x134>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d202      	bcs.n	8001cc4 <taskSearchLine+0x104>
				routineState = START;
 8001cbe:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <taskSearchLine+0x130>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001cc4:	bf00      	nop
	}

}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	f3af 8000 	nop.w
 8001cd0:	1eb851ec 	.word	0x1eb851ec
 8001cd4:	3fc1eb85 	.word	0x3fc1eb85
 8001cd8:	0a3d70a4 	.word	0x0a3d70a4
 8001cdc:	3fc0a3d7 	.word	0x3fc0a3d7
 8001ce0:	00000000 	.word	0x00000000
 8001ce4:	3fe00000 	.word	0x3fe00000
 8001ce8:	00000000 	.word	0x00000000
 8001cec:	bfe00000 	.word	0xbfe00000
 8001cf0:	200000a0 	.word	0x200000a0
 8001cf4:	20000098 	.word	0x20000098
 8001cf8:	200000a4 	.word	0x200000a4
 8001cfc:	40590000 	.word	0x40590000
 8001d00:	200000a8 	.word	0x200000a8
 8001d04:	40690000 	.word	0x40690000

08001d08 <taskBlinkLED>:

enum LED_STATE {LED_ON, LED_OFF};
enum LED_STATE ledState = LED_ON;
uint32_t ledPersistent = 0;

void taskBlinkLED() {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
	switch (ledState) {
 8001d0c:	4b1c      	ldr	r3, [pc, #112]	; (8001d80 <taskBlinkLED+0x78>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d002      	beq.n	8001d1a <taskBlinkLED+0x12>
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d017      	beq.n	8001d48 <taskBlinkLED+0x40>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
				ledPersistent = HAL_GetTick();
				ledState = LED_ON;
			} break;
	}
}
 8001d18:	e030      	b.n	8001d7c <taskBlinkLED+0x74>
			if (HAL_GetTick() > (ledPersistent + 500)) {
 8001d1a:	f000 fb09 	bl	8002330 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <taskBlinkLED+0x7c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d924      	bls.n	8001d76 <taskBlinkLED+0x6e>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	2110      	movs	r1, #16
 8001d30:	4815      	ldr	r0, [pc, #84]	; (8001d88 <taskBlinkLED+0x80>)
 8001d32:	f002 f813 	bl	8003d5c <HAL_GPIO_WritePin>
				ledPersistent = HAL_GetTick();
 8001d36:	f000 fafb 	bl	8002330 <HAL_GetTick>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	4a11      	ldr	r2, [pc, #68]	; (8001d84 <taskBlinkLED+0x7c>)
 8001d3e:	6013      	str	r3, [r2, #0]
				ledState = LED_OFF;
 8001d40:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <taskBlinkLED+0x78>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	701a      	strb	r2, [r3, #0]
			} break;
 8001d46:	e016      	b.n	8001d76 <taskBlinkLED+0x6e>
			if (HAL_GetTick() > (ledPersistent + 500)) {
 8001d48:	f000 faf2 	bl	8002330 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	4b0d      	ldr	r3, [pc, #52]	; (8001d84 <taskBlinkLED+0x7c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d90f      	bls.n	8001d7a <taskBlinkLED+0x72>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	2110      	movs	r1, #16
 8001d5e:	480a      	ldr	r0, [pc, #40]	; (8001d88 <taskBlinkLED+0x80>)
 8001d60:	f001 fffc 	bl	8003d5c <HAL_GPIO_WritePin>
				ledPersistent = HAL_GetTick();
 8001d64:	f000 fae4 	bl	8002330 <HAL_GetTick>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	4a06      	ldr	r2, [pc, #24]	; (8001d84 <taskBlinkLED+0x7c>)
 8001d6c:	6013      	str	r3, [r2, #0]
				ledState = LED_ON;
 8001d6e:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <taskBlinkLED+0x78>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]
			} break;
 8001d74:	e001      	b.n	8001d7a <taskBlinkLED+0x72>
			} break;
 8001d76:	bf00      	nop
 8001d78:	e000      	b.n	8001d7c <taskBlinkLED+0x74>
			} break;
 8001d7a:	bf00      	nop
}
 8001d7c:	bf00      	nop
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	200000ac 	.word	0x200000ac
 8001d84:	200000b0 	.word	0x200000b0
 8001d88:	48000400 	.word	0x48000400

08001d8c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b09a      	sub	sp, #104	; 0x68
 8001d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d92:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	611a      	str	r2, [r3, #16]
 8001dbc:	615a      	str	r2, [r3, #20]
 8001dbe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001dc0:	1d3b      	adds	r3, r7, #4
 8001dc2:	222c      	movs	r2, #44	; 0x2c
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f004 fd9c 	bl	8006904 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001dcc:	4b49      	ldr	r3, [pc, #292]	; (8001ef4 <MX_TIM1_Init+0x168>)
 8001dce:	4a4a      	ldr	r2, [pc, #296]	; (8001ef8 <MX_TIM1_Init+0x16c>)
 8001dd0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001dd2:	4b48      	ldr	r3, [pc, #288]	; (8001ef4 <MX_TIM1_Init+0x168>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd8:	4b46      	ldr	r3, [pc, #280]	; (8001ef4 <MX_TIM1_Init+0x168>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001dde:	4b45      	ldr	r3, [pc, #276]	; (8001ef4 <MX_TIM1_Init+0x168>)
 8001de0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001de4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de6:	4b43      	ldr	r3, [pc, #268]	; (8001ef4 <MX_TIM1_Init+0x168>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001dec:	4b41      	ldr	r3, [pc, #260]	; (8001ef4 <MX_TIM1_Init+0x168>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001df2:	4b40      	ldr	r3, [pc, #256]	; (8001ef4 <MX_TIM1_Init+0x168>)
 8001df4:	2280      	movs	r2, #128	; 0x80
 8001df6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001df8:	483e      	ldr	r0, [pc, #248]	; (8001ef4 <MX_TIM1_Init+0x168>)
 8001dfa:	f003 f957 	bl	80050ac <HAL_TIM_Base_Init>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001e04:	f7ff fa96 	bl	8001334 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e0c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e0e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e12:	4619      	mov	r1, r3
 8001e14:	4837      	ldr	r0, [pc, #220]	; (8001ef4 <MX_TIM1_Init+0x168>)
 8001e16:	f003 fb11 	bl	800543c <HAL_TIM_ConfigClockSource>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001e20:	f7ff fa88 	bl	8001334 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e24:	4833      	ldr	r0, [pc, #204]	; (8001ef4 <MX_TIM1_Init+0x168>)
 8001e26:	f003 f998 	bl	800515a <HAL_TIM_PWM_Init>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001e30:	f7ff fa80 	bl	8001334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e34:	2300      	movs	r3, #0
 8001e36:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e40:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e44:	4619      	mov	r1, r3
 8001e46:	482b      	ldr	r0, [pc, #172]	; (8001ef4 <MX_TIM1_Init+0x168>)
 8001e48:	f003 ffd8 	bl	8005dfc <HAL_TIMEx_MasterConfigSynchronization>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001e52:	f7ff fa6f 	bl	8001334 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e56:	2360      	movs	r3, #96	; 0x60
 8001e58:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e62:	2300      	movs	r3, #0
 8001e64:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e76:	2204      	movs	r2, #4
 8001e78:	4619      	mov	r1, r3
 8001e7a:	481e      	ldr	r0, [pc, #120]	; (8001ef4 <MX_TIM1_Init+0x168>)
 8001e7c:	f003 f9ce 	bl	800521c <HAL_TIM_PWM_ConfigChannel>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001e86:	f7ff fa55 	bl	8001334 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e8e:	2208      	movs	r2, #8
 8001e90:	4619      	mov	r1, r3
 8001e92:	4818      	ldr	r0, [pc, #96]	; (8001ef4 <MX_TIM1_Init+0x168>)
 8001e94:	f003 f9c2 	bl	800521c <HAL_TIM_PWM_ConfigChannel>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001e9e:	f7ff fa49 	bl	8001334 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001eb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ec4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ed2:	1d3b      	adds	r3, r7, #4
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4807      	ldr	r0, [pc, #28]	; (8001ef4 <MX_TIM1_Init+0x168>)
 8001ed8:	f003 fff6 	bl	8005ec8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001ee2:	f7ff fa27 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ee6:	4803      	ldr	r0, [pc, #12]	; (8001ef4 <MX_TIM1_Init+0x168>)
 8001ee8:	f000 f828 	bl	8001f3c <HAL_TIM_MspPostInit>

}
 8001eec:	bf00      	nop
 8001eee:	3768      	adds	r7, #104	; 0x68
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	2000019c 	.word	0x2000019c
 8001ef8:	40012c00 	.word	0x40012c00

08001efc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a0a      	ldr	r2, [pc, #40]	; (8001f34 <HAL_TIM_Base_MspInit+0x38>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d10b      	bne.n	8001f26 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <HAL_TIM_Base_MspInit+0x3c>)
 8001f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f12:	4a09      	ldr	r2, [pc, #36]	; (8001f38 <HAL_TIM_Base_MspInit+0x3c>)
 8001f14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f18:	6613      	str	r3, [r2, #96]	; 0x60
 8001f1a:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <HAL_TIM_Base_MspInit+0x3c>)
 8001f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001f26:	bf00      	nop
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	40012c00 	.word	0x40012c00
 8001f38:	40021000 	.word	0x40021000

08001f3c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b088      	sub	sp, #32
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f44:	f107 030c 	add.w	r3, r7, #12
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	60da      	str	r2, [r3, #12]
 8001f52:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a11      	ldr	r2, [pc, #68]	; (8001fa0 <HAL_TIM_MspPostInit+0x64>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d11b      	bne.n	8001f96 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f5e:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <HAL_TIM_MspPostInit+0x68>)
 8001f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f62:	4a10      	ldr	r2, [pc, #64]	; (8001fa4 <HAL_TIM_MspPostInit+0x68>)
 8001f64:	f043 0302 	orr.w	r3, r3, #2
 8001f68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f6a:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <HAL_TIM_MspPostInit+0x68>)
 8001f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB0     ------> TIM1_CH2N
    PB1     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = Phase1_L_CH2N_Pin|Phase1_R_CH3N_Pin;
 8001f76:	2303      	movs	r3, #3
 8001f78:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f86:	2301      	movs	r3, #1
 8001f88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f8a:	f107 030c 	add.w	r3, r7, #12
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4805      	ldr	r0, [pc, #20]	; (8001fa8 <HAL_TIM_MspPostInit+0x6c>)
 8001f92:	f001 fd61 	bl	8003a58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001f96:	bf00      	nop
 8001f98:	3720      	adds	r7, #32
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40012c00 	.word	0x40012c00
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	48000400 	.word	0x48000400

08001fac <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fb0:	4b14      	ldr	r3, [pc, #80]	; (8002004 <MX_USART2_UART_Init+0x58>)
 8001fb2:	4a15      	ldr	r2, [pc, #84]	; (8002008 <MX_USART2_UART_Init+0x5c>)
 8001fb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fb6:	4b13      	ldr	r3, [pc, #76]	; (8002004 <MX_USART2_UART_Init+0x58>)
 8001fb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fbe:	4b11      	ldr	r3, [pc, #68]	; (8002004 <MX_USART2_UART_Init+0x58>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fc4:	4b0f      	ldr	r3, [pc, #60]	; (8002004 <MX_USART2_UART_Init+0x58>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fca:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <MX_USART2_UART_Init+0x58>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <MX_USART2_UART_Init+0x58>)
 8001fd2:	220c      	movs	r2, #12
 8001fd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fd6:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <MX_USART2_UART_Init+0x58>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fdc:	4b09      	ldr	r3, [pc, #36]	; (8002004 <MX_USART2_UART_Init+0x58>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fe2:	4b08      	ldr	r3, [pc, #32]	; (8002004 <MX_USART2_UART_Init+0x58>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fe8:	4b06      	ldr	r3, [pc, #24]	; (8002004 <MX_USART2_UART_Init+0x58>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fee:	4805      	ldr	r0, [pc, #20]	; (8002004 <MX_USART2_UART_Init+0x58>)
 8001ff0:	f004 f807 	bl	8006002 <HAL_UART_Init>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001ffa:	f7ff f99b 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	200001e8 	.word	0x200001e8
 8002008:	40004400 	.word	0x40004400

0800200c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08a      	sub	sp, #40	; 0x28
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a20      	ldr	r2, [pc, #128]	; (80020ac <HAL_UART_MspInit+0xa0>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d13a      	bne.n	80020a4 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800202e:	4b20      	ldr	r3, [pc, #128]	; (80020b0 <HAL_UART_MspInit+0xa4>)
 8002030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002032:	4a1f      	ldr	r2, [pc, #124]	; (80020b0 <HAL_UART_MspInit+0xa4>)
 8002034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002038:	6593      	str	r3, [r2, #88]	; 0x58
 800203a:	4b1d      	ldr	r3, [pc, #116]	; (80020b0 <HAL_UART_MspInit+0xa4>)
 800203c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002046:	4b1a      	ldr	r3, [pc, #104]	; (80020b0 <HAL_UART_MspInit+0xa4>)
 8002048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204a:	4a19      	ldr	r2, [pc, #100]	; (80020b0 <HAL_UART_MspInit+0xa4>)
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002052:	4b17      	ldr	r3, [pc, #92]	; (80020b0 <HAL_UART_MspInit+0xa4>)
 8002054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800205e:	2304      	movs	r3, #4
 8002060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002062:	2302      	movs	r3, #2
 8002064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206a:	2303      	movs	r3, #3
 800206c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800206e:	2307      	movs	r3, #7
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002072:	f107 0314 	add.w	r3, r7, #20
 8002076:	4619      	mov	r1, r3
 8002078:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800207c:	f001 fcec 	bl	8003a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002080:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002086:	2302      	movs	r3, #2
 8002088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208e:	2303      	movs	r3, #3
 8002090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002092:	2303      	movs	r3, #3
 8002094:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002096:	f107 0314 	add.w	r3, r7, #20
 800209a:	4619      	mov	r1, r3
 800209c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020a0:	f001 fcda 	bl	8003a58 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80020a4:	bf00      	nop
 80020a6:	3728      	adds	r7, #40	; 0x28
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40004400 	.word	0x40004400
 80020b0:	40021000 	.word	0x40021000

080020b4 <threewayLightComparator>:
#include <stdio.h>
#include "sensors.h"

// compares if all 3 values from the light sensor (left, middle, right) are smaller/larger than the threshold
// values are != 0 if the test should be val < threshold -> 0 means value is on line to be checked
bool threewayLightComparator(uint8_t a, uint8_t b, uint8_t c, uint32_t threshold){
 80020b4:	b480      	push	{r7}
 80020b6:	b089      	sub	sp, #36	; 0x24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	603b      	str	r3, [r7, #0]
 80020bc:	4603      	mov	r3, r0
 80020be:	71fb      	strb	r3, [r7, #7]
 80020c0:	460b      	mov	r3, r1
 80020c2:	71bb      	strb	r3, [r7, #6]
 80020c4:	4613      	mov	r3, r2
 80020c6:	717b      	strb	r3, [r7, #5]
	uint32_t a1 = adc[5];
 80020c8:	4b1d      	ldr	r3, [pc, #116]	; (8002140 <threewayLightComparator+0x8c>)
 80020ca:	695b      	ldr	r3, [r3, #20]
 80020cc:	61fb      	str	r3, [r7, #28]
	uint32_t b1 = adc[0];
 80020ce:	4b1c      	ldr	r3, [pc, #112]	; (8002140 <threewayLightComparator+0x8c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	61bb      	str	r3, [r7, #24]
	uint32_t c1 = adc[2];
 80020d4:	4b1a      	ldr	r3, [pc, #104]	; (8002140 <threewayLightComparator+0x8c>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	617b      	str	r3, [r7, #20]
	uint32_t a2 = threshold;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	613b      	str	r3, [r7, #16]
	uint32_t b2 = threshold;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	60fb      	str	r3, [r7, #12]
	uint32_t c2 = threshold;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	60bb      	str	r3, [r7, #8]

	if(a != 0){
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d004      	beq.n	80020f6 <threewayLightComparator+0x42>
		a1 = threshold;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	61fb      	str	r3, [r7, #28]
		a2 = adc[5];
 80020f0:	4b13      	ldr	r3, [pc, #76]	; (8002140 <threewayLightComparator+0x8c>)
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	613b      	str	r3, [r7, #16]
	}

	if(b != 0){
 80020f6:	79bb      	ldrb	r3, [r7, #6]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d004      	beq.n	8002106 <threewayLightComparator+0x52>
		b1 = threshold;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	61bb      	str	r3, [r7, #24]
		b2 = adc[0];
 8002100:	4b0f      	ldr	r3, [pc, #60]	; (8002140 <threewayLightComparator+0x8c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	60fb      	str	r3, [r7, #12]
	}

	if(c != 0){
 8002106:	797b      	ldrb	r3, [r7, #5]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d004      	beq.n	8002116 <threewayLightComparator+0x62>
		c1 = threshold;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	617b      	str	r3, [r7, #20]
		c2 = adc[2];
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <threewayLightComparator+0x8c>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	60bb      	str	r3, [r7, #8]
	}

	if((a1 > a2) && (b1 > b2) && (c1 > c2)){
 8002116:	69fa      	ldr	r2, [r7, #28]
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	429a      	cmp	r2, r3
 800211c:	d909      	bls.n	8002132 <threewayLightComparator+0x7e>
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	429a      	cmp	r2, r3
 8002124:	d905      	bls.n	8002132 <threewayLightComparator+0x7e>
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	429a      	cmp	r2, r3
 800212c:	d901      	bls.n	8002132 <threewayLightComparator+0x7e>
		return true;
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <threewayLightComparator+0x80>
	}else{
		return false;
 8002132:	2300      	movs	r3, #0
	}
}
 8002134:	4618      	mov	r0, r3
 8002136:	3724      	adds	r7, #36	; 0x24
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	20000180 	.word	0x20000180

08002144 <lineDetected>:


bool lineDetected(uint32_t threshold){
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
	if (threewayLightComparator(1, 0, 1, threshold) ||
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	2100      	movs	r1, #0
 8002152:	2001      	movs	r0, #1
 8002154:	f7ff ffae 	bl	80020b4 <threewayLightComparator>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d123      	bne.n	80021a6 <lineDetected+0x62>
	    threewayLightComparator(0, 0, 1, threshold) ||
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	2100      	movs	r1, #0
 8002164:	2000      	movs	r0, #0
 8002166:	f7ff ffa5 	bl	80020b4 <threewayLightComparator>
 800216a:	4603      	mov	r3, r0
	if (threewayLightComparator(1, 0, 1, threshold) ||
 800216c:	2b00      	cmp	r3, #0
 800216e:	d11a      	bne.n	80021a6 <lineDetected+0x62>
	    threewayLightComparator(0, 1, 1, threshold) ||
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	2101      	movs	r1, #1
 8002176:	2000      	movs	r0, #0
 8002178:	f7ff ff9c 	bl	80020b4 <threewayLightComparator>
 800217c:	4603      	mov	r3, r0
	    threewayLightComparator(0, 0, 1, threshold) ||
 800217e:	2b00      	cmp	r3, #0
 8002180:	d111      	bne.n	80021a6 <lineDetected+0x62>
	    threewayLightComparator(1, 1, 0, threshold) ||
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	2101      	movs	r1, #1
 8002188:	2001      	movs	r0, #1
 800218a:	f7ff ff93 	bl	80020b4 <threewayLightComparator>
 800218e:	4603      	mov	r3, r0
	    threewayLightComparator(0, 1, 1, threshold) ||
 8002190:	2b00      	cmp	r3, #0
 8002192:	d108      	bne.n	80021a6 <lineDetected+0x62>
	    threewayLightComparator(1, 0, 0, threshold)){
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	2100      	movs	r1, #0
 800219a:	2001      	movs	r0, #1
 800219c:	f7ff ff8a 	bl	80020b4 <threewayLightComparator>
 80021a0:	4603      	mov	r3, r0
	    threewayLightComparator(1, 1, 0, threshold) ||
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <lineDetected+0x66>
		return true;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e000      	b.n	80021ac <lineDetected+0x68>
	}else{
		return false;
 80021aa:	2300      	movs	r3, #0
	}
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <objectDetected>:


bool objectDetected(){
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
	GPIO_PinState left = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11);
 80021ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021c2:	f001 fdb3 	bl	8003d2c <HAL_GPIO_ReadPin>
 80021c6:	4603      	mov	r3, r0
 80021c8:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState middle = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 80021ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021d2:	f001 fdab 	bl	8003d2c <HAL_GPIO_ReadPin>
 80021d6:	4603      	mov	r3, r0
 80021d8:	71bb      	strb	r3, [r7, #6]
	GPIO_PinState right = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 80021da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021e2:	f001 fda3 	bl	8003d2c <HAL_GPIO_ReadPin>
 80021e6:	4603      	mov	r3, r0
 80021e8:	717b      	strb	r3, [r7, #5]
	if((left == GPIO_PIN_RESET) || (middle == GPIO_PIN_RESET) || (right == GPIO_PIN_RESET)){
 80021ea:	79fb      	ldrb	r3, [r7, #7]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d005      	beq.n	80021fc <objectDetected+0x48>
 80021f0:	79bb      	ldrb	r3, [r7, #6]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d002      	beq.n	80021fc <objectDetected+0x48>
 80021f6:	797b      	ldrb	r3, [r7, #5]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <objectDetected+0x4c>
		return true;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e000      	b.n	8002202 <objectDetected+0x4e>
	}else{
		return false;
 8002200:	2300      	movs	r3, #0
	}
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
	...

0800220c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800220c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002244 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002210:	f7ff fa98 	bl	8001744 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002214:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002216:	e003      	b.n	8002220 <LoopCopyDataInit>

08002218 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002218:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800221a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800221c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800221e:	3104      	adds	r1, #4

08002220 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002220:	480a      	ldr	r0, [pc, #40]	; (800224c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002222:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002224:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002226:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002228:	d3f6      	bcc.n	8002218 <CopyDataInit>
	ldr	r2, =_sbss
 800222a:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <LoopForever+0x12>)
	b	LoopFillZerobss
 800222c:	e002      	b.n	8002234 <LoopFillZerobss>

0800222e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800222e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002230:	f842 3b04 	str.w	r3, [r2], #4

08002234 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002234:	4b08      	ldr	r3, [pc, #32]	; (8002258 <LoopForever+0x16>)
	cmp	r2, r3
 8002236:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002238:	d3f9      	bcc.n	800222e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800223a:	f004 fb3f 	bl	80068bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800223e:	f7fe ff83 	bl	8001148 <main>

08002242 <LoopForever>:

LoopForever:
    b LoopForever
 8002242:	e7fe      	b.n	8002242 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002244:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002248:	0800722c 	.word	0x0800722c
	ldr	r0, =_sdata
 800224c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002250:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8002254:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8002258:	20000280 	.word	0x20000280

0800225c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800225c:	e7fe      	b.n	800225c <ADC1_IRQHandler>

0800225e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b082      	sub	sp, #8
 8002262:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002264:	2300      	movs	r3, #0
 8002266:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002268:	2003      	movs	r0, #3
 800226a:	f001 f9bb 	bl	80035e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800226e:	2000      	movs	r0, #0
 8002270:	f000 f80e 	bl	8002290 <HAL_InitTick>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d002      	beq.n	8002280 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	71fb      	strb	r3, [r7, #7]
 800227e:	e001      	b.n	8002284 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002280:	f7ff f9d2 	bl	8001628 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002284:	79fb      	ldrb	r3, [r7, #7]
}
 8002286:	4618      	mov	r0, r3
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
	...

08002290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002298:	2300      	movs	r3, #0
 800229a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800229c:	4b17      	ldr	r3, [pc, #92]	; (80022fc <HAL_InitTick+0x6c>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d023      	beq.n	80022ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80022a4:	4b16      	ldr	r3, [pc, #88]	; (8002300 <HAL_InitTick+0x70>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	4b14      	ldr	r3, [pc, #80]	; (80022fc <HAL_InitTick+0x6c>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	4619      	mov	r1, r3
 80022ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ba:	4618      	mov	r0, r3
 80022bc:	f001 f9c7 	bl	800364e <HAL_SYSTICK_Config>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10f      	bne.n	80022e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b0f      	cmp	r3, #15
 80022ca:	d809      	bhi.n	80022e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022cc:	2200      	movs	r2, #0
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	f04f 30ff 	mov.w	r0, #4294967295
 80022d4:	f001 f991 	bl	80035fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022d8:	4a0a      	ldr	r2, [pc, #40]	; (8002304 <HAL_InitTick+0x74>)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	e007      	b.n	80022f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	73fb      	strb	r3, [r7, #15]
 80022e4:	e004      	b.n	80022f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	73fb      	strb	r3, [r7, #15]
 80022ea:	e001      	b.n	80022f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	2000000c 	.word	0x2000000c
 8002300:	20000004 	.word	0x20000004
 8002304:	20000008 	.word	0x20000008

08002308 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800230c:	4b06      	ldr	r3, [pc, #24]	; (8002328 <HAL_IncTick+0x20>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	461a      	mov	r2, r3
 8002312:	4b06      	ldr	r3, [pc, #24]	; (800232c <HAL_IncTick+0x24>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4413      	add	r3, r2
 8002318:	4a04      	ldr	r2, [pc, #16]	; (800232c <HAL_IncTick+0x24>)
 800231a:	6013      	str	r3, [r2, #0]
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	2000000c 	.word	0x2000000c
 800232c:	2000026c 	.word	0x2000026c

08002330 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  return uwTick;
 8002334:	4b03      	ldr	r3, [pc, #12]	; (8002344 <HAL_GetTick+0x14>)
 8002336:	681b      	ldr	r3, [r3, #0]
}
 8002338:	4618      	mov	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	2000026c 	.word	0x2000026c

08002348 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	431a      	orrs	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	609a      	str	r2, [r3, #8]
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	431a      	orrs	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	609a      	str	r2, [r3, #8]
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b087      	sub	sp, #28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
 80023bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	3360      	adds	r3, #96	; 0x60
 80023c2:	461a      	mov	r2, r3
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <LL_ADC_SetOffset+0x44>)
 80023d2:	4013      	ands	r3, r2
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	4313      	orrs	r3, r2
 80023e0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80023e8:	bf00      	nop
 80023ea:	371c      	adds	r7, #28
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	03fff000 	.word	0x03fff000

080023f8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3360      	adds	r3, #96	; 0x60
 8002406:	461a      	mov	r2, r3
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002418:	4618      	mov	r0, r3
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002424:	b480      	push	{r7}
 8002426:	b087      	sub	sp, #28
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	3360      	adds	r3, #96	; 0x60
 8002434:	461a      	mov	r2, r3
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	431a      	orrs	r2, r3
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800244e:	bf00      	nop
 8002450:	371c      	adds	r7, #28
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800246e:	2301      	movs	r3, #1
 8002470:	e000      	b.n	8002474 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002480:	b480      	push	{r7}
 8002482:	b087      	sub	sp, #28
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	3330      	adds	r3, #48	; 0x30
 8002490:	461a      	mov	r2, r3
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	0a1b      	lsrs	r3, r3, #8
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	f003 030c 	and.w	r3, r3, #12
 800249c:	4413      	add	r3, r2
 800249e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	f003 031f 	and.w	r3, r3, #31
 80024aa:	211f      	movs	r1, #31
 80024ac:	fa01 f303 	lsl.w	r3, r1, r3
 80024b0:	43db      	mvns	r3, r3
 80024b2:	401a      	ands	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	0e9b      	lsrs	r3, r3, #26
 80024b8:	f003 011f 	and.w	r1, r3, #31
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	f003 031f 	and.w	r3, r3, #31
 80024c2:	fa01 f303 	lsl.w	r3, r1, r3
 80024c6:	431a      	orrs	r2, r3
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80024cc:	bf00      	nop
 80024ce:	371c      	adds	r7, #28
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80024d8:	b480      	push	{r7}
 80024da:	b087      	sub	sp, #28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	3314      	adds	r3, #20
 80024e8:	461a      	mov	r2, r3
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	0e5b      	lsrs	r3, r3, #25
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	4413      	add	r3, r2
 80024f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	0d1b      	lsrs	r3, r3, #20
 8002500:	f003 031f 	and.w	r3, r3, #31
 8002504:	2107      	movs	r1, #7
 8002506:	fa01 f303 	lsl.w	r3, r1, r3
 800250a:	43db      	mvns	r3, r3
 800250c:	401a      	ands	r2, r3
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	0d1b      	lsrs	r3, r3, #20
 8002512:	f003 031f 	and.w	r3, r3, #31
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	fa01 f303 	lsl.w	r3, r1, r3
 800251c:	431a      	orrs	r2, r3
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002522:	bf00      	nop
 8002524:	371c      	adds	r7, #28
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
	...

08002530 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002548:	43db      	mvns	r3, r3
 800254a:	401a      	ands	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f003 0318 	and.w	r3, r3, #24
 8002552:	4908      	ldr	r1, [pc, #32]	; (8002574 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002554:	40d9      	lsrs	r1, r3
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	400b      	ands	r3, r1
 800255a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800255e:	431a      	orrs	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002566:	bf00      	nop
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	0007ffff 	.word	0x0007ffff

08002578 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002588:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6093      	str	r3, [r2, #8]
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025b0:	d101      	bne.n	80025b6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80025d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002600:	d101      	bne.n	8002606 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002624:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002628:	f043 0201 	orr.w	r2, r3, #1
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <LL_ADC_IsEnabled+0x18>
 8002650:	2301      	movs	r3, #1
 8002652:	e000      	b.n	8002656 <LL_ADC_IsEnabled+0x1a>
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002672:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002676:	f043 0204 	orr.w	r2, r3, #4
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 0304 	and.w	r3, r3, #4
 800269a:	2b04      	cmp	r3, #4
 800269c:	d101      	bne.n	80026a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 0308 	and.w	r3, r3, #8
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d101      	bne.n	80026c8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80026c4:	2301      	movs	r3, #1
 80026c6:	e000      	b.n	80026ca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
	...

080026d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b088      	sub	sp, #32
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026e0:	2300      	movs	r3, #0
 80026e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e12c      	b.n	800294c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d109      	bne.n	8002714 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7fe fc25 	bl	8000f50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff ff3f 	bl	800259c <LL_ADC_IsDeepPowerDownEnabled>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d004      	beq.n	800272e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff ff25 	bl	8002578 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff ff5a 	bl	80025ec <LL_ADC_IsInternalRegulatorEnabled>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d115      	bne.n	800276a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff ff3e 	bl	80025c4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002748:	4b82      	ldr	r3, [pc, #520]	; (8002954 <HAL_ADC_Init+0x27c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	099b      	lsrs	r3, r3, #6
 800274e:	4a82      	ldr	r2, [pc, #520]	; (8002958 <HAL_ADC_Init+0x280>)
 8002750:	fba2 2303 	umull	r2, r3, r2, r3
 8002754:	099b      	lsrs	r3, r3, #6
 8002756:	3301      	adds	r3, #1
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800275c:	e002      	b.n	8002764 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	3b01      	subs	r3, #1
 8002762:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f9      	bne.n	800275e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff ff3c 	bl	80025ec <LL_ADC_IsInternalRegulatorEnabled>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10d      	bne.n	8002796 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277e:	f043 0210 	orr.w	r2, r3, #16
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278a:	f043 0201 	orr.w	r2, r3, #1
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff ff75 	bl	800268a <LL_ADC_REG_IsConversionOngoing>
 80027a0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a6:	f003 0310 	and.w	r3, r3, #16
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f040 80c5 	bne.w	800293a <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f040 80c1 	bne.w	800293a <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027bc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80027c0:	f043 0202 	orr.w	r2, r3, #2
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff ff35 	bl	800263c <LL_ADC_IsEnabled>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10b      	bne.n	80027f0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027d8:	4860      	ldr	r0, [pc, #384]	; (800295c <HAL_ADC_Init+0x284>)
 80027da:	f7ff ff2f 	bl	800263c <LL_ADC_IsEnabled>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d105      	bne.n	80027f0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	4619      	mov	r1, r3
 80027ea:	485d      	ldr	r0, [pc, #372]	; (8002960 <HAL_ADC_Init+0x288>)
 80027ec:	f7ff fdac 	bl	8002348 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	7e5b      	ldrb	r3, [r3, #25]
 80027f4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027fa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002800:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002806:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800280e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002810:	4313      	orrs	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 3020 	ldrb.w	r3, [r3, #32]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d106      	bne.n	800282c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	3b01      	subs	r3, #1
 8002824:	045b      	lsls	r3, r3, #17
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4313      	orrs	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002830:	2b00      	cmp	r3, #0
 8002832:	d009      	beq.n	8002848 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002838:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002840:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4313      	orrs	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68da      	ldr	r2, [r3, #12]
 800284e:	4b45      	ldr	r3, [pc, #276]	; (8002964 <HAL_ADC_Init+0x28c>)
 8002850:	4013      	ands	r3, r2
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	6812      	ldr	r2, [r2, #0]
 8002856:	69b9      	ldr	r1, [r7, #24]
 8002858:	430b      	orrs	r3, r1
 800285a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ff12 	bl	800268a <LL_ADC_REG_IsConversionOngoing>
 8002866:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff ff1f 	bl	80026b0 <LL_ADC_INJ_IsConversionOngoing>
 8002872:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d13d      	bne.n	80028f6 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d13a      	bne.n	80028f6 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002884:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800288c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800289c:	f023 0302 	bic.w	r3, r3, #2
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6812      	ldr	r2, [r2, #0]
 80028a4:	69b9      	ldr	r1, [r7, #24]
 80028a6:	430b      	orrs	r3, r1
 80028a8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d118      	bne.n	80028e6 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80028be:	f023 0304 	bic.w	r3, r3, #4
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028ca:	4311      	orrs	r1, r2
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80028d0:	4311      	orrs	r1, r2
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80028d6:	430a      	orrs	r2, r1
 80028d8:	431a      	orrs	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f042 0201 	orr.w	r2, r2, #1
 80028e2:	611a      	str	r2, [r3, #16]
 80028e4:	e007      	b.n	80028f6 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 0201 	bic.w	r2, r2, #1
 80028f4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d10c      	bne.n	8002918 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002904:	f023 010f 	bic.w	r1, r3, #15
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	69db      	ldr	r3, [r3, #28]
 800290c:	1e5a      	subs	r2, r3, #1
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	631a      	str	r2, [r3, #48]	; 0x30
 8002916:	e007      	b.n	8002928 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 020f 	bic.w	r2, r2, #15
 8002926:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800292c:	f023 0303 	bic.w	r3, r3, #3
 8002930:	f043 0201 	orr.w	r2, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	655a      	str	r2, [r3, #84]	; 0x54
 8002938:	e007      	b.n	800294a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293e:	f043 0210 	orr.w	r2, r3, #16
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800294a:	7ffb      	ldrb	r3, [r7, #31]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3720      	adds	r7, #32
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	20000004 	.word	0x20000004
 8002958:	053e2d63 	.word	0x053e2d63
 800295c:	50040000 	.word	0x50040000
 8002960:	50040300 	.word	0x50040300
 8002964:	fff0c007 	.word	0xfff0c007

08002968 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff fe86 	bl	800268a <LL_ADC_REG_IsConversionOngoing>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d167      	bne.n	8002a54 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800298a:	2b01      	cmp	r3, #1
 800298c:	d101      	bne.n	8002992 <HAL_ADC_Start_DMA+0x2a>
 800298e:	2302      	movs	r3, #2
 8002990:	e063      	b.n	8002a5a <HAL_ADC_Start_DMA+0xf2>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 fc5c 	bl	8003258 <ADC_Enable>
 80029a0:	4603      	mov	r3, r0
 80029a2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80029a4:	7dfb      	ldrb	r3, [r7, #23]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d14f      	bne.n	8002a4a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029b2:	f023 0301 	bic.w	r3, r3, #1
 80029b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d006      	beq.n	80029d8 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ce:	f023 0206 	bic.w	r2, r3, #6
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	659a      	str	r2, [r3, #88]	; 0x58
 80029d6:	e002      	b.n	80029de <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e2:	4a20      	ldr	r2, [pc, #128]	; (8002a64 <HAL_ADC_Start_DMA+0xfc>)
 80029e4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ea:	4a1f      	ldr	r2, [pc, #124]	; (8002a68 <HAL_ADC_Start_DMA+0x100>)
 80029ec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f2:	4a1e      	ldr	r2, [pc, #120]	; (8002a6c <HAL_ADC_Start_DMA+0x104>)
 80029f4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	221c      	movs	r2, #28
 80029fc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f042 0210 	orr.w	r2, r2, #16
 8002a14:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68da      	ldr	r2, [r3, #12]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 0201 	orr.w	r2, r2, #1
 8002a24:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	3340      	adds	r3, #64	; 0x40
 8002a30:	4619      	mov	r1, r3
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f000 fecf 	bl	80037d8 <HAL_DMA_Start_IT>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff fe0d 	bl	8002662 <LL_ADC_REG_StartConversion>
 8002a48:	e006      	b.n	8002a58 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002a52:	e001      	b.n	8002a58 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a54:	2302      	movs	r3, #2
 8002a56:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a58:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3718      	adds	r7, #24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	0800331d 	.word	0x0800331d
 8002a68:	080033f5 	.word	0x080033f5
 8002a6c:	08003411 	.word	0x08003411

08002a70 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b0b6      	sub	sp, #216	; 0xd8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d101      	bne.n	8002aba <HAL_ADC_ConfigChannel+0x22>
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	e3b9      	b.n	800322e <HAL_ADC_ConfigChannel+0x796>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff fddf 	bl	800268a <LL_ADC_REG_IsConversionOngoing>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f040 839e 	bne.w	8003210 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2b05      	cmp	r3, #5
 8002ada:	d824      	bhi.n	8002b26 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	3b02      	subs	r3, #2
 8002ae2:	2b03      	cmp	r3, #3
 8002ae4:	d81b      	bhi.n	8002b1e <HAL_ADC_ConfigChannel+0x86>
 8002ae6:	a201      	add	r2, pc, #4	; (adr r2, 8002aec <HAL_ADC_ConfigChannel+0x54>)
 8002ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aec:	08002afd 	.word	0x08002afd
 8002af0:	08002b05 	.word	0x08002b05
 8002af4:	08002b0d 	.word	0x08002b0d
 8002af8:	08002b15 	.word	0x08002b15
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	220c      	movs	r2, #12
 8002b00:	605a      	str	r2, [r3, #4]
          break;
 8002b02:	e011      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	2212      	movs	r2, #18
 8002b08:	605a      	str	r2, [r3, #4]
          break;
 8002b0a:	e00d      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	2218      	movs	r2, #24
 8002b10:	605a      	str	r2, [r3, #4]
          break;
 8002b12:	e009      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b1a:	605a      	str	r2, [r3, #4]
          break;
 8002b1c:	e004      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	2206      	movs	r2, #6
 8002b22:	605a      	str	r2, [r3, #4]
          break;
 8002b24:	e000      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002b26:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6818      	ldr	r0, [r3, #0]
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	6859      	ldr	r1, [r3, #4]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	461a      	mov	r2, r3
 8002b36:	f7ff fca3 	bl	8002480 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff fda3 	bl	800268a <LL_ADC_REG_IsConversionOngoing>
 8002b44:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff fdaf 	bl	80026b0 <LL_ADC_INJ_IsConversionOngoing>
 8002b52:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b56:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f040 81a6 	bne.w	8002eac <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f040 81a1 	bne.w	8002eac <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6818      	ldr	r0, [r3, #0]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	6819      	ldr	r1, [r3, #0]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	461a      	mov	r2, r3
 8002b78:	f7ff fcae 	bl	80024d8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	695a      	ldr	r2, [r3, #20]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	08db      	lsrs	r3, r3, #3
 8002b88:	f003 0303 	and.w	r3, r3, #3
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d00a      	beq.n	8002bb4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6818      	ldr	r0, [r3, #0]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	6919      	ldr	r1, [r3, #16]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002bae:	f7ff fbff 	bl	80023b0 <LL_ADC_SetOffset>
 8002bb2:	e17b      	b.n	8002eac <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2100      	movs	r1, #0
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff fc1c 	bl	80023f8 <LL_ADC_GetOffsetChannel>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10a      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x148>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2100      	movs	r1, #0
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff fc11 	bl	80023f8 <LL_ADC_GetOffsetChannel>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	0e9b      	lsrs	r3, r3, #26
 8002bda:	f003 021f 	and.w	r2, r3, #31
 8002bde:	e01e      	b.n	8002c1e <HAL_ADC_ConfigChannel+0x186>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2100      	movs	r1, #0
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff fc06 	bl	80023f8 <LL_ADC_GetOffsetChannel>
 8002bec:	4603      	mov	r3, r0
 8002bee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002bf6:	fa93 f3a3 	rbit	r3, r3
 8002bfa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bfe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002c0e:	2320      	movs	r3, #32
 8002c10:	e004      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002c12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c16:	fab3 f383 	clz	r3, r3
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d105      	bne.n	8002c36 <HAL_ADC_ConfigChannel+0x19e>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	0e9b      	lsrs	r3, r3, #26
 8002c30:	f003 031f 	and.w	r3, r3, #31
 8002c34:	e018      	b.n	8002c68 <HAL_ADC_ConfigChannel+0x1d0>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002c42:	fa93 f3a3 	rbit	r3, r3
 8002c46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002c4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002c52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002c5a:	2320      	movs	r3, #32
 8002c5c:	e004      	b.n	8002c68 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002c5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c62:	fab3 f383 	clz	r3, r3
 8002c66:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d106      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2200      	movs	r2, #0
 8002c72:	2100      	movs	r1, #0
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff fbd5 	bl	8002424 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2101      	movs	r1, #1
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff fbb9 	bl	80023f8 <LL_ADC_GetOffsetChannel>
 8002c86:	4603      	mov	r3, r0
 8002c88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10a      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x20e>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2101      	movs	r1, #1
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff fbae 	bl	80023f8 <LL_ADC_GetOffsetChannel>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	0e9b      	lsrs	r3, r3, #26
 8002ca0:	f003 021f 	and.w	r2, r3, #31
 8002ca4:	e01e      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x24c>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2101      	movs	r1, #1
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff fba3 	bl	80023f8 <LL_ADC_GetOffsetChannel>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002cbc:	fa93 f3a3 	rbit	r3, r3
 8002cc0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002cc4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002cc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002ccc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002cd4:	2320      	movs	r3, #32
 8002cd6:	e004      	b.n	8002ce2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002cd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002cdc:	fab3 f383 	clz	r3, r3
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d105      	bne.n	8002cfc <HAL_ADC_ConfigChannel+0x264>
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	0e9b      	lsrs	r3, r3, #26
 8002cf6:	f003 031f 	and.w	r3, r3, #31
 8002cfa:	e018      	b.n	8002d2e <HAL_ADC_ConfigChannel+0x296>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d08:	fa93 f3a3 	rbit	r3, r3
 8002d0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002d10:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002d18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002d20:	2320      	movs	r3, #32
 8002d22:	e004      	b.n	8002d2e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002d24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d28:	fab3 f383 	clz	r3, r3
 8002d2c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d106      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2200      	movs	r2, #0
 8002d38:	2101      	movs	r1, #1
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff fb72 	bl	8002424 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2102      	movs	r1, #2
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff fb56 	bl	80023f8 <LL_ADC_GetOffsetChannel>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10a      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x2d4>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2102      	movs	r1, #2
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff fb4b 	bl	80023f8 <LL_ADC_GetOffsetChannel>
 8002d62:	4603      	mov	r3, r0
 8002d64:	0e9b      	lsrs	r3, r3, #26
 8002d66:	f003 021f 	and.w	r2, r3, #31
 8002d6a:	e01e      	b.n	8002daa <HAL_ADC_ConfigChannel+0x312>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2102      	movs	r1, #2
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff fb40 	bl	80023f8 <LL_ADC_GetOffsetChannel>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d82:	fa93 f3a3 	rbit	r3, r3
 8002d86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002d8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002d92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002d9a:	2320      	movs	r3, #32
 8002d9c:	e004      	b.n	8002da8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002d9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002da2:	fab3 f383 	clz	r3, r3
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d105      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x32a>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	0e9b      	lsrs	r3, r3, #26
 8002dbc:	f003 031f 	and.w	r3, r3, #31
 8002dc0:	e016      	b.n	8002df0 <HAL_ADC_ConfigChannel+0x358>
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002dce:	fa93 f3a3 	rbit	r3, r3
 8002dd2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002dd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002dd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002dda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002de2:	2320      	movs	r3, #32
 8002de4:	e004      	b.n	8002df0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002de6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dea:	fab3 f383 	clz	r3, r3
 8002dee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d106      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	2102      	movs	r1, #2
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff fb11 	bl	8002424 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2103      	movs	r1, #3
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff faf5 	bl	80023f8 <LL_ADC_GetOffsetChannel>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10a      	bne.n	8002e2e <HAL_ADC_ConfigChannel+0x396>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2103      	movs	r1, #3
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff faea 	bl	80023f8 <LL_ADC_GetOffsetChannel>
 8002e24:	4603      	mov	r3, r0
 8002e26:	0e9b      	lsrs	r3, r3, #26
 8002e28:	f003 021f 	and.w	r2, r3, #31
 8002e2c:	e017      	b.n	8002e5e <HAL_ADC_ConfigChannel+0x3c6>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2103      	movs	r1, #3
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff fadf 	bl	80023f8 <LL_ADC_GetOffsetChannel>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e40:	fa93 f3a3 	rbit	r3, r3
 8002e44:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002e46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e48:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002e4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002e50:	2320      	movs	r3, #32
 8002e52:	e003      	b.n	8002e5c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002e54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e56:	fab3 f383 	clz	r3, r3
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d105      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x3de>
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	0e9b      	lsrs	r3, r3, #26
 8002e70:	f003 031f 	and.w	r3, r3, #31
 8002e74:	e011      	b.n	8002e9a <HAL_ADC_ConfigChannel+0x402>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e7e:	fa93 f3a3 	rbit	r3, r3
 8002e82:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002e84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e86:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002e8e:	2320      	movs	r3, #32
 8002e90:	e003      	b.n	8002e9a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e94:	fab3 f383 	clz	r3, r3
 8002e98:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d106      	bne.n	8002eac <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	2103      	movs	r1, #3
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff fabc 	bl	8002424 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff fbc3 	bl	800263c <LL_ADC_IsEnabled>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f040 813f 	bne.w	800313c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6818      	ldr	r0, [r3, #0]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	6819      	ldr	r1, [r3, #0]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	f7ff fb30 	bl	8002530 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	4a8e      	ldr	r2, [pc, #568]	; (8003110 <HAL_ADC_ConfigChannel+0x678>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	f040 8130 	bne.w	800313c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10b      	bne.n	8002f04 <HAL_ADC_ConfigChannel+0x46c>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	0e9b      	lsrs	r3, r3, #26
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	f003 031f 	and.w	r3, r3, #31
 8002ef8:	2b09      	cmp	r3, #9
 8002efa:	bf94      	ite	ls
 8002efc:	2301      	movls	r3, #1
 8002efe:	2300      	movhi	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	e019      	b.n	8002f38 <HAL_ADC_ConfigChannel+0x4a0>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f0c:	fa93 f3a3 	rbit	r3, r3
 8002f10:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002f12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f14:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002f16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002f1c:	2320      	movs	r3, #32
 8002f1e:	e003      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002f20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f22:	fab3 f383 	clz	r3, r3
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	3301      	adds	r3, #1
 8002f2a:	f003 031f 	and.w	r3, r3, #31
 8002f2e:	2b09      	cmp	r3, #9
 8002f30:	bf94      	ite	ls
 8002f32:	2301      	movls	r3, #1
 8002f34:	2300      	movhi	r3, #0
 8002f36:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d079      	beq.n	8003030 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d107      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x4c0>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	0e9b      	lsrs	r3, r3, #26
 8002f4e:	3301      	adds	r3, #1
 8002f50:	069b      	lsls	r3, r3, #26
 8002f52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f56:	e015      	b.n	8002f84 <HAL_ADC_ConfigChannel+0x4ec>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f60:	fa93 f3a3 	rbit	r3, r3
 8002f64:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f68:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002f6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002f70:	2320      	movs	r3, #32
 8002f72:	e003      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002f74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f76:	fab3 f383 	clz	r3, r3
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	069b      	lsls	r3, r3, #26
 8002f80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d109      	bne.n	8002fa4 <HAL_ADC_ConfigChannel+0x50c>
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	0e9b      	lsrs	r3, r3, #26
 8002f96:	3301      	adds	r3, #1
 8002f98:	f003 031f 	and.w	r3, r3, #31
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa2:	e017      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x53c>
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002faa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fac:	fa93 f3a3 	rbit	r3, r3
 8002fb0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002fb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fb4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002fbc:	2320      	movs	r3, #32
 8002fbe:	e003      	b.n	8002fc8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002fc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fc2:	fab3 f383 	clz	r3, r3
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	3301      	adds	r3, #1
 8002fca:	f003 031f 	and.w	r3, r3, #31
 8002fce:	2101      	movs	r1, #1
 8002fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd4:	ea42 0103 	orr.w	r1, r2, r3
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10a      	bne.n	8002ffa <HAL_ADC_ConfigChannel+0x562>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	0e9b      	lsrs	r3, r3, #26
 8002fea:	3301      	adds	r3, #1
 8002fec:	f003 021f 	and.w	r2, r3, #31
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	4413      	add	r3, r2
 8002ff6:	051b      	lsls	r3, r3, #20
 8002ff8:	e018      	b.n	800302c <HAL_ADC_ConfigChannel+0x594>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003002:	fa93 f3a3 	rbit	r3, r3
 8003006:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800300a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800300c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003012:	2320      	movs	r3, #32
 8003014:	e003      	b.n	800301e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003018:	fab3 f383 	clz	r3, r3
 800301c:	b2db      	uxtb	r3, r3
 800301e:	3301      	adds	r3, #1
 8003020:	f003 021f 	and.w	r2, r3, #31
 8003024:	4613      	mov	r3, r2
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	4413      	add	r3, r2
 800302a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800302c:	430b      	orrs	r3, r1
 800302e:	e080      	b.n	8003132 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003038:	2b00      	cmp	r3, #0
 800303a:	d107      	bne.n	800304c <HAL_ADC_ConfigChannel+0x5b4>
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	0e9b      	lsrs	r3, r3, #26
 8003042:	3301      	adds	r3, #1
 8003044:	069b      	lsls	r3, r3, #26
 8003046:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800304a:	e015      	b.n	8003078 <HAL_ADC_ConfigChannel+0x5e0>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003054:	fa93 f3a3 	rbit	r3, r3
 8003058:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800305a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800305e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003064:	2320      	movs	r3, #32
 8003066:	e003      	b.n	8003070 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306a:	fab3 f383 	clz	r3, r3
 800306e:	b2db      	uxtb	r3, r3
 8003070:	3301      	adds	r3, #1
 8003072:	069b      	lsls	r3, r3, #26
 8003074:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003080:	2b00      	cmp	r3, #0
 8003082:	d109      	bne.n	8003098 <HAL_ADC_ConfigChannel+0x600>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	0e9b      	lsrs	r3, r3, #26
 800308a:	3301      	adds	r3, #1
 800308c:	f003 031f 	and.w	r3, r3, #31
 8003090:	2101      	movs	r1, #1
 8003092:	fa01 f303 	lsl.w	r3, r1, r3
 8003096:	e017      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x630>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309e:	6a3b      	ldr	r3, [r7, #32]
 80030a0:	fa93 f3a3 	rbit	r3, r3
 80030a4:	61fb      	str	r3, [r7, #28]
  return result;
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80030b0:	2320      	movs	r3, #32
 80030b2:	e003      	b.n	80030bc <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	fab3 f383 	clz	r3, r3
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	3301      	adds	r3, #1
 80030be:	f003 031f 	and.w	r3, r3, #31
 80030c2:	2101      	movs	r1, #1
 80030c4:	fa01 f303 	lsl.w	r3, r1, r3
 80030c8:	ea42 0103 	orr.w	r1, r2, r3
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10d      	bne.n	80030f4 <HAL_ADC_ConfigChannel+0x65c>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	0e9b      	lsrs	r3, r3, #26
 80030de:	3301      	adds	r3, #1
 80030e0:	f003 021f 	and.w	r2, r3, #31
 80030e4:	4613      	mov	r3, r2
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	4413      	add	r3, r2
 80030ea:	3b1e      	subs	r3, #30
 80030ec:	051b      	lsls	r3, r3, #20
 80030ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030f2:	e01d      	b.n	8003130 <HAL_ADC_ConfigChannel+0x698>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	fa93 f3a3 	rbit	r3, r3
 8003100:	613b      	str	r3, [r7, #16]
  return result;
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d103      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800310c:	2320      	movs	r3, #32
 800310e:	e005      	b.n	800311c <HAL_ADC_ConfigChannel+0x684>
 8003110:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	fab3 f383 	clz	r3, r3
 800311a:	b2db      	uxtb	r3, r3
 800311c:	3301      	adds	r3, #1
 800311e:	f003 021f 	and.w	r2, r3, #31
 8003122:	4613      	mov	r3, r2
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	4413      	add	r3, r2
 8003128:	3b1e      	subs	r3, #30
 800312a:	051b      	lsls	r3, r3, #20
 800312c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003130:	430b      	orrs	r3, r1
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	6892      	ldr	r2, [r2, #8]
 8003136:	4619      	mov	r1, r3
 8003138:	f7ff f9ce 	bl	80024d8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	4b3d      	ldr	r3, [pc, #244]	; (8003238 <HAL_ADC_ConfigChannel+0x7a0>)
 8003142:	4013      	ands	r3, r2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d06c      	beq.n	8003222 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003148:	483c      	ldr	r0, [pc, #240]	; (800323c <HAL_ADC_ConfigChannel+0x7a4>)
 800314a:	f7ff f923 	bl	8002394 <LL_ADC_GetCommonPathInternalCh>
 800314e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a3a      	ldr	r2, [pc, #232]	; (8003240 <HAL_ADC_ConfigChannel+0x7a8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d127      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800315c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003160:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d121      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a35      	ldr	r2, [pc, #212]	; (8003244 <HAL_ADC_ConfigChannel+0x7ac>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d157      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003172:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003176:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800317a:	4619      	mov	r1, r3
 800317c:	482f      	ldr	r0, [pc, #188]	; (800323c <HAL_ADC_ConfigChannel+0x7a4>)
 800317e:	f7ff f8f6 	bl	800236e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003182:	4b31      	ldr	r3, [pc, #196]	; (8003248 <HAL_ADC_ConfigChannel+0x7b0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	099b      	lsrs	r3, r3, #6
 8003188:	4a30      	ldr	r2, [pc, #192]	; (800324c <HAL_ADC_ConfigChannel+0x7b4>)
 800318a:	fba2 2303 	umull	r2, r3, r2, r3
 800318e:	099b      	lsrs	r3, r3, #6
 8003190:	1c5a      	adds	r2, r3, #1
 8003192:	4613      	mov	r3, r2
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	4413      	add	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800319c:	e002      	b.n	80031a4 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	3b01      	subs	r3, #1
 80031a2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f9      	bne.n	800319e <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031aa:	e03a      	b.n	8003222 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a27      	ldr	r2, [pc, #156]	; (8003250 <HAL_ADC_ConfigChannel+0x7b8>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d113      	bne.n	80031de <HAL_ADC_ConfigChannel+0x746>
 80031b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10d      	bne.n	80031de <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a1f      	ldr	r2, [pc, #124]	; (8003244 <HAL_ADC_ConfigChannel+0x7ac>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d12a      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031d4:	4619      	mov	r1, r3
 80031d6:	4819      	ldr	r0, [pc, #100]	; (800323c <HAL_ADC_ConfigChannel+0x7a4>)
 80031d8:	f7ff f8c9 	bl	800236e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031dc:	e021      	b.n	8003222 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a1c      	ldr	r2, [pc, #112]	; (8003254 <HAL_ADC_ConfigChannel+0x7bc>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d11c      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80031e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d116      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a12      	ldr	r2, [pc, #72]	; (8003244 <HAL_ADC_ConfigChannel+0x7ac>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d111      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003202:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003206:	4619      	mov	r1, r3
 8003208:	480c      	ldr	r0, [pc, #48]	; (800323c <HAL_ADC_ConfigChannel+0x7a4>)
 800320a:	f7ff f8b0 	bl	800236e <LL_ADC_SetCommonPathInternalCh>
 800320e:	e008      	b.n	8003222 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003214:	f043 0220 	orr.w	r2, r3, #32
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800322a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800322e:	4618      	mov	r0, r3
 8003230:	37d8      	adds	r7, #216	; 0xd8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	80080000 	.word	0x80080000
 800323c:	50040300 	.word	0x50040300
 8003240:	c7520000 	.word	0xc7520000
 8003244:	50040000 	.word	0x50040000
 8003248:	20000004 	.word	0x20000004
 800324c:	053e2d63 	.word	0x053e2d63
 8003250:	cb840000 	.word	0xcb840000
 8003254:	80000001 	.word	0x80000001

08003258 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff f9e9 	bl	800263c <LL_ADC_IsEnabled>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d14d      	bne.n	800330c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	4b28      	ldr	r3, [pc, #160]	; (8003318 <ADC_Enable+0xc0>)
 8003278:	4013      	ands	r3, r2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00d      	beq.n	800329a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003282:	f043 0210 	orr.w	r2, r3, #16
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328e:	f043 0201 	orr.w	r2, r3, #1
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e039      	b.n	800330e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff f9b8 	bl	8002614 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80032a4:	f7ff f844 	bl	8002330 <HAL_GetTick>
 80032a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032aa:	e028      	b.n	80032fe <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff f9c3 	bl	800263c <LL_ADC_IsEnabled>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d104      	bne.n	80032c6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff f9a7 	bl	8002614 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032c6:	f7ff f833 	bl	8002330 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d914      	bls.n	80032fe <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d00d      	beq.n	80032fe <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e6:	f043 0210 	orr.w	r2, r3, #16
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f2:	f043 0201 	orr.w	r2, r3, #1
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e007      	b.n	800330e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b01      	cmp	r3, #1
 800330a:	d1cf      	bne.n	80032ac <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	8000003f 	.word	0x8000003f

0800331c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003328:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003332:	2b00      	cmp	r3, #0
 8003334:	d14b      	bne.n	80033ce <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0308 	and.w	r3, r3, #8
 800334c:	2b00      	cmp	r3, #0
 800334e:	d021      	beq.n	8003394 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f7ff f880 	bl	800245a <LL_ADC_REG_IsTriggerSourceSWStart>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d032      	beq.n	80033c6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d12b      	bne.n	80033c6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003372:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800337e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d11f      	bne.n	80033c6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800338a:	f043 0201 	orr.w	r2, r3, #1
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	655a      	str	r2, [r3, #84]	; 0x54
 8003392:	e018      	b.n	80033c6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d111      	bne.n	80033c6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d105      	bne.n	80033c6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033be:	f043 0201 	orr.w	r2, r3, #1
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f7fe f90e 	bl	80015e8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80033cc:	e00e      	b.n	80033ec <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d2:	f003 0310 	and.w	r3, r3, #16
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f7ff fb52 	bl	8002a84 <HAL_ADC_ErrorCallback>
}
 80033e0:	e004      	b.n	80033ec <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	4798      	blx	r3
}
 80033ec:	bf00      	nop
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f7ff fb34 	bl	8002a70 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003408:	bf00      	nop
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003422:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342e:	f043 0204 	orr.w	r2, r3, #4
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f7ff fb24 	bl	8002a84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800343c:	bf00      	nop
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003454:	4b0c      	ldr	r3, [pc, #48]	; (8003488 <__NVIC_SetPriorityGrouping+0x44>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003460:	4013      	ands	r3, r2
 8003462:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800346c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003474:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003476:	4a04      	ldr	r2, [pc, #16]	; (8003488 <__NVIC_SetPriorityGrouping+0x44>)
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	60d3      	str	r3, [r2, #12]
}
 800347c:	bf00      	nop
 800347e:	3714      	adds	r7, #20
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	e000ed00 	.word	0xe000ed00

0800348c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003490:	4b04      	ldr	r3, [pc, #16]	; (80034a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	0a1b      	lsrs	r3, r3, #8
 8003496:	f003 0307 	and.w	r3, r3, #7
}
 800349a:	4618      	mov	r0, r3
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	e000ed00 	.word	0xe000ed00

080034a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	db0b      	blt.n	80034d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ba:	79fb      	ldrb	r3, [r7, #7]
 80034bc:	f003 021f 	and.w	r2, r3, #31
 80034c0:	4907      	ldr	r1, [pc, #28]	; (80034e0 <__NVIC_EnableIRQ+0x38>)
 80034c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c6:	095b      	lsrs	r3, r3, #5
 80034c8:	2001      	movs	r0, #1
 80034ca:	fa00 f202 	lsl.w	r2, r0, r2
 80034ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	e000e100 	.word	0xe000e100

080034e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	4603      	mov	r3, r0
 80034ec:	6039      	str	r1, [r7, #0]
 80034ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	db0a      	blt.n	800350e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	b2da      	uxtb	r2, r3
 80034fc:	490c      	ldr	r1, [pc, #48]	; (8003530 <__NVIC_SetPriority+0x4c>)
 80034fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003502:	0112      	lsls	r2, r2, #4
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	440b      	add	r3, r1
 8003508:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800350c:	e00a      	b.n	8003524 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	b2da      	uxtb	r2, r3
 8003512:	4908      	ldr	r1, [pc, #32]	; (8003534 <__NVIC_SetPriority+0x50>)
 8003514:	79fb      	ldrb	r3, [r7, #7]
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	3b04      	subs	r3, #4
 800351c:	0112      	lsls	r2, r2, #4
 800351e:	b2d2      	uxtb	r2, r2
 8003520:	440b      	add	r3, r1
 8003522:	761a      	strb	r2, [r3, #24]
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	e000e100 	.word	0xe000e100
 8003534:	e000ed00 	.word	0xe000ed00

08003538 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003538:	b480      	push	{r7}
 800353a:	b089      	sub	sp, #36	; 0x24
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	f1c3 0307 	rsb	r3, r3, #7
 8003552:	2b04      	cmp	r3, #4
 8003554:	bf28      	it	cs
 8003556:	2304      	movcs	r3, #4
 8003558:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	3304      	adds	r3, #4
 800355e:	2b06      	cmp	r3, #6
 8003560:	d902      	bls.n	8003568 <NVIC_EncodePriority+0x30>
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	3b03      	subs	r3, #3
 8003566:	e000      	b.n	800356a <NVIC_EncodePriority+0x32>
 8003568:	2300      	movs	r3, #0
 800356a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800356c:	f04f 32ff 	mov.w	r2, #4294967295
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	43da      	mvns	r2, r3
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	401a      	ands	r2, r3
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003580:	f04f 31ff 	mov.w	r1, #4294967295
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	fa01 f303 	lsl.w	r3, r1, r3
 800358a:	43d9      	mvns	r1, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003590:	4313      	orrs	r3, r2
         );
}
 8003592:	4618      	mov	r0, r3
 8003594:	3724      	adds	r7, #36	; 0x24
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
	...

080035a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	3b01      	subs	r3, #1
 80035ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035b0:	d301      	bcc.n	80035b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035b2:	2301      	movs	r3, #1
 80035b4:	e00f      	b.n	80035d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035b6:	4a0a      	ldr	r2, [pc, #40]	; (80035e0 <SysTick_Config+0x40>)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	3b01      	subs	r3, #1
 80035bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035be:	210f      	movs	r1, #15
 80035c0:	f04f 30ff 	mov.w	r0, #4294967295
 80035c4:	f7ff ff8e 	bl	80034e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035c8:	4b05      	ldr	r3, [pc, #20]	; (80035e0 <SysTick_Config+0x40>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035ce:	4b04      	ldr	r3, [pc, #16]	; (80035e0 <SysTick_Config+0x40>)
 80035d0:	2207      	movs	r2, #7
 80035d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	e000e010 	.word	0xe000e010

080035e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f7ff ff29 	bl	8003444 <__NVIC_SetPriorityGrouping>
}
 80035f2:	bf00      	nop
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b086      	sub	sp, #24
 80035fe:	af00      	add	r7, sp, #0
 8003600:	4603      	mov	r3, r0
 8003602:	60b9      	str	r1, [r7, #8]
 8003604:	607a      	str	r2, [r7, #4]
 8003606:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003608:	2300      	movs	r3, #0
 800360a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800360c:	f7ff ff3e 	bl	800348c <__NVIC_GetPriorityGrouping>
 8003610:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	68b9      	ldr	r1, [r7, #8]
 8003616:	6978      	ldr	r0, [r7, #20]
 8003618:	f7ff ff8e 	bl	8003538 <NVIC_EncodePriority>
 800361c:	4602      	mov	r2, r0
 800361e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003622:	4611      	mov	r1, r2
 8003624:	4618      	mov	r0, r3
 8003626:	f7ff ff5d 	bl	80034e4 <__NVIC_SetPriority>
}
 800362a:	bf00      	nop
 800362c:	3718      	adds	r7, #24
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003632:	b580      	push	{r7, lr}
 8003634:	b082      	sub	sp, #8
 8003636:	af00      	add	r7, sp, #0
 8003638:	4603      	mov	r3, r0
 800363a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800363c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff ff31 	bl	80034a8 <__NVIC_EnableIRQ>
}
 8003646:	bf00      	nop
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b082      	sub	sp, #8
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7ff ffa2 	bl	80035a0 <SysTick_Config>
 800365c:	4603      	mov	r3, r0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
	...

08003668 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e098      	b.n	80037ac <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	461a      	mov	r2, r3
 8003680:	4b4d      	ldr	r3, [pc, #308]	; (80037b8 <HAL_DMA_Init+0x150>)
 8003682:	429a      	cmp	r2, r3
 8003684:	d80f      	bhi.n	80036a6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	461a      	mov	r2, r3
 800368c:	4b4b      	ldr	r3, [pc, #300]	; (80037bc <HAL_DMA_Init+0x154>)
 800368e:	4413      	add	r3, r2
 8003690:	4a4b      	ldr	r2, [pc, #300]	; (80037c0 <HAL_DMA_Init+0x158>)
 8003692:	fba2 2303 	umull	r2, r3, r2, r3
 8003696:	091b      	lsrs	r3, r3, #4
 8003698:	009a      	lsls	r2, r3, #2
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a48      	ldr	r2, [pc, #288]	; (80037c4 <HAL_DMA_Init+0x15c>)
 80036a2:	641a      	str	r2, [r3, #64]	; 0x40
 80036a4:	e00e      	b.n	80036c4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	461a      	mov	r2, r3
 80036ac:	4b46      	ldr	r3, [pc, #280]	; (80037c8 <HAL_DMA_Init+0x160>)
 80036ae:	4413      	add	r3, r2
 80036b0:	4a43      	ldr	r2, [pc, #268]	; (80037c0 <HAL_DMA_Init+0x158>)
 80036b2:	fba2 2303 	umull	r2, r3, r2, r3
 80036b6:	091b      	lsrs	r3, r3, #4
 80036b8:	009a      	lsls	r2, r3, #2
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a42      	ldr	r2, [pc, #264]	; (80037cc <HAL_DMA_Init+0x164>)
 80036c2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80036da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80036e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003700:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	4313      	orrs	r3, r2
 800370c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800371e:	d039      	beq.n	8003794 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003724:	4a27      	ldr	r2, [pc, #156]	; (80037c4 <HAL_DMA_Init+0x15c>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d11a      	bne.n	8003760 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800372a:	4b29      	ldr	r3, [pc, #164]	; (80037d0 <HAL_DMA_Init+0x168>)
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003732:	f003 031c 	and.w	r3, r3, #28
 8003736:	210f      	movs	r1, #15
 8003738:	fa01 f303 	lsl.w	r3, r1, r3
 800373c:	43db      	mvns	r3, r3
 800373e:	4924      	ldr	r1, [pc, #144]	; (80037d0 <HAL_DMA_Init+0x168>)
 8003740:	4013      	ands	r3, r2
 8003742:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003744:	4b22      	ldr	r3, [pc, #136]	; (80037d0 <HAL_DMA_Init+0x168>)
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6859      	ldr	r1, [r3, #4]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003750:	f003 031c 	and.w	r3, r3, #28
 8003754:	fa01 f303 	lsl.w	r3, r1, r3
 8003758:	491d      	ldr	r1, [pc, #116]	; (80037d0 <HAL_DMA_Init+0x168>)
 800375a:	4313      	orrs	r3, r2
 800375c:	600b      	str	r3, [r1, #0]
 800375e:	e019      	b.n	8003794 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003760:	4b1c      	ldr	r3, [pc, #112]	; (80037d4 <HAL_DMA_Init+0x16c>)
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003768:	f003 031c 	and.w	r3, r3, #28
 800376c:	210f      	movs	r1, #15
 800376e:	fa01 f303 	lsl.w	r3, r1, r3
 8003772:	43db      	mvns	r3, r3
 8003774:	4917      	ldr	r1, [pc, #92]	; (80037d4 <HAL_DMA_Init+0x16c>)
 8003776:	4013      	ands	r3, r2
 8003778:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800377a:	4b16      	ldr	r3, [pc, #88]	; (80037d4 <HAL_DMA_Init+0x16c>)
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6859      	ldr	r1, [r3, #4]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003786:	f003 031c 	and.w	r3, r3, #28
 800378a:	fa01 f303 	lsl.w	r3, r1, r3
 800378e:	4911      	ldr	r1, [pc, #68]	; (80037d4 <HAL_DMA_Init+0x16c>)
 8003790:	4313      	orrs	r3, r2
 8003792:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3714      	adds	r7, #20
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	40020407 	.word	0x40020407
 80037bc:	bffdfff8 	.word	0xbffdfff8
 80037c0:	cccccccd 	.word	0xcccccccd
 80037c4:	40020000 	.word	0x40020000
 80037c8:	bffdfbf8 	.word	0xbffdfbf8
 80037cc:	40020400 	.word	0x40020400
 80037d0:	400200a8 	.word	0x400200a8
 80037d4:	400204a8 	.word	0x400204a8

080037d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
 80037e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037e6:	2300      	movs	r3, #0
 80037e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <HAL_DMA_Start_IT+0x20>
 80037f4:	2302      	movs	r3, #2
 80037f6:	e04b      	b.n	8003890 <HAL_DMA_Start_IT+0xb8>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b01      	cmp	r3, #1
 800380a:	d13a      	bne.n	8003882 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2202      	movs	r2, #2
 8003810:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0201 	bic.w	r2, r2, #1
 8003828:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	68b9      	ldr	r1, [r7, #8]
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 f8e0 	bl	80039f6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383a:	2b00      	cmp	r3, #0
 800383c:	d008      	beq.n	8003850 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f042 020e 	orr.w	r2, r2, #14
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	e00f      	b.n	8003870 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0204 	bic.w	r2, r2, #4
 800385e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f042 020a 	orr.w	r2, r2, #10
 800386e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0201 	orr.w	r2, r2, #1
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	e005      	b.n	800388e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800388a:	2302      	movs	r3, #2
 800388c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800388e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3718      	adds	r7, #24
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b4:	f003 031c 	and.w	r3, r3, #28
 80038b8:	2204      	movs	r2, #4
 80038ba:	409a      	lsls	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4013      	ands	r3, r2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d026      	beq.n	8003912 <HAL_DMA_IRQHandler+0x7a>
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f003 0304 	and.w	r3, r3, #4
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d021      	beq.n	8003912 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0320 	and.w	r3, r3, #32
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d107      	bne.n	80038ec <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0204 	bic.w	r2, r2, #4
 80038ea:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f0:	f003 021c 	and.w	r2, r3, #28
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f8:	2104      	movs	r1, #4
 80038fa:	fa01 f202 	lsl.w	r2, r1, r2
 80038fe:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003904:	2b00      	cmp	r3, #0
 8003906:	d071      	beq.n	80039ec <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003910:	e06c      	b.n	80039ec <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003916:	f003 031c 	and.w	r3, r3, #28
 800391a:	2202      	movs	r2, #2
 800391c:	409a      	lsls	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	4013      	ands	r3, r2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d02e      	beq.n	8003984 <HAL_DMA_IRQHandler+0xec>
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d029      	beq.n	8003984 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0320 	and.w	r3, r3, #32
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10b      	bne.n	8003956 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f022 020a 	bic.w	r2, r2, #10
 800394c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395a:	f003 021c 	and.w	r2, r3, #28
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	2102      	movs	r1, #2
 8003964:	fa01 f202 	lsl.w	r2, r1, r2
 8003968:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003976:	2b00      	cmp	r3, #0
 8003978:	d038      	beq.n	80039ec <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003982:	e033      	b.n	80039ec <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003988:	f003 031c 	and.w	r3, r3, #28
 800398c:	2208      	movs	r2, #8
 800398e:	409a      	lsls	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4013      	ands	r3, r2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d02a      	beq.n	80039ee <HAL_DMA_IRQHandler+0x156>
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d025      	beq.n	80039ee <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 020e 	bic.w	r2, r2, #14
 80039b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b6:	f003 021c 	and.w	r2, r3, #28
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	2101      	movs	r1, #1
 80039c0:	fa01 f202 	lsl.w	r2, r1, r2
 80039c4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d004      	beq.n	80039ee <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80039ec:	bf00      	nop
 80039ee:	bf00      	nop
}
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b085      	sub	sp, #20
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	60f8      	str	r0, [r7, #12]
 80039fe:	60b9      	str	r1, [r7, #8]
 8003a00:	607a      	str	r2, [r7, #4]
 8003a02:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a08:	f003 021c 	and.w	r2, r3, #28
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a10:	2101      	movs	r1, #1
 8003a12:	fa01 f202 	lsl.w	r2, r1, r2
 8003a16:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	2b10      	cmp	r3, #16
 8003a26:	d108      	bne.n	8003a3a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68ba      	ldr	r2, [r7, #8]
 8003a36:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a38:	e007      	b.n	8003a4a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68ba      	ldr	r2, [r7, #8]
 8003a40:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	60da      	str	r2, [r3, #12]
}
 8003a4a:	bf00      	nop
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
	...

08003a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b087      	sub	sp, #28
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a62:	2300      	movs	r3, #0
 8003a64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a66:	e148      	b.n	8003cfa <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	fa01 f303 	lsl.w	r3, r1, r3
 8003a74:	4013      	ands	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 813a 	beq.w	8003cf4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d00b      	beq.n	8003aa0 <HAL_GPIO_Init+0x48>
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d007      	beq.n	8003aa0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a94:	2b11      	cmp	r3, #17
 8003a96:	d003      	beq.n	8003aa0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2b12      	cmp	r3, #18
 8003a9e:	d130      	bne.n	8003b02 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	2203      	movs	r2, #3
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	68da      	ldr	r2, [r3, #12]
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	fa02 f303 	lsl.w	r3, r2, r3
 8003ade:	43db      	mvns	r3, r3
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	091b      	lsrs	r3, r3, #4
 8003aec:	f003 0201 	and.w	r2, r3, #1
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	fa02 f303 	lsl.w	r3, r2, r3
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	2203      	movs	r2, #3
 8003b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b12:	43db      	mvns	r3, r3
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4013      	ands	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d003      	beq.n	8003b42 <HAL_GPIO_Init+0xea>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2b12      	cmp	r3, #18
 8003b40:	d123      	bne.n	8003b8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	08da      	lsrs	r2, r3, #3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	3208      	adds	r2, #8
 8003b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f003 0307 	and.w	r3, r3, #7
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	220f      	movs	r2, #15
 8003b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5e:	43db      	mvns	r3, r3
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	4013      	ands	r3, r2
 8003b64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	691a      	ldr	r2, [r3, #16]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	fa02 f303 	lsl.w	r3, r2, r3
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	08da      	lsrs	r2, r3, #3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3208      	adds	r2, #8
 8003b84:	6939      	ldr	r1, [r7, #16]
 8003b86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	2203      	movs	r2, #3
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	43db      	mvns	r3, r3
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f003 0203 	and.w	r2, r3, #3
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f000 8094 	beq.w	8003cf4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bcc:	4b52      	ldr	r3, [pc, #328]	; (8003d18 <HAL_GPIO_Init+0x2c0>)
 8003bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bd0:	4a51      	ldr	r2, [pc, #324]	; (8003d18 <HAL_GPIO_Init+0x2c0>)
 8003bd2:	f043 0301 	orr.w	r3, r3, #1
 8003bd6:	6613      	str	r3, [r2, #96]	; 0x60
 8003bd8:	4b4f      	ldr	r3, [pc, #316]	; (8003d18 <HAL_GPIO_Init+0x2c0>)
 8003bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	60bb      	str	r3, [r7, #8]
 8003be2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003be4:	4a4d      	ldr	r2, [pc, #308]	; (8003d1c <HAL_GPIO_Init+0x2c4>)
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	089b      	lsrs	r3, r3, #2
 8003bea:	3302      	adds	r3, #2
 8003bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f003 0303 	and.w	r3, r3, #3
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	220f      	movs	r2, #15
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	43db      	mvns	r3, r3
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	4013      	ands	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003c0e:	d00d      	beq.n	8003c2c <HAL_GPIO_Init+0x1d4>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a43      	ldr	r2, [pc, #268]	; (8003d20 <HAL_GPIO_Init+0x2c8>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d007      	beq.n	8003c28 <HAL_GPIO_Init+0x1d0>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a42      	ldr	r2, [pc, #264]	; (8003d24 <HAL_GPIO_Init+0x2cc>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d101      	bne.n	8003c24 <HAL_GPIO_Init+0x1cc>
 8003c20:	2302      	movs	r3, #2
 8003c22:	e004      	b.n	8003c2e <HAL_GPIO_Init+0x1d6>
 8003c24:	2307      	movs	r3, #7
 8003c26:	e002      	b.n	8003c2e <HAL_GPIO_Init+0x1d6>
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e000      	b.n	8003c2e <HAL_GPIO_Init+0x1d6>
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	f002 0203 	and.w	r2, r2, #3
 8003c34:	0092      	lsls	r2, r2, #2
 8003c36:	4093      	lsls	r3, r2
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c3e:	4937      	ldr	r1, [pc, #220]	; (8003d1c <HAL_GPIO_Init+0x2c4>)
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	089b      	lsrs	r3, r3, #2
 8003c44:	3302      	adds	r3, #2
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003c4c:	4b36      	ldr	r3, [pc, #216]	; (8003d28 <HAL_GPIO_Init+0x2d0>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	43db      	mvns	r3, r3
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	4013      	ands	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d003      	beq.n	8003c70 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c70:	4a2d      	ldr	r2, [pc, #180]	; (8003d28 <HAL_GPIO_Init+0x2d0>)
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003c76:	4b2c      	ldr	r3, [pc, #176]	; (8003d28 <HAL_GPIO_Init+0x2d0>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	43db      	mvns	r3, r3
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	4013      	ands	r3, r2
 8003c84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c9a:	4a23      	ldr	r2, [pc, #140]	; (8003d28 <HAL_GPIO_Init+0x2d0>)
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ca0:	4b21      	ldr	r3, [pc, #132]	; (8003d28 <HAL_GPIO_Init+0x2d0>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	43db      	mvns	r3, r3
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	4013      	ands	r3, r2
 8003cae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003cc4:	4a18      	ldr	r2, [pc, #96]	; (8003d28 <HAL_GPIO_Init+0x2d0>)
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003cca:	4b17      	ldr	r3, [pc, #92]	; (8003d28 <HAL_GPIO_Init+0x2d0>)
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	43db      	mvns	r3, r3
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003cee:	4a0e      	ldr	r2, [pc, #56]	; (8003d28 <HAL_GPIO_Init+0x2d0>)
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	fa22 f303 	lsr.w	r3, r2, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f47f aeaf 	bne.w	8003a68 <HAL_GPIO_Init+0x10>
  }
}
 8003d0a:	bf00      	nop
 8003d0c:	bf00      	nop
 8003d0e:	371c      	adds	r7, #28
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	40010000 	.word	0x40010000
 8003d20:	48000400 	.word	0x48000400
 8003d24:	48000800 	.word	0x48000800
 8003d28:	40010400 	.word	0x40010400

08003d2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	460b      	mov	r3, r1
 8003d36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691a      	ldr	r2, [r3, #16]
 8003d3c:	887b      	ldrh	r3, [r7, #2]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d002      	beq.n	8003d4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d44:	2301      	movs	r3, #1
 8003d46:	73fb      	strb	r3, [r7, #15]
 8003d48:	e001      	b.n	8003d4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3714      	adds	r7, #20
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	460b      	mov	r3, r1
 8003d66:	807b      	strh	r3, [r7, #2]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d6c:	787b      	ldrb	r3, [r7, #1]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d72:	887a      	ldrh	r2, [r7, #2]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d78:	e002      	b.n	8003d80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d7a:	887a      	ldrh	r2, [r7, #2]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d90:	4b05      	ldr	r3, [pc, #20]	; (8003da8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a04      	ldr	r2, [pc, #16]	; (8003da8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d9a:	6013      	str	r3, [r2, #0]
}
 8003d9c:	bf00      	nop
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	40007000 	.word	0x40007000

08003dac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003db0:	4b04      	ldr	r3, [pc, #16]	; (8003dc4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	40007000 	.word	0x40007000

08003dc8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dd6:	d130      	bne.n	8003e3a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dd8:	4b23      	ldr	r3, [pc, #140]	; (8003e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003de0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003de4:	d038      	beq.n	8003e58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003de6:	4b20      	ldr	r3, [pc, #128]	; (8003e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003dee:	4a1e      	ldr	r2, [pc, #120]	; (8003e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003df0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003df4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003df6:	4b1d      	ldr	r3, [pc, #116]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2232      	movs	r2, #50	; 0x32
 8003dfc:	fb02 f303 	mul.w	r3, r2, r3
 8003e00:	4a1b      	ldr	r2, [pc, #108]	; (8003e70 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003e02:	fba2 2303 	umull	r2, r3, r2, r3
 8003e06:	0c9b      	lsrs	r3, r3, #18
 8003e08:	3301      	adds	r3, #1
 8003e0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e0c:	e002      	b.n	8003e14 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	3b01      	subs	r3, #1
 8003e12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e14:	4b14      	ldr	r3, [pc, #80]	; (8003e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e20:	d102      	bne.n	8003e28 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1f2      	bne.n	8003e0e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e28:	4b0f      	ldr	r3, [pc, #60]	; (8003e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e34:	d110      	bne.n	8003e58 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e00f      	b.n	8003e5a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e3a:	4b0b      	ldr	r3, [pc, #44]	; (8003e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e46:	d007      	beq.n	8003e58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e48:	4b07      	ldr	r3, [pc, #28]	; (8003e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e50:	4a05      	ldr	r2, [pc, #20]	; (8003e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e56:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3714      	adds	r7, #20
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	40007000 	.word	0x40007000
 8003e6c:	20000004 	.word	0x20000004
 8003e70:	431bde83 	.word	0x431bde83

08003e74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b088      	sub	sp, #32
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d102      	bne.n	8003e88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	f000 bc11 	b.w	80046aa <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e88:	4ba0      	ldr	r3, [pc, #640]	; (800410c <HAL_RCC_OscConfig+0x298>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 030c 	and.w	r3, r3, #12
 8003e90:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e92:	4b9e      	ldr	r3, [pc, #632]	; (800410c <HAL_RCC_OscConfig+0x298>)
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f003 0303 	and.w	r3, r3, #3
 8003e9a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0310 	and.w	r3, r3, #16
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 80e4 	beq.w	8004072 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d007      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x4c>
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	2b0c      	cmp	r3, #12
 8003eb4:	f040 808b 	bne.w	8003fce <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	f040 8087 	bne.w	8003fce <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ec0:	4b92      	ldr	r3, [pc, #584]	; (800410c <HAL_RCC_OscConfig+0x298>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d005      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x64>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e3e8      	b.n	80046aa <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a1a      	ldr	r2, [r3, #32]
 8003edc:	4b8b      	ldr	r3, [pc, #556]	; (800410c <HAL_RCC_OscConfig+0x298>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0308 	and.w	r3, r3, #8
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d004      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x7e>
 8003ee8:	4b88      	ldr	r3, [pc, #544]	; (800410c <HAL_RCC_OscConfig+0x298>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ef0:	e005      	b.n	8003efe <HAL_RCC_OscConfig+0x8a>
 8003ef2:	4b86      	ldr	r3, [pc, #536]	; (800410c <HAL_RCC_OscConfig+0x298>)
 8003ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ef8:	091b      	lsrs	r3, r3, #4
 8003efa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d223      	bcs.n	8003f4a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f000 fd7a 	bl	8004a00 <RCC_SetFlashLatencyFromMSIRange>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e3c9      	b.n	80046aa <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f16:	4b7d      	ldr	r3, [pc, #500]	; (800410c <HAL_RCC_OscConfig+0x298>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a7c      	ldr	r2, [pc, #496]	; (800410c <HAL_RCC_OscConfig+0x298>)
 8003f1c:	f043 0308 	orr.w	r3, r3, #8
 8003f20:	6013      	str	r3, [r2, #0]
 8003f22:	4b7a      	ldr	r3, [pc, #488]	; (800410c <HAL_RCC_OscConfig+0x298>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	4977      	ldr	r1, [pc, #476]	; (800410c <HAL_RCC_OscConfig+0x298>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f34:	4b75      	ldr	r3, [pc, #468]	; (800410c <HAL_RCC_OscConfig+0x298>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	021b      	lsls	r3, r3, #8
 8003f42:	4972      	ldr	r1, [pc, #456]	; (800410c <HAL_RCC_OscConfig+0x298>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	604b      	str	r3, [r1, #4]
 8003f48:	e025      	b.n	8003f96 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f4a:	4b70      	ldr	r3, [pc, #448]	; (800410c <HAL_RCC_OscConfig+0x298>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a6f      	ldr	r2, [pc, #444]	; (800410c <HAL_RCC_OscConfig+0x298>)
 8003f50:	f043 0308 	orr.w	r3, r3, #8
 8003f54:	6013      	str	r3, [r2, #0]
 8003f56:	4b6d      	ldr	r3, [pc, #436]	; (800410c <HAL_RCC_OscConfig+0x298>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	496a      	ldr	r1, [pc, #424]	; (800410c <HAL_RCC_OscConfig+0x298>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f68:	4b68      	ldr	r3, [pc, #416]	; (800410c <HAL_RCC_OscConfig+0x298>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	69db      	ldr	r3, [r3, #28]
 8003f74:	021b      	lsls	r3, r3, #8
 8003f76:	4965      	ldr	r1, [pc, #404]	; (800410c <HAL_RCC_OscConfig+0x298>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d109      	bne.n	8003f96 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 fd3a 	bl	8004a00 <RCC_SetFlashLatencyFromMSIRange>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e389      	b.n	80046aa <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f96:	f000 fc6f 	bl	8004878 <HAL_RCC_GetSysClockFreq>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	4b5b      	ldr	r3, [pc, #364]	; (800410c <HAL_RCC_OscConfig+0x298>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	091b      	lsrs	r3, r3, #4
 8003fa2:	f003 030f 	and.w	r3, r3, #15
 8003fa6:	495a      	ldr	r1, [pc, #360]	; (8004110 <HAL_RCC_OscConfig+0x29c>)
 8003fa8:	5ccb      	ldrb	r3, [r1, r3]
 8003faa:	f003 031f 	and.w	r3, r3, #31
 8003fae:	fa22 f303 	lsr.w	r3, r2, r3
 8003fb2:	4a58      	ldr	r2, [pc, #352]	; (8004114 <HAL_RCC_OscConfig+0x2a0>)
 8003fb4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003fb6:	4b58      	ldr	r3, [pc, #352]	; (8004118 <HAL_RCC_OscConfig+0x2a4>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7fe f968 	bl	8002290 <HAL_InitTick>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003fc4:	7bfb      	ldrb	r3, [r7, #15]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d052      	beq.n	8004070 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003fca:	7bfb      	ldrb	r3, [r7, #15]
 8003fcc:	e36d      	b.n	80046aa <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d032      	beq.n	800403c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003fd6:	4b4d      	ldr	r3, [pc, #308]	; (800410c <HAL_RCC_OscConfig+0x298>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a4c      	ldr	r2, [pc, #304]	; (800410c <HAL_RCC_OscConfig+0x298>)
 8003fdc:	f043 0301 	orr.w	r3, r3, #1
 8003fe0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fe2:	f7fe f9a5 	bl	8002330 <HAL_GetTick>
 8003fe6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fe8:	e008      	b.n	8003ffc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fea:	f7fe f9a1 	bl	8002330 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e356      	b.n	80046aa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ffc:	4b43      	ldr	r3, [pc, #268]	; (800410c <HAL_RCC_OscConfig+0x298>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d0f0      	beq.n	8003fea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004008:	4b40      	ldr	r3, [pc, #256]	; (800410c <HAL_RCC_OscConfig+0x298>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a3f      	ldr	r2, [pc, #252]	; (800410c <HAL_RCC_OscConfig+0x298>)
 800400e:	f043 0308 	orr.w	r3, r3, #8
 8004012:	6013      	str	r3, [r2, #0]
 8004014:	4b3d      	ldr	r3, [pc, #244]	; (800410c <HAL_RCC_OscConfig+0x298>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a1b      	ldr	r3, [r3, #32]
 8004020:	493a      	ldr	r1, [pc, #232]	; (800410c <HAL_RCC_OscConfig+0x298>)
 8004022:	4313      	orrs	r3, r2
 8004024:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004026:	4b39      	ldr	r3, [pc, #228]	; (800410c <HAL_RCC_OscConfig+0x298>)
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	021b      	lsls	r3, r3, #8
 8004034:	4935      	ldr	r1, [pc, #212]	; (800410c <HAL_RCC_OscConfig+0x298>)
 8004036:	4313      	orrs	r3, r2
 8004038:	604b      	str	r3, [r1, #4]
 800403a:	e01a      	b.n	8004072 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800403c:	4b33      	ldr	r3, [pc, #204]	; (800410c <HAL_RCC_OscConfig+0x298>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a32      	ldr	r2, [pc, #200]	; (800410c <HAL_RCC_OscConfig+0x298>)
 8004042:	f023 0301 	bic.w	r3, r3, #1
 8004046:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004048:	f7fe f972 	bl	8002330 <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004050:	f7fe f96e 	bl	8002330 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e323      	b.n	80046aa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004062:	4b2a      	ldr	r3, [pc, #168]	; (800410c <HAL_RCC_OscConfig+0x298>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1f0      	bne.n	8004050 <HAL_RCC_OscConfig+0x1dc>
 800406e:	e000      	b.n	8004072 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004070:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b00      	cmp	r3, #0
 800407c:	d073      	beq.n	8004166 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	2b08      	cmp	r3, #8
 8004082:	d005      	beq.n	8004090 <HAL_RCC_OscConfig+0x21c>
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	2b0c      	cmp	r3, #12
 8004088:	d10e      	bne.n	80040a8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	2b03      	cmp	r3, #3
 800408e:	d10b      	bne.n	80040a8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004090:	4b1e      	ldr	r3, [pc, #120]	; (800410c <HAL_RCC_OscConfig+0x298>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d063      	beq.n	8004164 <HAL_RCC_OscConfig+0x2f0>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d15f      	bne.n	8004164 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e300      	b.n	80046aa <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b0:	d106      	bne.n	80040c0 <HAL_RCC_OscConfig+0x24c>
 80040b2:	4b16      	ldr	r3, [pc, #88]	; (800410c <HAL_RCC_OscConfig+0x298>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a15      	ldr	r2, [pc, #84]	; (800410c <HAL_RCC_OscConfig+0x298>)
 80040b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040bc:	6013      	str	r3, [r2, #0]
 80040be:	e01d      	b.n	80040fc <HAL_RCC_OscConfig+0x288>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040c8:	d10c      	bne.n	80040e4 <HAL_RCC_OscConfig+0x270>
 80040ca:	4b10      	ldr	r3, [pc, #64]	; (800410c <HAL_RCC_OscConfig+0x298>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a0f      	ldr	r2, [pc, #60]	; (800410c <HAL_RCC_OscConfig+0x298>)
 80040d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	4b0d      	ldr	r3, [pc, #52]	; (800410c <HAL_RCC_OscConfig+0x298>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a0c      	ldr	r2, [pc, #48]	; (800410c <HAL_RCC_OscConfig+0x298>)
 80040dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040e0:	6013      	str	r3, [r2, #0]
 80040e2:	e00b      	b.n	80040fc <HAL_RCC_OscConfig+0x288>
 80040e4:	4b09      	ldr	r3, [pc, #36]	; (800410c <HAL_RCC_OscConfig+0x298>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a08      	ldr	r2, [pc, #32]	; (800410c <HAL_RCC_OscConfig+0x298>)
 80040ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ee:	6013      	str	r3, [r2, #0]
 80040f0:	4b06      	ldr	r3, [pc, #24]	; (800410c <HAL_RCC_OscConfig+0x298>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a05      	ldr	r2, [pc, #20]	; (800410c <HAL_RCC_OscConfig+0x298>)
 80040f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d01b      	beq.n	800413c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004104:	f7fe f914 	bl	8002330 <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800410a:	e010      	b.n	800412e <HAL_RCC_OscConfig+0x2ba>
 800410c:	40021000 	.word	0x40021000
 8004110:	080071a0 	.word	0x080071a0
 8004114:	20000004 	.word	0x20000004
 8004118:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800411c:	f7fe f908 	bl	8002330 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b64      	cmp	r3, #100	; 0x64
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e2bd      	b.n	80046aa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800412e:	4baf      	ldr	r3, [pc, #700]	; (80043ec <HAL_RCC_OscConfig+0x578>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d0f0      	beq.n	800411c <HAL_RCC_OscConfig+0x2a8>
 800413a:	e014      	b.n	8004166 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413c:	f7fe f8f8 	bl	8002330 <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004144:	f7fe f8f4 	bl	8002330 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b64      	cmp	r3, #100	; 0x64
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e2a9      	b.n	80046aa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004156:	4ba5      	ldr	r3, [pc, #660]	; (80043ec <HAL_RCC_OscConfig+0x578>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1f0      	bne.n	8004144 <HAL_RCC_OscConfig+0x2d0>
 8004162:	e000      	b.n	8004166 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d060      	beq.n	8004234 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	2b04      	cmp	r3, #4
 8004176:	d005      	beq.n	8004184 <HAL_RCC_OscConfig+0x310>
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	2b0c      	cmp	r3, #12
 800417c:	d119      	bne.n	80041b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	2b02      	cmp	r3, #2
 8004182:	d116      	bne.n	80041b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004184:	4b99      	ldr	r3, [pc, #612]	; (80043ec <HAL_RCC_OscConfig+0x578>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800418c:	2b00      	cmp	r3, #0
 800418e:	d005      	beq.n	800419c <HAL_RCC_OscConfig+0x328>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d101      	bne.n	800419c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e286      	b.n	80046aa <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800419c:	4b93      	ldr	r3, [pc, #588]	; (80043ec <HAL_RCC_OscConfig+0x578>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	061b      	lsls	r3, r3, #24
 80041aa:	4990      	ldr	r1, [pc, #576]	; (80043ec <HAL_RCC_OscConfig+0x578>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041b0:	e040      	b.n	8004234 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d023      	beq.n	8004202 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041ba:	4b8c      	ldr	r3, [pc, #560]	; (80043ec <HAL_RCC_OscConfig+0x578>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a8b      	ldr	r2, [pc, #556]	; (80043ec <HAL_RCC_OscConfig+0x578>)
 80041c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c6:	f7fe f8b3 	bl	8002330 <HAL_GetTick>
 80041ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041cc:	e008      	b.n	80041e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ce:	f7fe f8af 	bl	8002330 <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d901      	bls.n	80041e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e264      	b.n	80046aa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041e0:	4b82      	ldr	r3, [pc, #520]	; (80043ec <HAL_RCC_OscConfig+0x578>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d0f0      	beq.n	80041ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ec:	4b7f      	ldr	r3, [pc, #508]	; (80043ec <HAL_RCC_OscConfig+0x578>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	061b      	lsls	r3, r3, #24
 80041fa:	497c      	ldr	r1, [pc, #496]	; (80043ec <HAL_RCC_OscConfig+0x578>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	604b      	str	r3, [r1, #4]
 8004200:	e018      	b.n	8004234 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004202:	4b7a      	ldr	r3, [pc, #488]	; (80043ec <HAL_RCC_OscConfig+0x578>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a79      	ldr	r2, [pc, #484]	; (80043ec <HAL_RCC_OscConfig+0x578>)
 8004208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800420c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800420e:	f7fe f88f 	bl	8002330 <HAL_GetTick>
 8004212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004214:	e008      	b.n	8004228 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004216:	f7fe f88b 	bl	8002330 <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	2b02      	cmp	r3, #2
 8004222:	d901      	bls.n	8004228 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e240      	b.n	80046aa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004228:	4b70      	ldr	r3, [pc, #448]	; (80043ec <HAL_RCC_OscConfig+0x578>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1f0      	bne.n	8004216 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0308 	and.w	r3, r3, #8
 800423c:	2b00      	cmp	r3, #0
 800423e:	d03c      	beq.n	80042ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d01c      	beq.n	8004282 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004248:	4b68      	ldr	r3, [pc, #416]	; (80043ec <HAL_RCC_OscConfig+0x578>)
 800424a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800424e:	4a67      	ldr	r2, [pc, #412]	; (80043ec <HAL_RCC_OscConfig+0x578>)
 8004250:	f043 0301 	orr.w	r3, r3, #1
 8004254:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004258:	f7fe f86a 	bl	8002330 <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004260:	f7fe f866 	bl	8002330 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e21b      	b.n	80046aa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004272:	4b5e      	ldr	r3, [pc, #376]	; (80043ec <HAL_RCC_OscConfig+0x578>)
 8004274:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d0ef      	beq.n	8004260 <HAL_RCC_OscConfig+0x3ec>
 8004280:	e01b      	b.n	80042ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004282:	4b5a      	ldr	r3, [pc, #360]	; (80043ec <HAL_RCC_OscConfig+0x578>)
 8004284:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004288:	4a58      	ldr	r2, [pc, #352]	; (80043ec <HAL_RCC_OscConfig+0x578>)
 800428a:	f023 0301 	bic.w	r3, r3, #1
 800428e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004292:	f7fe f84d 	bl	8002330 <HAL_GetTick>
 8004296:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004298:	e008      	b.n	80042ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800429a:	f7fe f849 	bl	8002330 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d901      	bls.n	80042ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e1fe      	b.n	80046aa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042ac:	4b4f      	ldr	r3, [pc, #316]	; (80043ec <HAL_RCC_OscConfig+0x578>)
 80042ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1ef      	bne.n	800429a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0304 	and.w	r3, r3, #4
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 80a6 	beq.w	8004414 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042c8:	2300      	movs	r3, #0
 80042ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80042cc:	4b47      	ldr	r3, [pc, #284]	; (80043ec <HAL_RCC_OscConfig+0x578>)
 80042ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10d      	bne.n	80042f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042d8:	4b44      	ldr	r3, [pc, #272]	; (80043ec <HAL_RCC_OscConfig+0x578>)
 80042da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042dc:	4a43      	ldr	r2, [pc, #268]	; (80043ec <HAL_RCC_OscConfig+0x578>)
 80042de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042e2:	6593      	str	r3, [r2, #88]	; 0x58
 80042e4:	4b41      	ldr	r3, [pc, #260]	; (80043ec <HAL_RCC_OscConfig+0x578>)
 80042e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ec:	60bb      	str	r3, [r7, #8]
 80042ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042f0:	2301      	movs	r3, #1
 80042f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042f4:	4b3e      	ldr	r3, [pc, #248]	; (80043f0 <HAL_RCC_OscConfig+0x57c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d118      	bne.n	8004332 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004300:	4b3b      	ldr	r3, [pc, #236]	; (80043f0 <HAL_RCC_OscConfig+0x57c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a3a      	ldr	r2, [pc, #232]	; (80043f0 <HAL_RCC_OscConfig+0x57c>)
 8004306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800430a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800430c:	f7fe f810 	bl	8002330 <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004312:	e008      	b.n	8004326 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004314:	f7fe f80c 	bl	8002330 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b02      	cmp	r3, #2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e1c1      	b.n	80046aa <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004326:	4b32      	ldr	r3, [pc, #200]	; (80043f0 <HAL_RCC_OscConfig+0x57c>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432e:	2b00      	cmp	r3, #0
 8004330:	d0f0      	beq.n	8004314 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d108      	bne.n	800434c <HAL_RCC_OscConfig+0x4d8>
 800433a:	4b2c      	ldr	r3, [pc, #176]	; (80043ec <HAL_RCC_OscConfig+0x578>)
 800433c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004340:	4a2a      	ldr	r2, [pc, #168]	; (80043ec <HAL_RCC_OscConfig+0x578>)
 8004342:	f043 0301 	orr.w	r3, r3, #1
 8004346:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800434a:	e024      	b.n	8004396 <HAL_RCC_OscConfig+0x522>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	2b05      	cmp	r3, #5
 8004352:	d110      	bne.n	8004376 <HAL_RCC_OscConfig+0x502>
 8004354:	4b25      	ldr	r3, [pc, #148]	; (80043ec <HAL_RCC_OscConfig+0x578>)
 8004356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435a:	4a24      	ldr	r2, [pc, #144]	; (80043ec <HAL_RCC_OscConfig+0x578>)
 800435c:	f043 0304 	orr.w	r3, r3, #4
 8004360:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004364:	4b21      	ldr	r3, [pc, #132]	; (80043ec <HAL_RCC_OscConfig+0x578>)
 8004366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436a:	4a20      	ldr	r2, [pc, #128]	; (80043ec <HAL_RCC_OscConfig+0x578>)
 800436c:	f043 0301 	orr.w	r3, r3, #1
 8004370:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004374:	e00f      	b.n	8004396 <HAL_RCC_OscConfig+0x522>
 8004376:	4b1d      	ldr	r3, [pc, #116]	; (80043ec <HAL_RCC_OscConfig+0x578>)
 8004378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800437c:	4a1b      	ldr	r2, [pc, #108]	; (80043ec <HAL_RCC_OscConfig+0x578>)
 800437e:	f023 0301 	bic.w	r3, r3, #1
 8004382:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004386:	4b19      	ldr	r3, [pc, #100]	; (80043ec <HAL_RCC_OscConfig+0x578>)
 8004388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438c:	4a17      	ldr	r2, [pc, #92]	; (80043ec <HAL_RCC_OscConfig+0x578>)
 800438e:	f023 0304 	bic.w	r3, r3, #4
 8004392:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d016      	beq.n	80043cc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800439e:	f7fd ffc7 	bl	8002330 <HAL_GetTick>
 80043a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043a4:	e00a      	b.n	80043bc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043a6:	f7fd ffc3 	bl	8002330 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e176      	b.n	80046aa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043bc:	4b0b      	ldr	r3, [pc, #44]	; (80043ec <HAL_RCC_OscConfig+0x578>)
 80043be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d0ed      	beq.n	80043a6 <HAL_RCC_OscConfig+0x532>
 80043ca:	e01a      	b.n	8004402 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043cc:	f7fd ffb0 	bl	8002330 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043d2:	e00f      	b.n	80043f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043d4:	f7fd ffac 	bl	8002330 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d906      	bls.n	80043f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e15f      	b.n	80046aa <HAL_RCC_OscConfig+0x836>
 80043ea:	bf00      	nop
 80043ec:	40021000 	.word	0x40021000
 80043f0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043f4:	4baa      	ldr	r3, [pc, #680]	; (80046a0 <HAL_RCC_OscConfig+0x82c>)
 80043f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1e8      	bne.n	80043d4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004402:	7ffb      	ldrb	r3, [r7, #31]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d105      	bne.n	8004414 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004408:	4ba5      	ldr	r3, [pc, #660]	; (80046a0 <HAL_RCC_OscConfig+0x82c>)
 800440a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440c:	4aa4      	ldr	r2, [pc, #656]	; (80046a0 <HAL_RCC_OscConfig+0x82c>)
 800440e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004412:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0320 	and.w	r3, r3, #32
 800441c:	2b00      	cmp	r3, #0
 800441e:	d03c      	beq.n	800449a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	2b00      	cmp	r3, #0
 8004426:	d01c      	beq.n	8004462 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004428:	4b9d      	ldr	r3, [pc, #628]	; (80046a0 <HAL_RCC_OscConfig+0x82c>)
 800442a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800442e:	4a9c      	ldr	r2, [pc, #624]	; (80046a0 <HAL_RCC_OscConfig+0x82c>)
 8004430:	f043 0301 	orr.w	r3, r3, #1
 8004434:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004438:	f7fd ff7a 	bl	8002330 <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004440:	f7fd ff76 	bl	8002330 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e12b      	b.n	80046aa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004452:	4b93      	ldr	r3, [pc, #588]	; (80046a0 <HAL_RCC_OscConfig+0x82c>)
 8004454:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d0ef      	beq.n	8004440 <HAL_RCC_OscConfig+0x5cc>
 8004460:	e01b      	b.n	800449a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004462:	4b8f      	ldr	r3, [pc, #572]	; (80046a0 <HAL_RCC_OscConfig+0x82c>)
 8004464:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004468:	4a8d      	ldr	r2, [pc, #564]	; (80046a0 <HAL_RCC_OscConfig+0x82c>)
 800446a:	f023 0301 	bic.w	r3, r3, #1
 800446e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004472:	f7fd ff5d 	bl	8002330 <HAL_GetTick>
 8004476:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004478:	e008      	b.n	800448c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800447a:	f7fd ff59 	bl	8002330 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	2b02      	cmp	r3, #2
 8004486:	d901      	bls.n	800448c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e10e      	b.n	80046aa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800448c:	4b84      	ldr	r3, [pc, #528]	; (80046a0 <HAL_RCC_OscConfig+0x82c>)
 800448e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1ef      	bne.n	800447a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f000 8102 	beq.w	80046a8 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	f040 80c5 	bne.w	8004638 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80044ae:	4b7c      	ldr	r3, [pc, #496]	; (80046a0 <HAL_RCC_OscConfig+0x82c>)
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	f003 0203 	and.w	r2, r3, #3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044be:	429a      	cmp	r2, r3
 80044c0:	d12c      	bne.n	800451c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044cc:	3b01      	subs	r3, #1
 80044ce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d123      	bne.n	800451c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044de:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d11b      	bne.n	800451c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d113      	bne.n	800451c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044fe:	085b      	lsrs	r3, r3, #1
 8004500:	3b01      	subs	r3, #1
 8004502:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004504:	429a      	cmp	r2, r3
 8004506:	d109      	bne.n	800451c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004512:	085b      	lsrs	r3, r3, #1
 8004514:	3b01      	subs	r3, #1
 8004516:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004518:	429a      	cmp	r2, r3
 800451a:	d067      	beq.n	80045ec <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	2b0c      	cmp	r3, #12
 8004520:	d062      	beq.n	80045e8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004522:	4b5f      	ldr	r3, [pc, #380]	; (80046a0 <HAL_RCC_OscConfig+0x82c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e0bb      	b.n	80046aa <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004532:	4b5b      	ldr	r3, [pc, #364]	; (80046a0 <HAL_RCC_OscConfig+0x82c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a5a      	ldr	r2, [pc, #360]	; (80046a0 <HAL_RCC_OscConfig+0x82c>)
 8004538:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800453c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800453e:	f7fd fef7 	bl	8002330 <HAL_GetTick>
 8004542:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004544:	e008      	b.n	8004558 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004546:	f7fd fef3 	bl	8002330 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d901      	bls.n	8004558 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e0a8      	b.n	80046aa <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004558:	4b51      	ldr	r3, [pc, #324]	; (80046a0 <HAL_RCC_OscConfig+0x82c>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1f0      	bne.n	8004546 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004564:	4b4e      	ldr	r3, [pc, #312]	; (80046a0 <HAL_RCC_OscConfig+0x82c>)
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	4b4e      	ldr	r3, [pc, #312]	; (80046a4 <HAL_RCC_OscConfig+0x830>)
 800456a:	4013      	ands	r3, r2
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004574:	3a01      	subs	r2, #1
 8004576:	0112      	lsls	r2, r2, #4
 8004578:	4311      	orrs	r1, r2
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800457e:	0212      	lsls	r2, r2, #8
 8004580:	4311      	orrs	r1, r2
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004586:	0852      	lsrs	r2, r2, #1
 8004588:	3a01      	subs	r2, #1
 800458a:	0552      	lsls	r2, r2, #21
 800458c:	4311      	orrs	r1, r2
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004592:	0852      	lsrs	r2, r2, #1
 8004594:	3a01      	subs	r2, #1
 8004596:	0652      	lsls	r2, r2, #25
 8004598:	4311      	orrs	r1, r2
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800459e:	06d2      	lsls	r2, r2, #27
 80045a0:	430a      	orrs	r2, r1
 80045a2:	493f      	ldr	r1, [pc, #252]	; (80046a0 <HAL_RCC_OscConfig+0x82c>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80045a8:	4b3d      	ldr	r3, [pc, #244]	; (80046a0 <HAL_RCC_OscConfig+0x82c>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a3c      	ldr	r2, [pc, #240]	; (80046a0 <HAL_RCC_OscConfig+0x82c>)
 80045ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045b4:	4b3a      	ldr	r3, [pc, #232]	; (80046a0 <HAL_RCC_OscConfig+0x82c>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	4a39      	ldr	r2, [pc, #228]	; (80046a0 <HAL_RCC_OscConfig+0x82c>)
 80045ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045c0:	f7fd feb6 	bl	8002330 <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045c8:	f7fd feb2 	bl	8002330 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e067      	b.n	80046aa <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045da:	4b31      	ldr	r3, [pc, #196]	; (80046a0 <HAL_RCC_OscConfig+0x82c>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d0f0      	beq.n	80045c8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045e6:	e05f      	b.n	80046a8 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e05e      	b.n	80046aa <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ec:	4b2c      	ldr	r3, [pc, #176]	; (80046a0 <HAL_RCC_OscConfig+0x82c>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d157      	bne.n	80046a8 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80045f8:	4b29      	ldr	r3, [pc, #164]	; (80046a0 <HAL_RCC_OscConfig+0x82c>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a28      	ldr	r2, [pc, #160]	; (80046a0 <HAL_RCC_OscConfig+0x82c>)
 80045fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004602:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004604:	4b26      	ldr	r3, [pc, #152]	; (80046a0 <HAL_RCC_OscConfig+0x82c>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	4a25      	ldr	r2, [pc, #148]	; (80046a0 <HAL_RCC_OscConfig+0x82c>)
 800460a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800460e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004610:	f7fd fe8e 	bl	8002330 <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004616:	e008      	b.n	800462a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004618:	f7fd fe8a 	bl	8002330 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e03f      	b.n	80046aa <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800462a:	4b1d      	ldr	r3, [pc, #116]	; (80046a0 <HAL_RCC_OscConfig+0x82c>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0f0      	beq.n	8004618 <HAL_RCC_OscConfig+0x7a4>
 8004636:	e037      	b.n	80046a8 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	2b0c      	cmp	r3, #12
 800463c:	d02d      	beq.n	800469a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800463e:	4b18      	ldr	r3, [pc, #96]	; (80046a0 <HAL_RCC_OscConfig+0x82c>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a17      	ldr	r2, [pc, #92]	; (80046a0 <HAL_RCC_OscConfig+0x82c>)
 8004644:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004648:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800464a:	4b15      	ldr	r3, [pc, #84]	; (80046a0 <HAL_RCC_OscConfig+0x82c>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d105      	bne.n	8004662 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004656:	4b12      	ldr	r3, [pc, #72]	; (80046a0 <HAL_RCC_OscConfig+0x82c>)
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	4a11      	ldr	r2, [pc, #68]	; (80046a0 <HAL_RCC_OscConfig+0x82c>)
 800465c:	f023 0303 	bic.w	r3, r3, #3
 8004660:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004662:	4b0f      	ldr	r3, [pc, #60]	; (80046a0 <HAL_RCC_OscConfig+0x82c>)
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	4a0e      	ldr	r2, [pc, #56]	; (80046a0 <HAL_RCC_OscConfig+0x82c>)
 8004668:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800466c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004670:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004672:	f7fd fe5d 	bl	8002330 <HAL_GetTick>
 8004676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004678:	e008      	b.n	800468c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800467a:	f7fd fe59 	bl	8002330 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e00e      	b.n	80046aa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800468c:	4b04      	ldr	r3, [pc, #16]	; (80046a0 <HAL_RCC_OscConfig+0x82c>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1f0      	bne.n	800467a <HAL_RCC_OscConfig+0x806>
 8004698:	e006      	b.n	80046a8 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e005      	b.n	80046aa <HAL_RCC_OscConfig+0x836>
 800469e:	bf00      	nop
 80046a0:	40021000 	.word	0x40021000
 80046a4:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3720      	adds	r7, #32
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop

080046b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e0c8      	b.n	800485a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046c8:	4b66      	ldr	r3, [pc, #408]	; (8004864 <HAL_RCC_ClockConfig+0x1b0>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0307 	and.w	r3, r3, #7
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d910      	bls.n	80046f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046d6:	4b63      	ldr	r3, [pc, #396]	; (8004864 <HAL_RCC_ClockConfig+0x1b0>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f023 0207 	bic.w	r2, r3, #7
 80046de:	4961      	ldr	r1, [pc, #388]	; (8004864 <HAL_RCC_ClockConfig+0x1b0>)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046e6:	4b5f      	ldr	r3, [pc, #380]	; (8004864 <HAL_RCC_ClockConfig+0x1b0>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0307 	and.w	r3, r3, #7
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d001      	beq.n	80046f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e0b0      	b.n	800485a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	2b00      	cmp	r3, #0
 8004702:	d04c      	beq.n	800479e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	2b03      	cmp	r3, #3
 800470a:	d107      	bne.n	800471c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800470c:	4b56      	ldr	r3, [pc, #344]	; (8004868 <HAL_RCC_ClockConfig+0x1b4>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d121      	bne.n	800475c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e09e      	b.n	800485a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	2b02      	cmp	r3, #2
 8004722:	d107      	bne.n	8004734 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004724:	4b50      	ldr	r3, [pc, #320]	; (8004868 <HAL_RCC_ClockConfig+0x1b4>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d115      	bne.n	800475c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e092      	b.n	800485a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d107      	bne.n	800474c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800473c:	4b4a      	ldr	r3, [pc, #296]	; (8004868 <HAL_RCC_ClockConfig+0x1b4>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d109      	bne.n	800475c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e086      	b.n	800485a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800474c:	4b46      	ldr	r3, [pc, #280]	; (8004868 <HAL_RCC_ClockConfig+0x1b4>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e07e      	b.n	800485a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800475c:	4b42      	ldr	r3, [pc, #264]	; (8004868 <HAL_RCC_ClockConfig+0x1b4>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f023 0203 	bic.w	r2, r3, #3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	493f      	ldr	r1, [pc, #252]	; (8004868 <HAL_RCC_ClockConfig+0x1b4>)
 800476a:	4313      	orrs	r3, r2
 800476c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800476e:	f7fd fddf 	bl	8002330 <HAL_GetTick>
 8004772:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004774:	e00a      	b.n	800478c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004776:	f7fd fddb 	bl	8002330 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	f241 3288 	movw	r2, #5000	; 0x1388
 8004784:	4293      	cmp	r3, r2
 8004786:	d901      	bls.n	800478c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e066      	b.n	800485a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800478c:	4b36      	ldr	r3, [pc, #216]	; (8004868 <HAL_RCC_ClockConfig+0x1b4>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f003 020c 	and.w	r2, r3, #12
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	429a      	cmp	r2, r3
 800479c:	d1eb      	bne.n	8004776 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d008      	beq.n	80047bc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047aa:	4b2f      	ldr	r3, [pc, #188]	; (8004868 <HAL_RCC_ClockConfig+0x1b4>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	492c      	ldr	r1, [pc, #176]	; (8004868 <HAL_RCC_ClockConfig+0x1b4>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047bc:	4b29      	ldr	r3, [pc, #164]	; (8004864 <HAL_RCC_ClockConfig+0x1b0>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0307 	and.w	r3, r3, #7
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d210      	bcs.n	80047ec <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ca:	4b26      	ldr	r3, [pc, #152]	; (8004864 <HAL_RCC_ClockConfig+0x1b0>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f023 0207 	bic.w	r2, r3, #7
 80047d2:	4924      	ldr	r1, [pc, #144]	; (8004864 <HAL_RCC_ClockConfig+0x1b0>)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047da:	4b22      	ldr	r3, [pc, #136]	; (8004864 <HAL_RCC_ClockConfig+0x1b0>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0307 	and.w	r3, r3, #7
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d001      	beq.n	80047ec <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e036      	b.n	800485a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0304 	and.w	r3, r3, #4
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d008      	beq.n	800480a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047f8:	4b1b      	ldr	r3, [pc, #108]	; (8004868 <HAL_RCC_ClockConfig+0x1b4>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	4918      	ldr	r1, [pc, #96]	; (8004868 <HAL_RCC_ClockConfig+0x1b4>)
 8004806:	4313      	orrs	r3, r2
 8004808:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0308 	and.w	r3, r3, #8
 8004812:	2b00      	cmp	r3, #0
 8004814:	d009      	beq.n	800482a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004816:	4b14      	ldr	r3, [pc, #80]	; (8004868 <HAL_RCC_ClockConfig+0x1b4>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	4910      	ldr	r1, [pc, #64]	; (8004868 <HAL_RCC_ClockConfig+0x1b4>)
 8004826:	4313      	orrs	r3, r2
 8004828:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800482a:	f000 f825 	bl	8004878 <HAL_RCC_GetSysClockFreq>
 800482e:	4602      	mov	r2, r0
 8004830:	4b0d      	ldr	r3, [pc, #52]	; (8004868 <HAL_RCC_ClockConfig+0x1b4>)
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	091b      	lsrs	r3, r3, #4
 8004836:	f003 030f 	and.w	r3, r3, #15
 800483a:	490c      	ldr	r1, [pc, #48]	; (800486c <HAL_RCC_ClockConfig+0x1b8>)
 800483c:	5ccb      	ldrb	r3, [r1, r3]
 800483e:	f003 031f 	and.w	r3, r3, #31
 8004842:	fa22 f303 	lsr.w	r3, r2, r3
 8004846:	4a0a      	ldr	r2, [pc, #40]	; (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 8004848:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800484a:	4b0a      	ldr	r3, [pc, #40]	; (8004874 <HAL_RCC_ClockConfig+0x1c0>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4618      	mov	r0, r3
 8004850:	f7fd fd1e 	bl	8002290 <HAL_InitTick>
 8004854:	4603      	mov	r3, r0
 8004856:	72fb      	strb	r3, [r7, #11]

  return status;
 8004858:	7afb      	ldrb	r3, [r7, #11]
}
 800485a:	4618      	mov	r0, r3
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	40022000 	.word	0x40022000
 8004868:	40021000 	.word	0x40021000
 800486c:	080071a0 	.word	0x080071a0
 8004870:	20000004 	.word	0x20000004
 8004874:	20000008 	.word	0x20000008

08004878 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004878:	b480      	push	{r7}
 800487a:	b089      	sub	sp, #36	; 0x24
 800487c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800487e:	2300      	movs	r3, #0
 8004880:	61fb      	str	r3, [r7, #28]
 8004882:	2300      	movs	r3, #0
 8004884:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004886:	4b3e      	ldr	r3, [pc, #248]	; (8004980 <HAL_RCC_GetSysClockFreq+0x108>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 030c 	and.w	r3, r3, #12
 800488e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004890:	4b3b      	ldr	r3, [pc, #236]	; (8004980 <HAL_RCC_GetSysClockFreq+0x108>)
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f003 0303 	and.w	r3, r3, #3
 8004898:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d005      	beq.n	80048ac <HAL_RCC_GetSysClockFreq+0x34>
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	2b0c      	cmp	r3, #12
 80048a4:	d121      	bne.n	80048ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d11e      	bne.n	80048ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80048ac:	4b34      	ldr	r3, [pc, #208]	; (8004980 <HAL_RCC_GetSysClockFreq+0x108>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0308 	and.w	r3, r3, #8
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d107      	bne.n	80048c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80048b8:	4b31      	ldr	r3, [pc, #196]	; (8004980 <HAL_RCC_GetSysClockFreq+0x108>)
 80048ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048be:	0a1b      	lsrs	r3, r3, #8
 80048c0:	f003 030f 	and.w	r3, r3, #15
 80048c4:	61fb      	str	r3, [r7, #28]
 80048c6:	e005      	b.n	80048d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80048c8:	4b2d      	ldr	r3, [pc, #180]	; (8004980 <HAL_RCC_GetSysClockFreq+0x108>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	091b      	lsrs	r3, r3, #4
 80048ce:	f003 030f 	and.w	r3, r3, #15
 80048d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80048d4:	4a2b      	ldr	r2, [pc, #172]	; (8004984 <HAL_RCC_GetSysClockFreq+0x10c>)
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10d      	bne.n	8004900 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048e8:	e00a      	b.n	8004900 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	2b04      	cmp	r3, #4
 80048ee:	d102      	bne.n	80048f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80048f0:	4b25      	ldr	r3, [pc, #148]	; (8004988 <HAL_RCC_GetSysClockFreq+0x110>)
 80048f2:	61bb      	str	r3, [r7, #24]
 80048f4:	e004      	b.n	8004900 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	d101      	bne.n	8004900 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80048fc:	4b23      	ldr	r3, [pc, #140]	; (800498c <HAL_RCC_GetSysClockFreq+0x114>)
 80048fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	2b0c      	cmp	r3, #12
 8004904:	d134      	bne.n	8004970 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004906:	4b1e      	ldr	r3, [pc, #120]	; (8004980 <HAL_RCC_GetSysClockFreq+0x108>)
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	f003 0303 	and.w	r3, r3, #3
 800490e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	2b02      	cmp	r3, #2
 8004914:	d003      	beq.n	800491e <HAL_RCC_GetSysClockFreq+0xa6>
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	2b03      	cmp	r3, #3
 800491a:	d003      	beq.n	8004924 <HAL_RCC_GetSysClockFreq+0xac>
 800491c:	e005      	b.n	800492a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800491e:	4b1a      	ldr	r3, [pc, #104]	; (8004988 <HAL_RCC_GetSysClockFreq+0x110>)
 8004920:	617b      	str	r3, [r7, #20]
      break;
 8004922:	e005      	b.n	8004930 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004924:	4b19      	ldr	r3, [pc, #100]	; (800498c <HAL_RCC_GetSysClockFreq+0x114>)
 8004926:	617b      	str	r3, [r7, #20]
      break;
 8004928:	e002      	b.n	8004930 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	617b      	str	r3, [r7, #20]
      break;
 800492e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004930:	4b13      	ldr	r3, [pc, #76]	; (8004980 <HAL_RCC_GetSysClockFreq+0x108>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	091b      	lsrs	r3, r3, #4
 8004936:	f003 0307 	and.w	r3, r3, #7
 800493a:	3301      	adds	r3, #1
 800493c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800493e:	4b10      	ldr	r3, [pc, #64]	; (8004980 <HAL_RCC_GetSysClockFreq+0x108>)
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	0a1b      	lsrs	r3, r3, #8
 8004944:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	fb02 f203 	mul.w	r2, r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	fbb2 f3f3 	udiv	r3, r2, r3
 8004954:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004956:	4b0a      	ldr	r3, [pc, #40]	; (8004980 <HAL_RCC_GetSysClockFreq+0x108>)
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	0e5b      	lsrs	r3, r3, #25
 800495c:	f003 0303 	and.w	r3, r3, #3
 8004960:	3301      	adds	r3, #1
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	fbb2 f3f3 	udiv	r3, r2, r3
 800496e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004970:	69bb      	ldr	r3, [r7, #24]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3724      	adds	r7, #36	; 0x24
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	40021000 	.word	0x40021000
 8004984:	080071b8 	.word	0x080071b8
 8004988:	00f42400 	.word	0x00f42400
 800498c:	007a1200 	.word	0x007a1200

08004990 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004990:	b480      	push	{r7}
 8004992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004994:	4b03      	ldr	r3, [pc, #12]	; (80049a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004996:	681b      	ldr	r3, [r3, #0]
}
 8004998:	4618      	mov	r0, r3
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	20000004 	.word	0x20000004

080049a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80049ac:	f7ff fff0 	bl	8004990 <HAL_RCC_GetHCLKFreq>
 80049b0:	4602      	mov	r2, r0
 80049b2:	4b06      	ldr	r3, [pc, #24]	; (80049cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	0a1b      	lsrs	r3, r3, #8
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	4904      	ldr	r1, [pc, #16]	; (80049d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80049be:	5ccb      	ldrb	r3, [r1, r3]
 80049c0:	f003 031f 	and.w	r3, r3, #31
 80049c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40021000 	.word	0x40021000
 80049d0:	080071b0 	.word	0x080071b0

080049d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80049d8:	f7ff ffda 	bl	8004990 <HAL_RCC_GetHCLKFreq>
 80049dc:	4602      	mov	r2, r0
 80049de:	4b06      	ldr	r3, [pc, #24]	; (80049f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	0adb      	lsrs	r3, r3, #11
 80049e4:	f003 0307 	and.w	r3, r3, #7
 80049e8:	4904      	ldr	r1, [pc, #16]	; (80049fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80049ea:	5ccb      	ldrb	r3, [r1, r3]
 80049ec:	f003 031f 	and.w	r3, r3, #31
 80049f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	40021000 	.word	0x40021000
 80049fc:	080071b0 	.word	0x080071b0

08004a00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b086      	sub	sp, #24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004a08:	2300      	movs	r3, #0
 8004a0a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004a0c:	4b2a      	ldr	r3, [pc, #168]	; (8004ab8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d003      	beq.n	8004a20 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004a18:	f7ff f9c8 	bl	8003dac <HAL_PWREx_GetVoltageRange>
 8004a1c:	6178      	str	r0, [r7, #20]
 8004a1e:	e014      	b.n	8004a4a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a20:	4b25      	ldr	r3, [pc, #148]	; (8004ab8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a24:	4a24      	ldr	r2, [pc, #144]	; (8004ab8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a2a:	6593      	str	r3, [r2, #88]	; 0x58
 8004a2c:	4b22      	ldr	r3, [pc, #136]	; (8004ab8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a34:	60fb      	str	r3, [r7, #12]
 8004a36:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004a38:	f7ff f9b8 	bl	8003dac <HAL_PWREx_GetVoltageRange>
 8004a3c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004a3e:	4b1e      	ldr	r3, [pc, #120]	; (8004ab8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a42:	4a1d      	ldr	r2, [pc, #116]	; (8004ab8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a48:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a50:	d10b      	bne.n	8004a6a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b80      	cmp	r3, #128	; 0x80
 8004a56:	d919      	bls.n	8004a8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2ba0      	cmp	r3, #160	; 0xa0
 8004a5c:	d902      	bls.n	8004a64 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a5e:	2302      	movs	r3, #2
 8004a60:	613b      	str	r3, [r7, #16]
 8004a62:	e013      	b.n	8004a8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a64:	2301      	movs	r3, #1
 8004a66:	613b      	str	r3, [r7, #16]
 8004a68:	e010      	b.n	8004a8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b80      	cmp	r3, #128	; 0x80
 8004a6e:	d902      	bls.n	8004a76 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004a70:	2303      	movs	r3, #3
 8004a72:	613b      	str	r3, [r7, #16]
 8004a74:	e00a      	b.n	8004a8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2b80      	cmp	r3, #128	; 0x80
 8004a7a:	d102      	bne.n	8004a82 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	613b      	str	r3, [r7, #16]
 8004a80:	e004      	b.n	8004a8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b70      	cmp	r3, #112	; 0x70
 8004a86:	d101      	bne.n	8004a8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a88:	2301      	movs	r3, #1
 8004a8a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004a8c:	4b0b      	ldr	r3, [pc, #44]	; (8004abc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f023 0207 	bic.w	r2, r3, #7
 8004a94:	4909      	ldr	r1, [pc, #36]	; (8004abc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004a9c:	4b07      	ldr	r3, [pc, #28]	; (8004abc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0307 	and.w	r3, r3, #7
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d001      	beq.n	8004aae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e000      	b.n	8004ab0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3718      	adds	r7, #24
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	40021000 	.word	0x40021000
 8004abc:	40022000 	.word	0x40022000

08004ac0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ac8:	2300      	movs	r3, #0
 8004aca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004acc:	2300      	movs	r3, #0
 8004ace:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d031      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ae4:	d01a      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004ae6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004aea:	d814      	bhi.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d009      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004af0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004af4:	d10f      	bne.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004af6:	4bac      	ldr	r3, [pc, #688]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	4aab      	ldr	r2, [pc, #684]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b00:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b02:	e00c      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	3304      	adds	r3, #4
 8004b08:	2100      	movs	r1, #0
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 f9dc 	bl	8004ec8 <RCCEx_PLLSAI1_Config>
 8004b10:	4603      	mov	r3, r0
 8004b12:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b14:	e003      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	74fb      	strb	r3, [r7, #19]
      break;
 8004b1a:	e000      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004b1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b1e:	7cfb      	ldrb	r3, [r7, #19]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10b      	bne.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b24:	4ba0      	ldr	r3, [pc, #640]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b32:	499d      	ldr	r1, [pc, #628]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b3a:	e001      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b3c:	7cfb      	ldrb	r3, [r7, #19]
 8004b3e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 8099 	beq.w	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b52:	4b95      	ldr	r3, [pc, #596]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e000      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004b62:	2300      	movs	r3, #0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00d      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b68:	4b8f      	ldr	r3, [pc, #572]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b6c:	4a8e      	ldr	r2, [pc, #568]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b72:	6593      	str	r3, [r2, #88]	; 0x58
 8004b74:	4b8c      	ldr	r3, [pc, #560]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b7c:	60bb      	str	r3, [r7, #8]
 8004b7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b80:	2301      	movs	r3, #1
 8004b82:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b84:	4b89      	ldr	r3, [pc, #548]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a88      	ldr	r2, [pc, #544]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b90:	f7fd fbce 	bl	8002330 <HAL_GetTick>
 8004b94:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b96:	e009      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b98:	f7fd fbca 	bl	8002330 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d902      	bls.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	74fb      	strb	r3, [r7, #19]
        break;
 8004baa:	e005      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bac:	4b7f      	ldr	r3, [pc, #508]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d0ef      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004bb8:	7cfb      	ldrb	r3, [r7, #19]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d155      	bne.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004bbe:	4b7a      	ldr	r3, [pc, #488]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bc8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d01e      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d019      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004bda:	4b73      	ldr	r3, [pc, #460]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004be4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004be6:	4b70      	ldr	r3, [pc, #448]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bec:	4a6e      	ldr	r2, [pc, #440]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bf2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bf6:	4b6c      	ldr	r3, [pc, #432]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bfc:	4a6a      	ldr	r2, [pc, #424]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c06:	4a68      	ldr	r2, [pc, #416]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d016      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c18:	f7fd fb8a 	bl	8002330 <HAL_GetTick>
 8004c1c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c1e:	e00b      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c20:	f7fd fb86 	bl	8002330 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d902      	bls.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	74fb      	strb	r3, [r7, #19]
            break;
 8004c36:	e006      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c38:	4b5b      	ldr	r3, [pc, #364]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d0ec      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004c46:	7cfb      	ldrb	r3, [r7, #19]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10b      	bne.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c4c:	4b56      	ldr	r3, [pc, #344]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c5a:	4953      	ldr	r1, [pc, #332]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c62:	e004      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c64:	7cfb      	ldrb	r3, [r7, #19]
 8004c66:	74bb      	strb	r3, [r7, #18]
 8004c68:	e001      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c6a:	7cfb      	ldrb	r3, [r7, #19]
 8004c6c:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c6e:	7c7b      	ldrb	r3, [r7, #17]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d105      	bne.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c74:	4b4c      	ldr	r3, [pc, #304]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c78:	4a4b      	ldr	r2, [pc, #300]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c7e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00a      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c8c:	4b46      	ldr	r3, [pc, #280]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c92:	f023 0203 	bic.w	r2, r3, #3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	4943      	ldr	r1, [pc, #268]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00a      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cae:	4b3e      	ldr	r3, [pc, #248]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb4:	f023 020c 	bic.w	r2, r3, #12
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	493a      	ldr	r1, [pc, #232]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0320 	and.w	r3, r3, #32
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00a      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cd0:	4b35      	ldr	r3, [pc, #212]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cde:	4932      	ldr	r1, [pc, #200]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00a      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cf2:	4b2d      	ldr	r3, [pc, #180]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d00:	4929      	ldr	r1, [pc, #164]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00a      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d14:	4b24      	ldr	r3, [pc, #144]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d22:	4921      	ldr	r1, [pc, #132]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d36:	4b1c      	ldr	r3, [pc, #112]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d44:	4918      	ldr	r1, [pc, #96]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00a      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d58:	4b13      	ldr	r3, [pc, #76]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d66:	4910      	ldr	r1, [pc, #64]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d02c      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d7a:	4b0b      	ldr	r3, [pc, #44]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d80:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d88:	4907      	ldr	r1, [pc, #28]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d98:	d10a      	bne.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d9a:	4b03      	ldr	r3, [pc, #12]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	4a02      	ldr	r2, [pc, #8]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004da0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004da4:	60d3      	str	r3, [r2, #12]
 8004da6:	e015      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004da8:	40021000 	.word	0x40021000
 8004dac:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004db8:	d10c      	bne.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	3304      	adds	r3, #4
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 f881 	bl	8004ec8 <RCCEx_PLLSAI1_Config>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004dca:	7cfb      	ldrb	r3, [r7, #19]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8004dd0:	7cfb      	ldrb	r3, [r7, #19]
 8004dd2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d028      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004de0:	4b30      	ldr	r3, [pc, #192]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dee:	492d      	ldr	r1, [pc, #180]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dfe:	d106      	bne.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e00:	4b28      	ldr	r3, [pc, #160]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	4a27      	ldr	r2, [pc, #156]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e0a:	60d3      	str	r3, [r2, #12]
 8004e0c:	e011      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e16:	d10c      	bne.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	2101      	movs	r1, #1
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 f852 	bl	8004ec8 <RCCEx_PLLSAI1_Config>
 8004e24:	4603      	mov	r3, r0
 8004e26:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e28:	7cfb      	ldrb	r3, [r7, #19]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8004e2e:	7cfb      	ldrb	r3, [r7, #19]
 8004e30:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d01c      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e3e:	4b19      	ldr	r3, [pc, #100]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e44:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e4c:	4915      	ldr	r1, [pc, #84]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e5c:	d10c      	bne.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	3304      	adds	r3, #4
 8004e62:	2102      	movs	r1, #2
 8004e64:	4618      	mov	r0, r3
 8004e66:	f000 f82f 	bl	8004ec8 <RCCEx_PLLSAI1_Config>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e6e:	7cfb      	ldrb	r3, [r7, #19]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004e74:	7cfb      	ldrb	r3, [r7, #19]
 8004e76:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00a      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e84:	4b07      	ldr	r3, [pc, #28]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e8a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e92:	4904      	ldr	r1, [pc, #16]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004e9a:	7cbb      	ldrb	r3, [r7, #18]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3718      	adds	r7, #24
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	40021000 	.word	0x40021000

08004ea8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004eac:	4b05      	ldr	r3, [pc, #20]	; (8004ec4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a04      	ldr	r2, [pc, #16]	; (8004ec4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004eb2:	f043 0304 	orr.w	r3, r3, #4
 8004eb6:	6013      	str	r3, [r2, #0]
}
 8004eb8:	bf00      	nop
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	40021000 	.word	0x40021000

08004ec8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ed6:	4b74      	ldr	r3, [pc, #464]	; (80050a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	f003 0303 	and.w	r3, r3, #3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d018      	beq.n	8004f14 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004ee2:	4b71      	ldr	r3, [pc, #452]	; (80050a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	f003 0203 	and.w	r2, r3, #3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d10d      	bne.n	8004f0e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
       ||
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d009      	beq.n	8004f0e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004efa:	4b6b      	ldr	r3, [pc, #428]	; (80050a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	091b      	lsrs	r3, r3, #4
 8004f00:	f003 0307 	and.w	r3, r3, #7
 8004f04:	1c5a      	adds	r2, r3, #1
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
       ||
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d047      	beq.n	8004f9e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	73fb      	strb	r3, [r7, #15]
 8004f12:	e044      	b.n	8004f9e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2b03      	cmp	r3, #3
 8004f1a:	d018      	beq.n	8004f4e <RCCEx_PLLSAI1_Config+0x86>
 8004f1c:	2b03      	cmp	r3, #3
 8004f1e:	d825      	bhi.n	8004f6c <RCCEx_PLLSAI1_Config+0xa4>
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d002      	beq.n	8004f2a <RCCEx_PLLSAI1_Config+0x62>
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d009      	beq.n	8004f3c <RCCEx_PLLSAI1_Config+0x74>
 8004f28:	e020      	b.n	8004f6c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f2a:	4b5f      	ldr	r3, [pc, #380]	; (80050a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d11d      	bne.n	8004f72 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f3a:	e01a      	b.n	8004f72 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f3c:	4b5a      	ldr	r3, [pc, #360]	; (80050a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d116      	bne.n	8004f76 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f4c:	e013      	b.n	8004f76 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f4e:	4b56      	ldr	r3, [pc, #344]	; (80050a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10f      	bne.n	8004f7a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f5a:	4b53      	ldr	r3, [pc, #332]	; (80050a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d109      	bne.n	8004f7a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f6a:	e006      	b.n	8004f7a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f70:	e004      	b.n	8004f7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f72:	bf00      	nop
 8004f74:	e002      	b.n	8004f7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f76:	bf00      	nop
 8004f78:	e000      	b.n	8004f7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f7c:	7bfb      	ldrb	r3, [r7, #15]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10d      	bne.n	8004f9e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f82:	4b49      	ldr	r3, [pc, #292]	; (80050a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6819      	ldr	r1, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	3b01      	subs	r3, #1
 8004f94:	011b      	lsls	r3, r3, #4
 8004f96:	430b      	orrs	r3, r1
 8004f98:	4943      	ldr	r1, [pc, #268]	; (80050a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f9e:	7bfb      	ldrb	r3, [r7, #15]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d17c      	bne.n	800509e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004fa4:	4b40      	ldr	r3, [pc, #256]	; (80050a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a3f      	ldr	r2, [pc, #252]	; (80050a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004faa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004fae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fb0:	f7fd f9be 	bl	8002330 <HAL_GetTick>
 8004fb4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004fb6:	e009      	b.n	8004fcc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004fb8:	f7fd f9ba 	bl	8002330 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d902      	bls.n	8004fcc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	73fb      	strb	r3, [r7, #15]
        break;
 8004fca:	e005      	b.n	8004fd8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004fcc:	4b36      	ldr	r3, [pc, #216]	; (80050a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1ef      	bne.n	8004fb8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004fd8:	7bfb      	ldrb	r3, [r7, #15]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d15f      	bne.n	800509e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d110      	bne.n	8005006 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fe4:	4b30      	ldr	r3, [pc, #192]	; (80050a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004fec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	6892      	ldr	r2, [r2, #8]
 8004ff4:	0211      	lsls	r1, r2, #8
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	68d2      	ldr	r2, [r2, #12]
 8004ffa:	06d2      	lsls	r2, r2, #27
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	492a      	ldr	r1, [pc, #168]	; (80050a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005000:	4313      	orrs	r3, r2
 8005002:	610b      	str	r3, [r1, #16]
 8005004:	e027      	b.n	8005056 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d112      	bne.n	8005032 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800500c:	4b26      	ldr	r3, [pc, #152]	; (80050a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005014:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	6892      	ldr	r2, [r2, #8]
 800501c:	0211      	lsls	r1, r2, #8
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	6912      	ldr	r2, [r2, #16]
 8005022:	0852      	lsrs	r2, r2, #1
 8005024:	3a01      	subs	r2, #1
 8005026:	0552      	lsls	r2, r2, #21
 8005028:	430a      	orrs	r2, r1
 800502a:	491f      	ldr	r1, [pc, #124]	; (80050a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800502c:	4313      	orrs	r3, r2
 800502e:	610b      	str	r3, [r1, #16]
 8005030:	e011      	b.n	8005056 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005032:	4b1d      	ldr	r3, [pc, #116]	; (80050a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800503a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6892      	ldr	r2, [r2, #8]
 8005042:	0211      	lsls	r1, r2, #8
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	6952      	ldr	r2, [r2, #20]
 8005048:	0852      	lsrs	r2, r2, #1
 800504a:	3a01      	subs	r2, #1
 800504c:	0652      	lsls	r2, r2, #25
 800504e:	430a      	orrs	r2, r1
 8005050:	4915      	ldr	r1, [pc, #84]	; (80050a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005052:	4313      	orrs	r3, r2
 8005054:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005056:	4b14      	ldr	r3, [pc, #80]	; (80050a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a13      	ldr	r2, [pc, #76]	; (80050a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800505c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005060:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005062:	f7fd f965 	bl	8002330 <HAL_GetTick>
 8005066:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005068:	e009      	b.n	800507e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800506a:	f7fd f961 	bl	8002330 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b02      	cmp	r3, #2
 8005076:	d902      	bls.n	800507e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	73fb      	strb	r3, [r7, #15]
          break;
 800507c:	e005      	b.n	800508a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800507e:	4b0a      	ldr	r3, [pc, #40]	; (80050a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d0ef      	beq.n	800506a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800508a:	7bfb      	ldrb	r3, [r7, #15]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d106      	bne.n	800509e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005090:	4b05      	ldr	r3, [pc, #20]	; (80050a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005092:	691a      	ldr	r2, [r3, #16]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	4903      	ldr	r1, [pc, #12]	; (80050a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800509a:	4313      	orrs	r3, r2
 800509c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800509e:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	40021000 	.word	0x40021000

080050ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d101      	bne.n	80050be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e049      	b.n	8005152 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d106      	bne.n	80050d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f7fc ff12 	bl	8001efc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2202      	movs	r2, #2
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	3304      	adds	r3, #4
 80050e8:	4619      	mov	r1, r3
 80050ea:	4610      	mov	r0, r2
 80050ec:	f000 fa6c 	bl	80055c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3708      	adds	r7, #8
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b082      	sub	sp, #8
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e049      	b.n	8005200 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005172:	b2db      	uxtb	r3, r3
 8005174:	2b00      	cmp	r3, #0
 8005176:	d106      	bne.n	8005186 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 f841 	bl	8005208 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2202      	movs	r2, #2
 800518a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	3304      	adds	r3, #4
 8005196:	4619      	mov	r1, r3
 8005198:	4610      	mov	r0, r2
 800519a:	f000 fa15 	bl	80055c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2201      	movs	r2, #1
 80051f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3708      	adds	r7, #8
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800522e:	2b01      	cmp	r3, #1
 8005230:	d101      	bne.n	8005236 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005232:	2302      	movs	r3, #2
 8005234:	e0fd      	b.n	8005432 <HAL_TIM_PWM_ConfigChannel+0x216>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b14      	cmp	r3, #20
 8005242:	f200 80f0 	bhi.w	8005426 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005246:	a201      	add	r2, pc, #4	; (adr r2, 800524c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524c:	080052a1 	.word	0x080052a1
 8005250:	08005427 	.word	0x08005427
 8005254:	08005427 	.word	0x08005427
 8005258:	08005427 	.word	0x08005427
 800525c:	080052e1 	.word	0x080052e1
 8005260:	08005427 	.word	0x08005427
 8005264:	08005427 	.word	0x08005427
 8005268:	08005427 	.word	0x08005427
 800526c:	08005323 	.word	0x08005323
 8005270:	08005427 	.word	0x08005427
 8005274:	08005427 	.word	0x08005427
 8005278:	08005427 	.word	0x08005427
 800527c:	08005363 	.word	0x08005363
 8005280:	08005427 	.word	0x08005427
 8005284:	08005427 	.word	0x08005427
 8005288:	08005427 	.word	0x08005427
 800528c:	080053a5 	.word	0x080053a5
 8005290:	08005427 	.word	0x08005427
 8005294:	08005427 	.word	0x08005427
 8005298:	08005427 	.word	0x08005427
 800529c:	080053e5 	.word	0x080053e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68b9      	ldr	r1, [r7, #8]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 f9f2 	bl	8005690 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	699a      	ldr	r2, [r3, #24]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f042 0208 	orr.w	r2, r2, #8
 80052ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	699a      	ldr	r2, [r3, #24]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 0204 	bic.w	r2, r2, #4
 80052ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6999      	ldr	r1, [r3, #24]
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	691a      	ldr	r2, [r3, #16]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	430a      	orrs	r2, r1
 80052dc:	619a      	str	r2, [r3, #24]
      break;
 80052de:	e0a3      	b.n	8005428 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68b9      	ldr	r1, [r7, #8]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 fa4e 	bl	8005788 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699a      	ldr	r2, [r3, #24]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	699a      	ldr	r2, [r3, #24]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800530a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6999      	ldr	r1, [r3, #24]
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	021a      	lsls	r2, r3, #8
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	430a      	orrs	r2, r1
 800531e:	619a      	str	r2, [r3, #24]
      break;
 8005320:	e082      	b.n	8005428 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68b9      	ldr	r1, [r7, #8]
 8005328:	4618      	mov	r0, r3
 800532a:	f000 faa7 	bl	800587c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	69da      	ldr	r2, [r3, #28]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f042 0208 	orr.w	r2, r2, #8
 800533c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	69da      	ldr	r2, [r3, #28]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f022 0204 	bic.w	r2, r2, #4
 800534c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	69d9      	ldr	r1, [r3, #28]
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	691a      	ldr	r2, [r3, #16]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	430a      	orrs	r2, r1
 800535e:	61da      	str	r2, [r3, #28]
      break;
 8005360:	e062      	b.n	8005428 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68b9      	ldr	r1, [r7, #8]
 8005368:	4618      	mov	r0, r3
 800536a:	f000 faff 	bl	800596c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	69da      	ldr	r2, [r3, #28]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800537c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	69da      	ldr	r2, [r3, #28]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800538c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	69d9      	ldr	r1, [r3, #28]
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	021a      	lsls	r2, r3, #8
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	61da      	str	r2, [r3, #28]
      break;
 80053a2:	e041      	b.n	8005428 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68b9      	ldr	r1, [r7, #8]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 fb3c 	bl	8005a28 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f042 0208 	orr.w	r2, r2, #8
 80053be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 0204 	bic.w	r2, r2, #4
 80053ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	691a      	ldr	r2, [r3, #16]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80053e2:	e021      	b.n	8005428 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68b9      	ldr	r1, [r7, #8]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f000 fb74 	bl	8005ad8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800540e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	021a      	lsls	r2, r3, #8
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005424:	e000      	b.n	8005428 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005426:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop

0800543c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800544c:	2b01      	cmp	r3, #1
 800544e:	d101      	bne.n	8005454 <HAL_TIM_ConfigClockSource+0x18>
 8005450:	2302      	movs	r3, #2
 8005452:	e0b5      	b.n	80055c0 <HAL_TIM_ConfigClockSource+0x184>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2202      	movs	r2, #2
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005472:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005476:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800547e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005490:	d03e      	beq.n	8005510 <HAL_TIM_ConfigClockSource+0xd4>
 8005492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005496:	f200 8087 	bhi.w	80055a8 <HAL_TIM_ConfigClockSource+0x16c>
 800549a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800549e:	f000 8085 	beq.w	80055ac <HAL_TIM_ConfigClockSource+0x170>
 80054a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054a6:	d87f      	bhi.n	80055a8 <HAL_TIM_ConfigClockSource+0x16c>
 80054a8:	2b70      	cmp	r3, #112	; 0x70
 80054aa:	d01a      	beq.n	80054e2 <HAL_TIM_ConfigClockSource+0xa6>
 80054ac:	2b70      	cmp	r3, #112	; 0x70
 80054ae:	d87b      	bhi.n	80055a8 <HAL_TIM_ConfigClockSource+0x16c>
 80054b0:	2b60      	cmp	r3, #96	; 0x60
 80054b2:	d050      	beq.n	8005556 <HAL_TIM_ConfigClockSource+0x11a>
 80054b4:	2b60      	cmp	r3, #96	; 0x60
 80054b6:	d877      	bhi.n	80055a8 <HAL_TIM_ConfigClockSource+0x16c>
 80054b8:	2b50      	cmp	r3, #80	; 0x50
 80054ba:	d03c      	beq.n	8005536 <HAL_TIM_ConfigClockSource+0xfa>
 80054bc:	2b50      	cmp	r3, #80	; 0x50
 80054be:	d873      	bhi.n	80055a8 <HAL_TIM_ConfigClockSource+0x16c>
 80054c0:	2b40      	cmp	r3, #64	; 0x40
 80054c2:	d058      	beq.n	8005576 <HAL_TIM_ConfigClockSource+0x13a>
 80054c4:	2b40      	cmp	r3, #64	; 0x40
 80054c6:	d86f      	bhi.n	80055a8 <HAL_TIM_ConfigClockSource+0x16c>
 80054c8:	2b30      	cmp	r3, #48	; 0x30
 80054ca:	d064      	beq.n	8005596 <HAL_TIM_ConfigClockSource+0x15a>
 80054cc:	2b30      	cmp	r3, #48	; 0x30
 80054ce:	d86b      	bhi.n	80055a8 <HAL_TIM_ConfigClockSource+0x16c>
 80054d0:	2b20      	cmp	r3, #32
 80054d2:	d060      	beq.n	8005596 <HAL_TIM_ConfigClockSource+0x15a>
 80054d4:	2b20      	cmp	r3, #32
 80054d6:	d867      	bhi.n	80055a8 <HAL_TIM_ConfigClockSource+0x16c>
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d05c      	beq.n	8005596 <HAL_TIM_ConfigClockSource+0x15a>
 80054dc:	2b10      	cmp	r3, #16
 80054de:	d05a      	beq.n	8005596 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80054e0:	e062      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6818      	ldr	r0, [r3, #0]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	6899      	ldr	r1, [r3, #8]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	685a      	ldr	r2, [r3, #4]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	f000 fbc5 	bl	8005c80 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005504:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	609a      	str	r2, [r3, #8]
      break;
 800550e:	e04e      	b.n	80055ae <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6818      	ldr	r0, [r3, #0]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	6899      	ldr	r1, [r3, #8]
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	f000 fbae 	bl	8005c80 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	689a      	ldr	r2, [r3, #8]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005532:	609a      	str	r2, [r3, #8]
      break;
 8005534:	e03b      	b.n	80055ae <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6818      	ldr	r0, [r3, #0]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	6859      	ldr	r1, [r3, #4]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	461a      	mov	r2, r3
 8005544:	f000 fb22 	bl	8005b8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2150      	movs	r1, #80	; 0x50
 800554e:	4618      	mov	r0, r3
 8005550:	f000 fb7b 	bl	8005c4a <TIM_ITRx_SetConfig>
      break;
 8005554:	e02b      	b.n	80055ae <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6818      	ldr	r0, [r3, #0]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	6859      	ldr	r1, [r3, #4]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	461a      	mov	r2, r3
 8005564:	f000 fb41 	bl	8005bea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2160      	movs	r1, #96	; 0x60
 800556e:	4618      	mov	r0, r3
 8005570:	f000 fb6b 	bl	8005c4a <TIM_ITRx_SetConfig>
      break;
 8005574:	e01b      	b.n	80055ae <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6818      	ldr	r0, [r3, #0]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	6859      	ldr	r1, [r3, #4]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	461a      	mov	r2, r3
 8005584:	f000 fb02 	bl	8005b8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2140      	movs	r1, #64	; 0x40
 800558e:	4618      	mov	r0, r3
 8005590:	f000 fb5b 	bl	8005c4a <TIM_ITRx_SetConfig>
      break;
 8005594:	e00b      	b.n	80055ae <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4619      	mov	r1, r3
 80055a0:	4610      	mov	r0, r2
 80055a2:	f000 fb52 	bl	8005c4a <TIM_ITRx_SetConfig>
        break;
 80055a6:	e002      	b.n	80055ae <HAL_TIM_ConfigClockSource+0x172>
      break;
 80055a8:	bf00      	nop
 80055aa:	e000      	b.n	80055ae <HAL_TIM_ConfigClockSource+0x172>
      break;
 80055ac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a2a      	ldr	r2, [pc, #168]	; (8005684 <TIM_Base_SetConfig+0xbc>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d003      	beq.n	80055e8 <TIM_Base_SetConfig+0x20>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055e6:	d108      	bne.n	80055fa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a21      	ldr	r2, [pc, #132]	; (8005684 <TIM_Base_SetConfig+0xbc>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d00b      	beq.n	800561a <TIM_Base_SetConfig+0x52>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005608:	d007      	beq.n	800561a <TIM_Base_SetConfig+0x52>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a1e      	ldr	r2, [pc, #120]	; (8005688 <TIM_Base_SetConfig+0xc0>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d003      	beq.n	800561a <TIM_Base_SetConfig+0x52>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a1d      	ldr	r2, [pc, #116]	; (800568c <TIM_Base_SetConfig+0xc4>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d108      	bne.n	800562c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005620:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	4313      	orrs	r3, r2
 800562a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	4313      	orrs	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a0c      	ldr	r2, [pc, #48]	; (8005684 <TIM_Base_SetConfig+0xbc>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d007      	beq.n	8005668 <TIM_Base_SetConfig+0xa0>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a0b      	ldr	r2, [pc, #44]	; (8005688 <TIM_Base_SetConfig+0xc0>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d003      	beq.n	8005668 <TIM_Base_SetConfig+0xa0>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a0a      	ldr	r2, [pc, #40]	; (800568c <TIM_Base_SetConfig+0xc4>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d103      	bne.n	8005670 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	691a      	ldr	r2, [r3, #16]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	615a      	str	r2, [r3, #20]
}
 8005676:	bf00      	nop
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	40012c00 	.word	0x40012c00
 8005688:	40014000 	.word	0x40014000
 800568c:	40014400 	.word	0x40014400

08005690 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005690:	b480      	push	{r7}
 8005692:	b087      	sub	sp, #28
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	f023 0201 	bic.w	r2, r3, #1
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f023 0303 	bic.w	r3, r3, #3
 80056ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f023 0302 	bic.w	r3, r3, #2
 80056dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a24      	ldr	r2, [pc, #144]	; (800577c <TIM_OC1_SetConfig+0xec>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d007      	beq.n	8005700 <TIM_OC1_SetConfig+0x70>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a23      	ldr	r2, [pc, #140]	; (8005780 <TIM_OC1_SetConfig+0xf0>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d003      	beq.n	8005700 <TIM_OC1_SetConfig+0x70>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a22      	ldr	r2, [pc, #136]	; (8005784 <TIM_OC1_SetConfig+0xf4>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d10c      	bne.n	800571a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	f023 0308 	bic.w	r3, r3, #8
 8005706:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	4313      	orrs	r3, r2
 8005710:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	f023 0304 	bic.w	r3, r3, #4
 8005718:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a17      	ldr	r2, [pc, #92]	; (800577c <TIM_OC1_SetConfig+0xec>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d007      	beq.n	8005732 <TIM_OC1_SetConfig+0xa2>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a16      	ldr	r2, [pc, #88]	; (8005780 <TIM_OC1_SetConfig+0xf0>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d003      	beq.n	8005732 <TIM_OC1_SetConfig+0xa2>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a15      	ldr	r2, [pc, #84]	; (8005784 <TIM_OC1_SetConfig+0xf4>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d111      	bne.n	8005756 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005738:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005740:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	4313      	orrs	r3, r2
 800574a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	4313      	orrs	r3, r2
 8005754:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	685a      	ldr	r2, [r3, #4]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	621a      	str	r2, [r3, #32]
}
 8005770:	bf00      	nop
 8005772:	371c      	adds	r7, #28
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr
 800577c:	40012c00 	.word	0x40012c00
 8005780:	40014000 	.word	0x40014000
 8005784:	40014400 	.word	0x40014400

08005788 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005788:	b480      	push	{r7}
 800578a:	b087      	sub	sp, #28
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	f023 0210 	bic.w	r2, r3, #16
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	021b      	lsls	r3, r3, #8
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	f023 0320 	bic.w	r3, r3, #32
 80057d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	011b      	lsls	r3, r3, #4
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a22      	ldr	r2, [pc, #136]	; (8005870 <TIM_OC2_SetConfig+0xe8>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d10d      	bne.n	8005808 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	011b      	lsls	r3, r3, #4
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005806:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a19      	ldr	r2, [pc, #100]	; (8005870 <TIM_OC2_SetConfig+0xe8>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d007      	beq.n	8005820 <TIM_OC2_SetConfig+0x98>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a18      	ldr	r2, [pc, #96]	; (8005874 <TIM_OC2_SetConfig+0xec>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d003      	beq.n	8005820 <TIM_OC2_SetConfig+0x98>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a17      	ldr	r2, [pc, #92]	; (8005878 <TIM_OC2_SetConfig+0xf0>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d113      	bne.n	8005848 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005826:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800582e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	695b      	ldr	r3, [r3, #20]
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	4313      	orrs	r3, r2
 800583a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	4313      	orrs	r3, r2
 8005846:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	685a      	ldr	r2, [r3, #4]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	621a      	str	r2, [r3, #32]
}
 8005862:	bf00      	nop
 8005864:	371c      	adds	r7, #28
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	40012c00 	.word	0x40012c00
 8005874:	40014000 	.word	0x40014000
 8005878:	40014400 	.word	0x40014400

0800587c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800587c:	b480      	push	{r7}
 800587e:	b087      	sub	sp, #28
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	69db      	ldr	r3, [r3, #28]
 80058a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f023 0303 	bic.w	r3, r3, #3
 80058b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	4313      	orrs	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	021b      	lsls	r3, r3, #8
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a21      	ldr	r2, [pc, #132]	; (8005960 <TIM_OC3_SetConfig+0xe4>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d10d      	bne.n	80058fa <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	021b      	lsls	r3, r3, #8
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a18      	ldr	r2, [pc, #96]	; (8005960 <TIM_OC3_SetConfig+0xe4>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d007      	beq.n	8005912 <TIM_OC3_SetConfig+0x96>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a17      	ldr	r2, [pc, #92]	; (8005964 <TIM_OC3_SetConfig+0xe8>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d003      	beq.n	8005912 <TIM_OC3_SetConfig+0x96>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a16      	ldr	r2, [pc, #88]	; (8005968 <TIM_OC3_SetConfig+0xec>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d113      	bne.n	800593a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005918:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005920:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	011b      	lsls	r3, r3, #4
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	4313      	orrs	r3, r2
 800592c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	011b      	lsls	r3, r3, #4
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	4313      	orrs	r3, r2
 8005938:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	621a      	str	r2, [r3, #32]
}
 8005954:	bf00      	nop
 8005956:	371c      	adds	r7, #28
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	40012c00 	.word	0x40012c00
 8005964:	40014000 	.word	0x40014000
 8005968:	40014400 	.word	0x40014400

0800596c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800596c:	b480      	push	{r7}
 800596e:	b087      	sub	sp, #28
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	69db      	ldr	r3, [r3, #28]
 8005992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800599a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800599e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	021b      	lsls	r3, r3, #8
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	031b      	lsls	r3, r3, #12
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a14      	ldr	r2, [pc, #80]	; (8005a1c <TIM_OC4_SetConfig+0xb0>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d007      	beq.n	80059e0 <TIM_OC4_SetConfig+0x74>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a13      	ldr	r2, [pc, #76]	; (8005a20 <TIM_OC4_SetConfig+0xb4>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d003      	beq.n	80059e0 <TIM_OC4_SetConfig+0x74>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a12      	ldr	r2, [pc, #72]	; (8005a24 <TIM_OC4_SetConfig+0xb8>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d109      	bne.n	80059f4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	019b      	lsls	r3, r3, #6
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	621a      	str	r2, [r3, #32]
}
 8005a0e:	bf00      	nop
 8005a10:	371c      	adds	r7, #28
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	40012c00 	.word	0x40012c00
 8005a20:	40014000 	.word	0x40014000
 8005a24:	40014400 	.word	0x40014400

08005a28 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b087      	sub	sp, #28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005a6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	041b      	lsls	r3, r3, #16
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a13      	ldr	r2, [pc, #76]	; (8005acc <TIM_OC5_SetConfig+0xa4>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d007      	beq.n	8005a92 <TIM_OC5_SetConfig+0x6a>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a12      	ldr	r2, [pc, #72]	; (8005ad0 <TIM_OC5_SetConfig+0xa8>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d003      	beq.n	8005a92 <TIM_OC5_SetConfig+0x6a>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a11      	ldr	r2, [pc, #68]	; (8005ad4 <TIM_OC5_SetConfig+0xac>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d109      	bne.n	8005aa6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	021b      	lsls	r3, r3, #8
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	685a      	ldr	r2, [r3, #4]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	621a      	str	r2, [r3, #32]
}
 8005ac0:	bf00      	nop
 8005ac2:	371c      	adds	r7, #28
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	40012c00 	.word	0x40012c00
 8005ad0:	40014000 	.word	0x40014000
 8005ad4:	40014400 	.word	0x40014400

08005ad8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b087      	sub	sp, #28
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	021b      	lsls	r3, r3, #8
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	051b      	lsls	r3, r3, #20
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a14      	ldr	r2, [pc, #80]	; (8005b80 <TIM_OC6_SetConfig+0xa8>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d007      	beq.n	8005b44 <TIM_OC6_SetConfig+0x6c>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a13      	ldr	r2, [pc, #76]	; (8005b84 <TIM_OC6_SetConfig+0xac>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d003      	beq.n	8005b44 <TIM_OC6_SetConfig+0x6c>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a12      	ldr	r2, [pc, #72]	; (8005b88 <TIM_OC6_SetConfig+0xb0>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d109      	bne.n	8005b58 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	695b      	ldr	r3, [r3, #20]
 8005b50:	029b      	lsls	r3, r3, #10
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	685a      	ldr	r2, [r3, #4]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	621a      	str	r2, [r3, #32]
}
 8005b72:	bf00      	nop
 8005b74:	371c      	adds	r7, #28
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	40012c00 	.word	0x40012c00
 8005b84:	40014000 	.word	0x40014000
 8005b88:	40014400 	.word	0x40014400

08005b8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b087      	sub	sp, #28
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	f023 0201 	bic.w	r2, r3, #1
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	011b      	lsls	r3, r3, #4
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	f023 030a 	bic.w	r3, r3, #10
 8005bc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	693a      	ldr	r2, [r7, #16]
 8005bd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	621a      	str	r2, [r3, #32]
}
 8005bde:	bf00      	nop
 8005be0:	371c      	adds	r7, #28
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b087      	sub	sp, #28
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	60f8      	str	r0, [r7, #12]
 8005bf2:	60b9      	str	r1, [r7, #8]
 8005bf4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
 8005bfa:	f023 0210 	bic.w	r2, r3, #16
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6a1b      	ldr	r3, [r3, #32]
 8005c0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	031b      	lsls	r3, r3, #12
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	011b      	lsls	r3, r3, #4
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	693a      	ldr	r2, [r7, #16]
 8005c3c:	621a      	str	r2, [r3, #32]
}
 8005c3e:	bf00      	nop
 8005c40:	371c      	adds	r7, #28
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b085      	sub	sp, #20
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
 8005c52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c62:	683a      	ldr	r2, [r7, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	f043 0307 	orr.w	r3, r3, #7
 8005c6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	609a      	str	r2, [r3, #8]
}
 8005c74:	bf00      	nop
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b087      	sub	sp, #28
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
 8005c8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	021a      	lsls	r2, r3, #8
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	431a      	orrs	r2, r3
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	609a      	str	r2, [r3, #8]
}
 8005cb4:	bf00      	nop
 8005cb6:	371c      	adds	r7, #28
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d109      	bne.n	8005ce4 <HAL_TIMEx_PWMN_Start+0x24>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	bf14      	ite	ne
 8005cdc:	2301      	movne	r3, #1
 8005cde:	2300      	moveq	r3, #0
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	e022      	b.n	8005d2a <HAL_TIMEx_PWMN_Start+0x6a>
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	2b04      	cmp	r3, #4
 8005ce8:	d109      	bne.n	8005cfe <HAL_TIMEx_PWMN_Start+0x3e>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	bf14      	ite	ne
 8005cf6:	2301      	movne	r3, #1
 8005cf8:	2300      	moveq	r3, #0
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	e015      	b.n	8005d2a <HAL_TIMEx_PWMN_Start+0x6a>
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	2b08      	cmp	r3, #8
 8005d02:	d109      	bne.n	8005d18 <HAL_TIMEx_PWMN_Start+0x58>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	bf14      	ite	ne
 8005d10:	2301      	movne	r3, #1
 8005d12:	2300      	moveq	r3, #0
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	e008      	b.n	8005d2a <HAL_TIMEx_PWMN_Start+0x6a>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	bf14      	ite	ne
 8005d24:	2301      	movne	r3, #1
 8005d26:	2300      	moveq	r3, #0
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e05a      	b.n	8005de8 <HAL_TIMEx_PWMN_Start+0x128>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d104      	bne.n	8005d42 <HAL_TIMEx_PWMN_Start+0x82>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d40:	e013      	b.n	8005d6a <HAL_TIMEx_PWMN_Start+0xaa>
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	2b04      	cmp	r3, #4
 8005d46:	d104      	bne.n	8005d52 <HAL_TIMEx_PWMN_Start+0x92>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d50:	e00b      	b.n	8005d6a <HAL_TIMEx_PWMN_Start+0xaa>
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	2b08      	cmp	r3, #8
 8005d56:	d104      	bne.n	8005d62 <HAL_TIMEx_PWMN_Start+0xa2>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d60:	e003      	b.n	8005d6a <HAL_TIMEx_PWMN_Start+0xaa>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2202      	movs	r2, #2
 8005d66:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2204      	movs	r2, #4
 8005d70:	6839      	ldr	r1, [r7, #0]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f000 f920 	bl	8005fb8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d86:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a18      	ldr	r2, [pc, #96]	; (8005df0 <HAL_TIMEx_PWMN_Start+0x130>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d009      	beq.n	8005da6 <HAL_TIMEx_PWMN_Start+0xe6>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d9a:	d004      	beq.n	8005da6 <HAL_TIMEx_PWMN_Start+0xe6>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a14      	ldr	r2, [pc, #80]	; (8005df4 <HAL_TIMEx_PWMN_Start+0x134>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d115      	bne.n	8005dd2 <HAL_TIMEx_PWMN_Start+0x112>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	689a      	ldr	r2, [r3, #8]
 8005dac:	4b12      	ldr	r3, [pc, #72]	; (8005df8 <HAL_TIMEx_PWMN_Start+0x138>)
 8005dae:	4013      	ands	r3, r2
 8005db0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2b06      	cmp	r3, #6
 8005db6:	d015      	beq.n	8005de4 <HAL_TIMEx_PWMN_Start+0x124>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dbe:	d011      	beq.n	8005de4 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f042 0201 	orr.w	r2, r2, #1
 8005dce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dd0:	e008      	b.n	8005de4 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f042 0201 	orr.w	r2, r2, #1
 8005de0:	601a      	str	r2, [r3, #0]
 8005de2:	e000      	b.n	8005de6 <HAL_TIMEx_PWMN_Start+0x126>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005de4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	40012c00 	.word	0x40012c00
 8005df4:	40014000 	.word	0x40014000
 8005df8:	00010007 	.word	0x00010007

08005dfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d101      	bne.n	8005e14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e10:	2302      	movs	r3, #2
 8005e12:	e04f      	b.n	8005eb4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2202      	movs	r2, #2
 8005e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a21      	ldr	r2, [pc, #132]	; (8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d108      	bne.n	8005e50 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e44:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a14      	ldr	r2, [pc, #80]	; (8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d009      	beq.n	8005e88 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e7c:	d004      	beq.n	8005e88 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a10      	ldr	r2, [pc, #64]	; (8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d10c      	bne.n	8005ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	68ba      	ldr	r2, [r7, #8]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3714      	adds	r7, #20
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr
 8005ec0:	40012c00 	.word	0x40012c00
 8005ec4:	40014000 	.word	0x40014000

08005ec8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d101      	bne.n	8005ee4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005ee0:	2302      	movs	r3, #2
 8005ee2:	e060      	b.n	8005fa6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	695b      	ldr	r3, [r3, #20]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	041b      	lsls	r3, r3, #16
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a14      	ldr	r2, [pc, #80]	; (8005fb4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d115      	bne.n	8005f94 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f72:	051b      	lsls	r3, r3, #20
 8005f74:	4313      	orrs	r3, r2
 8005f76:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	69db      	ldr	r3, [r3, #28]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	6a1b      	ldr	r3, [r3, #32]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3714      	adds	r7, #20
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	40012c00 	.word	0x40012c00

08005fb8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b087      	sub	sp, #28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	f003 031f 	and.w	r3, r3, #31
 8005fca:	2204      	movs	r2, #4
 8005fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6a1a      	ldr	r2, [r3, #32]
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	43db      	mvns	r3, r3
 8005fda:	401a      	ands	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6a1a      	ldr	r2, [r3, #32]
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	f003 031f 	and.w	r3, r3, #31
 8005fea:	6879      	ldr	r1, [r7, #4]
 8005fec:	fa01 f303 	lsl.w	r3, r1, r3
 8005ff0:	431a      	orrs	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	621a      	str	r2, [r3, #32]
}
 8005ff6:	bf00      	nop
 8005ff8:	371c      	adds	r7, #28
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr

08006002 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006002:	b580      	push	{r7, lr}
 8006004:	b082      	sub	sp, #8
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d101      	bne.n	8006014 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	e040      	b.n	8006096 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006018:	2b00      	cmp	r3, #0
 800601a:	d106      	bne.n	800602a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f7fb fff1 	bl	800200c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2224      	movs	r2, #36	; 0x24
 800602e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f022 0201 	bic.w	r2, r2, #1
 800603e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 f8c1 	bl	80061c8 <UART_SetConfig>
 8006046:	4603      	mov	r3, r0
 8006048:	2b01      	cmp	r3, #1
 800604a:	d101      	bne.n	8006050 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e022      	b.n	8006096 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006054:	2b00      	cmp	r3, #0
 8006056:	d002      	beq.n	800605e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 fac1 	bl	80065e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	685a      	ldr	r2, [r3, #4]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800606c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800607c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f042 0201 	orr.w	r2, r2, #1
 800608c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 fb48 	bl	8006724 <UART_CheckIdleState>
 8006094:	4603      	mov	r3, r0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3708      	adds	r7, #8
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b08a      	sub	sp, #40	; 0x28
 80060a2:	af02      	add	r7, sp, #8
 80060a4:	60f8      	str	r0, [r7, #12]
 80060a6:	60b9      	str	r1, [r7, #8]
 80060a8:	603b      	str	r3, [r7, #0]
 80060aa:	4613      	mov	r3, r2
 80060ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060b2:	2b20      	cmp	r3, #32
 80060b4:	f040 8082 	bne.w	80061bc <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d002      	beq.n	80060c4 <HAL_UART_Transmit+0x26>
 80060be:	88fb      	ldrh	r3, [r7, #6]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d101      	bne.n	80060c8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e07a      	b.n	80061be <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d101      	bne.n	80060d6 <HAL_UART_Transmit+0x38>
 80060d2:	2302      	movs	r3, #2
 80060d4:	e073      	b.n	80061be <HAL_UART_Transmit+0x120>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2201      	movs	r2, #1
 80060da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2221      	movs	r2, #33	; 0x21
 80060ea:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060ec:	f7fc f920 	bl	8002330 <HAL_GetTick>
 80060f0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	88fa      	ldrh	r2, [r7, #6]
 80060f6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	88fa      	ldrh	r2, [r7, #6]
 80060fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800610a:	d108      	bne.n	800611e <HAL_UART_Transmit+0x80>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d104      	bne.n	800611e <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006114:	2300      	movs	r3, #0
 8006116:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	61bb      	str	r3, [r7, #24]
 800611c:	e003      	b.n	8006126 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006122:	2300      	movs	r3, #0
 8006124:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800612e:	e02d      	b.n	800618c <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	9300      	str	r3, [sp, #0]
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	2200      	movs	r2, #0
 8006138:	2180      	movs	r1, #128	; 0x80
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f000 fb3b 	bl	80067b6 <UART_WaitOnFlagUntilTimeout>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d001      	beq.n	800614a <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e039      	b.n	80061be <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10b      	bne.n	8006168 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	881a      	ldrh	r2, [r3, #0]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800615c:	b292      	uxth	r2, r2
 800615e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	3302      	adds	r3, #2
 8006164:	61bb      	str	r3, [r7, #24]
 8006166:	e008      	b.n	800617a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	781a      	ldrb	r2, [r3, #0]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	b292      	uxth	r2, r2
 8006172:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	3301      	adds	r3, #1
 8006178:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006180:	b29b      	uxth	r3, r3
 8006182:	3b01      	subs	r3, #1
 8006184:	b29a      	uxth	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006192:	b29b      	uxth	r3, r3
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1cb      	bne.n	8006130 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	9300      	str	r3, [sp, #0]
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	2200      	movs	r2, #0
 80061a0:	2140      	movs	r1, #64	; 0x40
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f000 fb07 	bl	80067b6 <UART_WaitOnFlagUntilTimeout>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d001      	beq.n	80061b2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e005      	b.n	80061be <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2220      	movs	r2, #32
 80061b6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80061b8:	2300      	movs	r3, #0
 80061ba:	e000      	b.n	80061be <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80061bc:	2302      	movs	r3, #2
  }
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3720      	adds	r7, #32
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
	...

080061c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061c8:	b5b0      	push	{r4, r5, r7, lr}
 80061ca:	b088      	sub	sp, #32
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061d0:	2300      	movs	r3, #0
 80061d2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	689a      	ldr	r2, [r3, #8]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	431a      	orrs	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	431a      	orrs	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	69db      	ldr	r3, [r3, #28]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	4baf      	ldr	r3, [pc, #700]	; (80064b0 <UART_SetConfig+0x2e8>)
 80061f4:	4013      	ands	r3, r2
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	6812      	ldr	r2, [r2, #0]
 80061fa:	69f9      	ldr	r1, [r7, #28]
 80061fc:	430b      	orrs	r3, r1
 80061fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68da      	ldr	r2, [r3, #12]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	430a      	orrs	r2, r1
 8006214:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4aa4      	ldr	r2, [pc, #656]	; (80064b4 <UART_SetConfig+0x2ec>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d004      	beq.n	8006230 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	69fa      	ldr	r2, [r7, #28]
 800622c:	4313      	orrs	r3, r2
 800622e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	69fa      	ldr	r2, [r7, #28]
 8006240:	430a      	orrs	r2, r1
 8006242:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a9b      	ldr	r2, [pc, #620]	; (80064b8 <UART_SetConfig+0x2f0>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d121      	bne.n	8006292 <UART_SetConfig+0xca>
 800624e:	4b9b      	ldr	r3, [pc, #620]	; (80064bc <UART_SetConfig+0x2f4>)
 8006250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006254:	f003 0303 	and.w	r3, r3, #3
 8006258:	2b03      	cmp	r3, #3
 800625a:	d817      	bhi.n	800628c <UART_SetConfig+0xc4>
 800625c:	a201      	add	r2, pc, #4	; (adr r2, 8006264 <UART_SetConfig+0x9c>)
 800625e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006262:	bf00      	nop
 8006264:	08006275 	.word	0x08006275
 8006268:	08006281 	.word	0x08006281
 800626c:	0800627b 	.word	0x0800627b
 8006270:	08006287 	.word	0x08006287
 8006274:	2301      	movs	r3, #1
 8006276:	76fb      	strb	r3, [r7, #27]
 8006278:	e070      	b.n	800635c <UART_SetConfig+0x194>
 800627a:	2302      	movs	r3, #2
 800627c:	76fb      	strb	r3, [r7, #27]
 800627e:	e06d      	b.n	800635c <UART_SetConfig+0x194>
 8006280:	2304      	movs	r3, #4
 8006282:	76fb      	strb	r3, [r7, #27]
 8006284:	e06a      	b.n	800635c <UART_SetConfig+0x194>
 8006286:	2308      	movs	r3, #8
 8006288:	76fb      	strb	r3, [r7, #27]
 800628a:	e067      	b.n	800635c <UART_SetConfig+0x194>
 800628c:	2310      	movs	r3, #16
 800628e:	76fb      	strb	r3, [r7, #27]
 8006290:	e064      	b.n	800635c <UART_SetConfig+0x194>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a8a      	ldr	r2, [pc, #552]	; (80064c0 <UART_SetConfig+0x2f8>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d132      	bne.n	8006302 <UART_SetConfig+0x13a>
 800629c:	4b87      	ldr	r3, [pc, #540]	; (80064bc <UART_SetConfig+0x2f4>)
 800629e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a2:	f003 030c 	and.w	r3, r3, #12
 80062a6:	2b0c      	cmp	r3, #12
 80062a8:	d828      	bhi.n	80062fc <UART_SetConfig+0x134>
 80062aa:	a201      	add	r2, pc, #4	; (adr r2, 80062b0 <UART_SetConfig+0xe8>)
 80062ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b0:	080062e5 	.word	0x080062e5
 80062b4:	080062fd 	.word	0x080062fd
 80062b8:	080062fd 	.word	0x080062fd
 80062bc:	080062fd 	.word	0x080062fd
 80062c0:	080062f1 	.word	0x080062f1
 80062c4:	080062fd 	.word	0x080062fd
 80062c8:	080062fd 	.word	0x080062fd
 80062cc:	080062fd 	.word	0x080062fd
 80062d0:	080062eb 	.word	0x080062eb
 80062d4:	080062fd 	.word	0x080062fd
 80062d8:	080062fd 	.word	0x080062fd
 80062dc:	080062fd 	.word	0x080062fd
 80062e0:	080062f7 	.word	0x080062f7
 80062e4:	2300      	movs	r3, #0
 80062e6:	76fb      	strb	r3, [r7, #27]
 80062e8:	e038      	b.n	800635c <UART_SetConfig+0x194>
 80062ea:	2302      	movs	r3, #2
 80062ec:	76fb      	strb	r3, [r7, #27]
 80062ee:	e035      	b.n	800635c <UART_SetConfig+0x194>
 80062f0:	2304      	movs	r3, #4
 80062f2:	76fb      	strb	r3, [r7, #27]
 80062f4:	e032      	b.n	800635c <UART_SetConfig+0x194>
 80062f6:	2308      	movs	r3, #8
 80062f8:	76fb      	strb	r3, [r7, #27]
 80062fa:	e02f      	b.n	800635c <UART_SetConfig+0x194>
 80062fc:	2310      	movs	r3, #16
 80062fe:	76fb      	strb	r3, [r7, #27]
 8006300:	e02c      	b.n	800635c <UART_SetConfig+0x194>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a6b      	ldr	r2, [pc, #428]	; (80064b4 <UART_SetConfig+0x2ec>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d125      	bne.n	8006358 <UART_SetConfig+0x190>
 800630c:	4b6b      	ldr	r3, [pc, #428]	; (80064bc <UART_SetConfig+0x2f4>)
 800630e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006312:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006316:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800631a:	d017      	beq.n	800634c <UART_SetConfig+0x184>
 800631c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006320:	d817      	bhi.n	8006352 <UART_SetConfig+0x18a>
 8006322:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006326:	d00b      	beq.n	8006340 <UART_SetConfig+0x178>
 8006328:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800632c:	d811      	bhi.n	8006352 <UART_SetConfig+0x18a>
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <UART_SetConfig+0x172>
 8006332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006336:	d006      	beq.n	8006346 <UART_SetConfig+0x17e>
 8006338:	e00b      	b.n	8006352 <UART_SetConfig+0x18a>
 800633a:	2300      	movs	r3, #0
 800633c:	76fb      	strb	r3, [r7, #27]
 800633e:	e00d      	b.n	800635c <UART_SetConfig+0x194>
 8006340:	2302      	movs	r3, #2
 8006342:	76fb      	strb	r3, [r7, #27]
 8006344:	e00a      	b.n	800635c <UART_SetConfig+0x194>
 8006346:	2304      	movs	r3, #4
 8006348:	76fb      	strb	r3, [r7, #27]
 800634a:	e007      	b.n	800635c <UART_SetConfig+0x194>
 800634c:	2308      	movs	r3, #8
 800634e:	76fb      	strb	r3, [r7, #27]
 8006350:	e004      	b.n	800635c <UART_SetConfig+0x194>
 8006352:	2310      	movs	r3, #16
 8006354:	76fb      	strb	r3, [r7, #27]
 8006356:	e001      	b.n	800635c <UART_SetConfig+0x194>
 8006358:	2310      	movs	r3, #16
 800635a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a54      	ldr	r2, [pc, #336]	; (80064b4 <UART_SetConfig+0x2ec>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d173      	bne.n	800644e <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006366:	7efb      	ldrb	r3, [r7, #27]
 8006368:	2b08      	cmp	r3, #8
 800636a:	d824      	bhi.n	80063b6 <UART_SetConfig+0x1ee>
 800636c:	a201      	add	r2, pc, #4	; (adr r2, 8006374 <UART_SetConfig+0x1ac>)
 800636e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006372:	bf00      	nop
 8006374:	08006399 	.word	0x08006399
 8006378:	080063b7 	.word	0x080063b7
 800637c:	080063a1 	.word	0x080063a1
 8006380:	080063b7 	.word	0x080063b7
 8006384:	080063a7 	.word	0x080063a7
 8006388:	080063b7 	.word	0x080063b7
 800638c:	080063b7 	.word	0x080063b7
 8006390:	080063b7 	.word	0x080063b7
 8006394:	080063af 	.word	0x080063af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006398:	f7fe fb06 	bl	80049a8 <HAL_RCC_GetPCLK1Freq>
 800639c:	6178      	str	r0, [r7, #20]
        break;
 800639e:	e00f      	b.n	80063c0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063a0:	4b48      	ldr	r3, [pc, #288]	; (80064c4 <UART_SetConfig+0x2fc>)
 80063a2:	617b      	str	r3, [r7, #20]
        break;
 80063a4:	e00c      	b.n	80063c0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063a6:	f7fe fa67 	bl	8004878 <HAL_RCC_GetSysClockFreq>
 80063aa:	6178      	str	r0, [r7, #20]
        break;
 80063ac:	e008      	b.n	80063c0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063b2:	617b      	str	r3, [r7, #20]
        break;
 80063b4:	e004      	b.n	80063c0 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 80063b6:	2300      	movs	r3, #0
 80063b8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	76bb      	strb	r3, [r7, #26]
        break;
 80063be:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f000 80fe 	beq.w	80065c4 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685a      	ldr	r2, [r3, #4]
 80063cc:	4613      	mov	r3, r2
 80063ce:	005b      	lsls	r3, r3, #1
 80063d0:	4413      	add	r3, r2
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d305      	bcc.n	80063e4 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d902      	bls.n	80063ea <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	76bb      	strb	r3, [r7, #26]
 80063e8:	e0ec      	b.n	80065c4 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	4618      	mov	r0, r3
 80063ee:	f04f 0100 	mov.w	r1, #0
 80063f2:	f04f 0200 	mov.w	r2, #0
 80063f6:	f04f 0300 	mov.w	r3, #0
 80063fa:	020b      	lsls	r3, r1, #8
 80063fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006400:	0202      	lsls	r2, r0, #8
 8006402:	6879      	ldr	r1, [r7, #4]
 8006404:	6849      	ldr	r1, [r1, #4]
 8006406:	0849      	lsrs	r1, r1, #1
 8006408:	4608      	mov	r0, r1
 800640a:	f04f 0100 	mov.w	r1, #0
 800640e:	1814      	adds	r4, r2, r0
 8006410:	eb43 0501 	adc.w	r5, r3, r1
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	461a      	mov	r2, r3
 800641a:	f04f 0300 	mov.w	r3, #0
 800641e:	4620      	mov	r0, r4
 8006420:	4629      	mov	r1, r5
 8006422:	f7fa fb63 	bl	8000aec <__aeabi_uldivmod>
 8006426:	4602      	mov	r2, r0
 8006428:	460b      	mov	r3, r1
 800642a:	4613      	mov	r3, r2
 800642c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006434:	d308      	bcc.n	8006448 <UART_SetConfig+0x280>
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800643c:	d204      	bcs.n	8006448 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	60da      	str	r2, [r3, #12]
 8006446:	e0bd      	b.n	80065c4 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	76bb      	strb	r3, [r7, #26]
 800644c:	e0ba      	b.n	80065c4 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	69db      	ldr	r3, [r3, #28]
 8006452:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006456:	d168      	bne.n	800652a <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8006458:	7efb      	ldrb	r3, [r7, #27]
 800645a:	2b08      	cmp	r3, #8
 800645c:	d834      	bhi.n	80064c8 <UART_SetConfig+0x300>
 800645e:	a201      	add	r2, pc, #4	; (adr r2, 8006464 <UART_SetConfig+0x29c>)
 8006460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006464:	08006489 	.word	0x08006489
 8006468:	08006491 	.word	0x08006491
 800646c:	08006499 	.word	0x08006499
 8006470:	080064c9 	.word	0x080064c9
 8006474:	0800649f 	.word	0x0800649f
 8006478:	080064c9 	.word	0x080064c9
 800647c:	080064c9 	.word	0x080064c9
 8006480:	080064c9 	.word	0x080064c9
 8006484:	080064a7 	.word	0x080064a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006488:	f7fe fa8e 	bl	80049a8 <HAL_RCC_GetPCLK1Freq>
 800648c:	6178      	str	r0, [r7, #20]
        break;
 800648e:	e020      	b.n	80064d2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006490:	f7fe faa0 	bl	80049d4 <HAL_RCC_GetPCLK2Freq>
 8006494:	6178      	str	r0, [r7, #20]
        break;
 8006496:	e01c      	b.n	80064d2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006498:	4b0a      	ldr	r3, [pc, #40]	; (80064c4 <UART_SetConfig+0x2fc>)
 800649a:	617b      	str	r3, [r7, #20]
        break;
 800649c:	e019      	b.n	80064d2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800649e:	f7fe f9eb 	bl	8004878 <HAL_RCC_GetSysClockFreq>
 80064a2:	6178      	str	r0, [r7, #20]
        break;
 80064a4:	e015      	b.n	80064d2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064aa:	617b      	str	r3, [r7, #20]
        break;
 80064ac:	e011      	b.n	80064d2 <UART_SetConfig+0x30a>
 80064ae:	bf00      	nop
 80064b0:	efff69f3 	.word	0xefff69f3
 80064b4:	40008000 	.word	0x40008000
 80064b8:	40013800 	.word	0x40013800
 80064bc:	40021000 	.word	0x40021000
 80064c0:	40004400 	.word	0x40004400
 80064c4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80064c8:	2300      	movs	r3, #0
 80064ca:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	76bb      	strb	r3, [r7, #26]
        break;
 80064d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d075      	beq.n	80065c4 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	005a      	lsls	r2, r3, #1
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	085b      	lsrs	r3, r3, #1
 80064e2:	441a      	add	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	2b0f      	cmp	r3, #15
 80064f4:	d916      	bls.n	8006524 <UART_SetConfig+0x35c>
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064fc:	d212      	bcs.n	8006524 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	b29b      	uxth	r3, r3
 8006502:	f023 030f 	bic.w	r3, r3, #15
 8006506:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	085b      	lsrs	r3, r3, #1
 800650c:	b29b      	uxth	r3, r3
 800650e:	f003 0307 	and.w	r3, r3, #7
 8006512:	b29a      	uxth	r2, r3
 8006514:	89fb      	ldrh	r3, [r7, #14]
 8006516:	4313      	orrs	r3, r2
 8006518:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	89fa      	ldrh	r2, [r7, #14]
 8006520:	60da      	str	r2, [r3, #12]
 8006522:	e04f      	b.n	80065c4 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	76bb      	strb	r3, [r7, #26]
 8006528:	e04c      	b.n	80065c4 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800652a:	7efb      	ldrb	r3, [r7, #27]
 800652c:	2b08      	cmp	r3, #8
 800652e:	d828      	bhi.n	8006582 <UART_SetConfig+0x3ba>
 8006530:	a201      	add	r2, pc, #4	; (adr r2, 8006538 <UART_SetConfig+0x370>)
 8006532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006536:	bf00      	nop
 8006538:	0800655d 	.word	0x0800655d
 800653c:	08006565 	.word	0x08006565
 8006540:	0800656d 	.word	0x0800656d
 8006544:	08006583 	.word	0x08006583
 8006548:	08006573 	.word	0x08006573
 800654c:	08006583 	.word	0x08006583
 8006550:	08006583 	.word	0x08006583
 8006554:	08006583 	.word	0x08006583
 8006558:	0800657b 	.word	0x0800657b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800655c:	f7fe fa24 	bl	80049a8 <HAL_RCC_GetPCLK1Freq>
 8006560:	6178      	str	r0, [r7, #20]
        break;
 8006562:	e013      	b.n	800658c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006564:	f7fe fa36 	bl	80049d4 <HAL_RCC_GetPCLK2Freq>
 8006568:	6178      	str	r0, [r7, #20]
        break;
 800656a:	e00f      	b.n	800658c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800656c:	4b1b      	ldr	r3, [pc, #108]	; (80065dc <UART_SetConfig+0x414>)
 800656e:	617b      	str	r3, [r7, #20]
        break;
 8006570:	e00c      	b.n	800658c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006572:	f7fe f981 	bl	8004878 <HAL_RCC_GetSysClockFreq>
 8006576:	6178      	str	r0, [r7, #20]
        break;
 8006578:	e008      	b.n	800658c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800657a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800657e:	617b      	str	r3, [r7, #20]
        break;
 8006580:	e004      	b.n	800658c <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8006582:	2300      	movs	r3, #0
 8006584:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	76bb      	strb	r3, [r7, #26]
        break;
 800658a:	bf00      	nop
    }

    if (pclk != 0U)
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d018      	beq.n	80065c4 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	085a      	lsrs	r2, r3, #1
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	441a      	add	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	2b0f      	cmp	r3, #15
 80065ac:	d908      	bls.n	80065c0 <UART_SetConfig+0x3f8>
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065b4:	d204      	bcs.n	80065c0 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	693a      	ldr	r2, [r7, #16]
 80065bc:	60da      	str	r2, [r3, #12]
 80065be:	e001      	b.n	80065c4 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80065d0:	7ebb      	ldrb	r3, [r7, #26]
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3720      	adds	r7, #32
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bdb0      	pop	{r4, r5, r7, pc}
 80065da:	bf00      	nop
 80065dc:	00f42400 	.word	0x00f42400

080065e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ec:	f003 0301 	and.w	r3, r3, #1
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00a      	beq.n	800660a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	430a      	orrs	r2, r1
 8006608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660e:	f003 0302 	and.w	r3, r3, #2
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00a      	beq.n	800662c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	430a      	orrs	r2, r1
 800662a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006630:	f003 0304 	and.w	r3, r3, #4
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00a      	beq.n	800664e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	430a      	orrs	r2, r1
 800664c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006652:	f003 0308 	and.w	r3, r3, #8
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00a      	beq.n	8006670 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	430a      	orrs	r2, r1
 800666e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006674:	f003 0310 	and.w	r3, r3, #16
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00a      	beq.n	8006692 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	430a      	orrs	r2, r1
 8006690:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006696:	f003 0320 	and.w	r3, r3, #32
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00a      	beq.n	80066b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	430a      	orrs	r2, r1
 80066b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d01a      	beq.n	80066f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	430a      	orrs	r2, r1
 80066d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066de:	d10a      	bne.n	80066f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	430a      	orrs	r2, r1
 80066f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00a      	beq.n	8006718 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	430a      	orrs	r2, r1
 8006716:	605a      	str	r2, [r3, #4]
  }
}
 8006718:	bf00      	nop
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	af02      	add	r7, sp, #8
 800672a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006734:	f7fb fdfc 	bl	8002330 <HAL_GetTick>
 8006738:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0308 	and.w	r3, r3, #8
 8006744:	2b08      	cmp	r3, #8
 8006746:	d10e      	bne.n	8006766 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006748:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800674c:	9300      	str	r3, [sp, #0]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f82d 	bl	80067b6 <UART_WaitOnFlagUntilTimeout>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d001      	beq.n	8006766 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e023      	b.n	80067ae <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0304 	and.w	r3, r3, #4
 8006770:	2b04      	cmp	r3, #4
 8006772:	d10e      	bne.n	8006792 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006774:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006778:	9300      	str	r3, [sp, #0]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f817 	bl	80067b6 <UART_WaitOnFlagUntilTimeout>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d001      	beq.n	8006792 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e00d      	b.n	80067ae <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2220      	movs	r2, #32
 8006796:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2220      	movs	r2, #32
 800679c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b084      	sub	sp, #16
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	60f8      	str	r0, [r7, #12]
 80067be:	60b9      	str	r1, [r7, #8]
 80067c0:	603b      	str	r3, [r7, #0]
 80067c2:	4613      	mov	r3, r2
 80067c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067c6:	e05e      	b.n	8006886 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ce:	d05a      	beq.n	8006886 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067d0:	f7fb fdae 	bl	8002330 <HAL_GetTick>
 80067d4:	4602      	mov	r2, r0
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	69ba      	ldr	r2, [r7, #24]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d302      	bcc.n	80067e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d11b      	bne.n	800681e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80067f4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	689a      	ldr	r2, [r3, #8]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f022 0201 	bic.w	r2, r2, #1
 8006804:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2220      	movs	r2, #32
 800680a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2220      	movs	r2, #32
 8006810:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e043      	b.n	80068a6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 0304 	and.w	r3, r3, #4
 8006828:	2b00      	cmp	r3, #0
 800682a:	d02c      	beq.n	8006886 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	69db      	ldr	r3, [r3, #28]
 8006832:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006836:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800683a:	d124      	bne.n	8006886 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006844:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006854:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	689a      	ldr	r2, [r3, #8]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f022 0201 	bic.w	r2, r2, #1
 8006864:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2220      	movs	r2, #32
 800686a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2220      	movs	r2, #32
 8006870:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2220      	movs	r2, #32
 8006876:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e00f      	b.n	80068a6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	69da      	ldr	r2, [r3, #28]
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	4013      	ands	r3, r2
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	429a      	cmp	r2, r3
 8006894:	bf0c      	ite	eq
 8006896:	2301      	moveq	r3, #1
 8006898:	2300      	movne	r3, #0
 800689a:	b2db      	uxtb	r3, r3
 800689c:	461a      	mov	r2, r3
 800689e:	79fb      	ldrb	r3, [r7, #7]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d091      	beq.n	80067c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
	...

080068b0 <__errno>:
 80068b0:	4b01      	ldr	r3, [pc, #4]	; (80068b8 <__errno+0x8>)
 80068b2:	6818      	ldr	r0, [r3, #0]
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	20000010 	.word	0x20000010

080068bc <__libc_init_array>:
 80068bc:	b570      	push	{r4, r5, r6, lr}
 80068be:	4d0d      	ldr	r5, [pc, #52]	; (80068f4 <__libc_init_array+0x38>)
 80068c0:	4c0d      	ldr	r4, [pc, #52]	; (80068f8 <__libc_init_array+0x3c>)
 80068c2:	1b64      	subs	r4, r4, r5
 80068c4:	10a4      	asrs	r4, r4, #2
 80068c6:	2600      	movs	r6, #0
 80068c8:	42a6      	cmp	r6, r4
 80068ca:	d109      	bne.n	80068e0 <__libc_init_array+0x24>
 80068cc:	4d0b      	ldr	r5, [pc, #44]	; (80068fc <__libc_init_array+0x40>)
 80068ce:	4c0c      	ldr	r4, [pc, #48]	; (8006900 <__libc_init_array+0x44>)
 80068d0:	f000 fc4e 	bl	8007170 <_init>
 80068d4:	1b64      	subs	r4, r4, r5
 80068d6:	10a4      	asrs	r4, r4, #2
 80068d8:	2600      	movs	r6, #0
 80068da:	42a6      	cmp	r6, r4
 80068dc:	d105      	bne.n	80068ea <__libc_init_array+0x2e>
 80068de:	bd70      	pop	{r4, r5, r6, pc}
 80068e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80068e4:	4798      	blx	r3
 80068e6:	3601      	adds	r6, #1
 80068e8:	e7ee      	b.n	80068c8 <__libc_init_array+0xc>
 80068ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80068ee:	4798      	blx	r3
 80068f0:	3601      	adds	r6, #1
 80068f2:	e7f2      	b.n	80068da <__libc_init_array+0x1e>
 80068f4:	08007224 	.word	0x08007224
 80068f8:	08007224 	.word	0x08007224
 80068fc:	08007224 	.word	0x08007224
 8006900:	08007228 	.word	0x08007228

08006904 <memset>:
 8006904:	4402      	add	r2, r0
 8006906:	4603      	mov	r3, r0
 8006908:	4293      	cmp	r3, r2
 800690a:	d100      	bne.n	800690e <memset+0xa>
 800690c:	4770      	bx	lr
 800690e:	f803 1b01 	strb.w	r1, [r3], #1
 8006912:	e7f9      	b.n	8006908 <memset+0x4>

08006914 <siprintf>:
 8006914:	b40e      	push	{r1, r2, r3}
 8006916:	b500      	push	{lr}
 8006918:	b09c      	sub	sp, #112	; 0x70
 800691a:	ab1d      	add	r3, sp, #116	; 0x74
 800691c:	9002      	str	r0, [sp, #8]
 800691e:	9006      	str	r0, [sp, #24]
 8006920:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006924:	4809      	ldr	r0, [pc, #36]	; (800694c <siprintf+0x38>)
 8006926:	9107      	str	r1, [sp, #28]
 8006928:	9104      	str	r1, [sp, #16]
 800692a:	4909      	ldr	r1, [pc, #36]	; (8006950 <siprintf+0x3c>)
 800692c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006930:	9105      	str	r1, [sp, #20]
 8006932:	6800      	ldr	r0, [r0, #0]
 8006934:	9301      	str	r3, [sp, #4]
 8006936:	a902      	add	r1, sp, #8
 8006938:	f000 f868 	bl	8006a0c <_svfiprintf_r>
 800693c:	9b02      	ldr	r3, [sp, #8]
 800693e:	2200      	movs	r2, #0
 8006940:	701a      	strb	r2, [r3, #0]
 8006942:	b01c      	add	sp, #112	; 0x70
 8006944:	f85d eb04 	ldr.w	lr, [sp], #4
 8006948:	b003      	add	sp, #12
 800694a:	4770      	bx	lr
 800694c:	20000010 	.word	0x20000010
 8006950:	ffff0208 	.word	0xffff0208

08006954 <__ssputs_r>:
 8006954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006958:	688e      	ldr	r6, [r1, #8]
 800695a:	429e      	cmp	r6, r3
 800695c:	4682      	mov	sl, r0
 800695e:	460c      	mov	r4, r1
 8006960:	4690      	mov	r8, r2
 8006962:	461f      	mov	r7, r3
 8006964:	d838      	bhi.n	80069d8 <__ssputs_r+0x84>
 8006966:	898a      	ldrh	r2, [r1, #12]
 8006968:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800696c:	d032      	beq.n	80069d4 <__ssputs_r+0x80>
 800696e:	6825      	ldr	r5, [r4, #0]
 8006970:	6909      	ldr	r1, [r1, #16]
 8006972:	eba5 0901 	sub.w	r9, r5, r1
 8006976:	6965      	ldr	r5, [r4, #20]
 8006978:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800697c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006980:	3301      	adds	r3, #1
 8006982:	444b      	add	r3, r9
 8006984:	106d      	asrs	r5, r5, #1
 8006986:	429d      	cmp	r5, r3
 8006988:	bf38      	it	cc
 800698a:	461d      	movcc	r5, r3
 800698c:	0553      	lsls	r3, r2, #21
 800698e:	d531      	bpl.n	80069f4 <__ssputs_r+0xa0>
 8006990:	4629      	mov	r1, r5
 8006992:	f000 fb47 	bl	8007024 <_malloc_r>
 8006996:	4606      	mov	r6, r0
 8006998:	b950      	cbnz	r0, 80069b0 <__ssputs_r+0x5c>
 800699a:	230c      	movs	r3, #12
 800699c:	f8ca 3000 	str.w	r3, [sl]
 80069a0:	89a3      	ldrh	r3, [r4, #12]
 80069a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069a6:	81a3      	strh	r3, [r4, #12]
 80069a8:	f04f 30ff 	mov.w	r0, #4294967295
 80069ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069b0:	6921      	ldr	r1, [r4, #16]
 80069b2:	464a      	mov	r2, r9
 80069b4:	f000 fabe 	bl	8006f34 <memcpy>
 80069b8:	89a3      	ldrh	r3, [r4, #12]
 80069ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80069be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069c2:	81a3      	strh	r3, [r4, #12]
 80069c4:	6126      	str	r6, [r4, #16]
 80069c6:	6165      	str	r5, [r4, #20]
 80069c8:	444e      	add	r6, r9
 80069ca:	eba5 0509 	sub.w	r5, r5, r9
 80069ce:	6026      	str	r6, [r4, #0]
 80069d0:	60a5      	str	r5, [r4, #8]
 80069d2:	463e      	mov	r6, r7
 80069d4:	42be      	cmp	r6, r7
 80069d6:	d900      	bls.n	80069da <__ssputs_r+0x86>
 80069d8:	463e      	mov	r6, r7
 80069da:	4632      	mov	r2, r6
 80069dc:	6820      	ldr	r0, [r4, #0]
 80069de:	4641      	mov	r1, r8
 80069e0:	f000 fab6 	bl	8006f50 <memmove>
 80069e4:	68a3      	ldr	r3, [r4, #8]
 80069e6:	6822      	ldr	r2, [r4, #0]
 80069e8:	1b9b      	subs	r3, r3, r6
 80069ea:	4432      	add	r2, r6
 80069ec:	60a3      	str	r3, [r4, #8]
 80069ee:	6022      	str	r2, [r4, #0]
 80069f0:	2000      	movs	r0, #0
 80069f2:	e7db      	b.n	80069ac <__ssputs_r+0x58>
 80069f4:	462a      	mov	r2, r5
 80069f6:	f000 fb6f 	bl	80070d8 <_realloc_r>
 80069fa:	4606      	mov	r6, r0
 80069fc:	2800      	cmp	r0, #0
 80069fe:	d1e1      	bne.n	80069c4 <__ssputs_r+0x70>
 8006a00:	6921      	ldr	r1, [r4, #16]
 8006a02:	4650      	mov	r0, sl
 8006a04:	f000 fabe 	bl	8006f84 <_free_r>
 8006a08:	e7c7      	b.n	800699a <__ssputs_r+0x46>
	...

08006a0c <_svfiprintf_r>:
 8006a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a10:	4698      	mov	r8, r3
 8006a12:	898b      	ldrh	r3, [r1, #12]
 8006a14:	061b      	lsls	r3, r3, #24
 8006a16:	b09d      	sub	sp, #116	; 0x74
 8006a18:	4607      	mov	r7, r0
 8006a1a:	460d      	mov	r5, r1
 8006a1c:	4614      	mov	r4, r2
 8006a1e:	d50e      	bpl.n	8006a3e <_svfiprintf_r+0x32>
 8006a20:	690b      	ldr	r3, [r1, #16]
 8006a22:	b963      	cbnz	r3, 8006a3e <_svfiprintf_r+0x32>
 8006a24:	2140      	movs	r1, #64	; 0x40
 8006a26:	f000 fafd 	bl	8007024 <_malloc_r>
 8006a2a:	6028      	str	r0, [r5, #0]
 8006a2c:	6128      	str	r0, [r5, #16]
 8006a2e:	b920      	cbnz	r0, 8006a3a <_svfiprintf_r+0x2e>
 8006a30:	230c      	movs	r3, #12
 8006a32:	603b      	str	r3, [r7, #0]
 8006a34:	f04f 30ff 	mov.w	r0, #4294967295
 8006a38:	e0d1      	b.n	8006bde <_svfiprintf_r+0x1d2>
 8006a3a:	2340      	movs	r3, #64	; 0x40
 8006a3c:	616b      	str	r3, [r5, #20]
 8006a3e:	2300      	movs	r3, #0
 8006a40:	9309      	str	r3, [sp, #36]	; 0x24
 8006a42:	2320      	movs	r3, #32
 8006a44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a48:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a4c:	2330      	movs	r3, #48	; 0x30
 8006a4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006bf8 <_svfiprintf_r+0x1ec>
 8006a52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a56:	f04f 0901 	mov.w	r9, #1
 8006a5a:	4623      	mov	r3, r4
 8006a5c:	469a      	mov	sl, r3
 8006a5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a62:	b10a      	cbz	r2, 8006a68 <_svfiprintf_r+0x5c>
 8006a64:	2a25      	cmp	r2, #37	; 0x25
 8006a66:	d1f9      	bne.n	8006a5c <_svfiprintf_r+0x50>
 8006a68:	ebba 0b04 	subs.w	fp, sl, r4
 8006a6c:	d00b      	beq.n	8006a86 <_svfiprintf_r+0x7a>
 8006a6e:	465b      	mov	r3, fp
 8006a70:	4622      	mov	r2, r4
 8006a72:	4629      	mov	r1, r5
 8006a74:	4638      	mov	r0, r7
 8006a76:	f7ff ff6d 	bl	8006954 <__ssputs_r>
 8006a7a:	3001      	adds	r0, #1
 8006a7c:	f000 80aa 	beq.w	8006bd4 <_svfiprintf_r+0x1c8>
 8006a80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a82:	445a      	add	r2, fp
 8006a84:	9209      	str	r2, [sp, #36]	; 0x24
 8006a86:	f89a 3000 	ldrb.w	r3, [sl]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f000 80a2 	beq.w	8006bd4 <_svfiprintf_r+0x1c8>
 8006a90:	2300      	movs	r3, #0
 8006a92:	f04f 32ff 	mov.w	r2, #4294967295
 8006a96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a9a:	f10a 0a01 	add.w	sl, sl, #1
 8006a9e:	9304      	str	r3, [sp, #16]
 8006aa0:	9307      	str	r3, [sp, #28]
 8006aa2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006aa6:	931a      	str	r3, [sp, #104]	; 0x68
 8006aa8:	4654      	mov	r4, sl
 8006aaa:	2205      	movs	r2, #5
 8006aac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ab0:	4851      	ldr	r0, [pc, #324]	; (8006bf8 <_svfiprintf_r+0x1ec>)
 8006ab2:	f7f9 fb8d 	bl	80001d0 <memchr>
 8006ab6:	9a04      	ldr	r2, [sp, #16]
 8006ab8:	b9d8      	cbnz	r0, 8006af2 <_svfiprintf_r+0xe6>
 8006aba:	06d0      	lsls	r0, r2, #27
 8006abc:	bf44      	itt	mi
 8006abe:	2320      	movmi	r3, #32
 8006ac0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ac4:	0711      	lsls	r1, r2, #28
 8006ac6:	bf44      	itt	mi
 8006ac8:	232b      	movmi	r3, #43	; 0x2b
 8006aca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ace:	f89a 3000 	ldrb.w	r3, [sl]
 8006ad2:	2b2a      	cmp	r3, #42	; 0x2a
 8006ad4:	d015      	beq.n	8006b02 <_svfiprintf_r+0xf6>
 8006ad6:	9a07      	ldr	r2, [sp, #28]
 8006ad8:	4654      	mov	r4, sl
 8006ada:	2000      	movs	r0, #0
 8006adc:	f04f 0c0a 	mov.w	ip, #10
 8006ae0:	4621      	mov	r1, r4
 8006ae2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ae6:	3b30      	subs	r3, #48	; 0x30
 8006ae8:	2b09      	cmp	r3, #9
 8006aea:	d94e      	bls.n	8006b8a <_svfiprintf_r+0x17e>
 8006aec:	b1b0      	cbz	r0, 8006b1c <_svfiprintf_r+0x110>
 8006aee:	9207      	str	r2, [sp, #28]
 8006af0:	e014      	b.n	8006b1c <_svfiprintf_r+0x110>
 8006af2:	eba0 0308 	sub.w	r3, r0, r8
 8006af6:	fa09 f303 	lsl.w	r3, r9, r3
 8006afa:	4313      	orrs	r3, r2
 8006afc:	9304      	str	r3, [sp, #16]
 8006afe:	46a2      	mov	sl, r4
 8006b00:	e7d2      	b.n	8006aa8 <_svfiprintf_r+0x9c>
 8006b02:	9b03      	ldr	r3, [sp, #12]
 8006b04:	1d19      	adds	r1, r3, #4
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	9103      	str	r1, [sp, #12]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	bfbb      	ittet	lt
 8006b0e:	425b      	neglt	r3, r3
 8006b10:	f042 0202 	orrlt.w	r2, r2, #2
 8006b14:	9307      	strge	r3, [sp, #28]
 8006b16:	9307      	strlt	r3, [sp, #28]
 8006b18:	bfb8      	it	lt
 8006b1a:	9204      	strlt	r2, [sp, #16]
 8006b1c:	7823      	ldrb	r3, [r4, #0]
 8006b1e:	2b2e      	cmp	r3, #46	; 0x2e
 8006b20:	d10c      	bne.n	8006b3c <_svfiprintf_r+0x130>
 8006b22:	7863      	ldrb	r3, [r4, #1]
 8006b24:	2b2a      	cmp	r3, #42	; 0x2a
 8006b26:	d135      	bne.n	8006b94 <_svfiprintf_r+0x188>
 8006b28:	9b03      	ldr	r3, [sp, #12]
 8006b2a:	1d1a      	adds	r2, r3, #4
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	9203      	str	r2, [sp, #12]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	bfb8      	it	lt
 8006b34:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b38:	3402      	adds	r4, #2
 8006b3a:	9305      	str	r3, [sp, #20]
 8006b3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006c08 <_svfiprintf_r+0x1fc>
 8006b40:	7821      	ldrb	r1, [r4, #0]
 8006b42:	2203      	movs	r2, #3
 8006b44:	4650      	mov	r0, sl
 8006b46:	f7f9 fb43 	bl	80001d0 <memchr>
 8006b4a:	b140      	cbz	r0, 8006b5e <_svfiprintf_r+0x152>
 8006b4c:	2340      	movs	r3, #64	; 0x40
 8006b4e:	eba0 000a 	sub.w	r0, r0, sl
 8006b52:	fa03 f000 	lsl.w	r0, r3, r0
 8006b56:	9b04      	ldr	r3, [sp, #16]
 8006b58:	4303      	orrs	r3, r0
 8006b5a:	3401      	adds	r4, #1
 8006b5c:	9304      	str	r3, [sp, #16]
 8006b5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b62:	4826      	ldr	r0, [pc, #152]	; (8006bfc <_svfiprintf_r+0x1f0>)
 8006b64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b68:	2206      	movs	r2, #6
 8006b6a:	f7f9 fb31 	bl	80001d0 <memchr>
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	d038      	beq.n	8006be4 <_svfiprintf_r+0x1d8>
 8006b72:	4b23      	ldr	r3, [pc, #140]	; (8006c00 <_svfiprintf_r+0x1f4>)
 8006b74:	bb1b      	cbnz	r3, 8006bbe <_svfiprintf_r+0x1b2>
 8006b76:	9b03      	ldr	r3, [sp, #12]
 8006b78:	3307      	adds	r3, #7
 8006b7a:	f023 0307 	bic.w	r3, r3, #7
 8006b7e:	3308      	adds	r3, #8
 8006b80:	9303      	str	r3, [sp, #12]
 8006b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b84:	4433      	add	r3, r6
 8006b86:	9309      	str	r3, [sp, #36]	; 0x24
 8006b88:	e767      	b.n	8006a5a <_svfiprintf_r+0x4e>
 8006b8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b8e:	460c      	mov	r4, r1
 8006b90:	2001      	movs	r0, #1
 8006b92:	e7a5      	b.n	8006ae0 <_svfiprintf_r+0xd4>
 8006b94:	2300      	movs	r3, #0
 8006b96:	3401      	adds	r4, #1
 8006b98:	9305      	str	r3, [sp, #20]
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	f04f 0c0a 	mov.w	ip, #10
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ba6:	3a30      	subs	r2, #48	; 0x30
 8006ba8:	2a09      	cmp	r2, #9
 8006baa:	d903      	bls.n	8006bb4 <_svfiprintf_r+0x1a8>
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d0c5      	beq.n	8006b3c <_svfiprintf_r+0x130>
 8006bb0:	9105      	str	r1, [sp, #20]
 8006bb2:	e7c3      	b.n	8006b3c <_svfiprintf_r+0x130>
 8006bb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bb8:	4604      	mov	r4, r0
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e7f0      	b.n	8006ba0 <_svfiprintf_r+0x194>
 8006bbe:	ab03      	add	r3, sp, #12
 8006bc0:	9300      	str	r3, [sp, #0]
 8006bc2:	462a      	mov	r2, r5
 8006bc4:	4b0f      	ldr	r3, [pc, #60]	; (8006c04 <_svfiprintf_r+0x1f8>)
 8006bc6:	a904      	add	r1, sp, #16
 8006bc8:	4638      	mov	r0, r7
 8006bca:	f3af 8000 	nop.w
 8006bce:	1c42      	adds	r2, r0, #1
 8006bd0:	4606      	mov	r6, r0
 8006bd2:	d1d6      	bne.n	8006b82 <_svfiprintf_r+0x176>
 8006bd4:	89ab      	ldrh	r3, [r5, #12]
 8006bd6:	065b      	lsls	r3, r3, #25
 8006bd8:	f53f af2c 	bmi.w	8006a34 <_svfiprintf_r+0x28>
 8006bdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bde:	b01d      	add	sp, #116	; 0x74
 8006be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006be4:	ab03      	add	r3, sp, #12
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	462a      	mov	r2, r5
 8006bea:	4b06      	ldr	r3, [pc, #24]	; (8006c04 <_svfiprintf_r+0x1f8>)
 8006bec:	a904      	add	r1, sp, #16
 8006bee:	4638      	mov	r0, r7
 8006bf0:	f000 f87a 	bl	8006ce8 <_printf_i>
 8006bf4:	e7eb      	b.n	8006bce <_svfiprintf_r+0x1c2>
 8006bf6:	bf00      	nop
 8006bf8:	080071e8 	.word	0x080071e8
 8006bfc:	080071f2 	.word	0x080071f2
 8006c00:	00000000 	.word	0x00000000
 8006c04:	08006955 	.word	0x08006955
 8006c08:	080071ee 	.word	0x080071ee

08006c0c <_printf_common>:
 8006c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c10:	4616      	mov	r6, r2
 8006c12:	4699      	mov	r9, r3
 8006c14:	688a      	ldr	r2, [r1, #8]
 8006c16:	690b      	ldr	r3, [r1, #16]
 8006c18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	bfb8      	it	lt
 8006c20:	4613      	movlt	r3, r2
 8006c22:	6033      	str	r3, [r6, #0]
 8006c24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c28:	4607      	mov	r7, r0
 8006c2a:	460c      	mov	r4, r1
 8006c2c:	b10a      	cbz	r2, 8006c32 <_printf_common+0x26>
 8006c2e:	3301      	adds	r3, #1
 8006c30:	6033      	str	r3, [r6, #0]
 8006c32:	6823      	ldr	r3, [r4, #0]
 8006c34:	0699      	lsls	r1, r3, #26
 8006c36:	bf42      	ittt	mi
 8006c38:	6833      	ldrmi	r3, [r6, #0]
 8006c3a:	3302      	addmi	r3, #2
 8006c3c:	6033      	strmi	r3, [r6, #0]
 8006c3e:	6825      	ldr	r5, [r4, #0]
 8006c40:	f015 0506 	ands.w	r5, r5, #6
 8006c44:	d106      	bne.n	8006c54 <_printf_common+0x48>
 8006c46:	f104 0a19 	add.w	sl, r4, #25
 8006c4a:	68e3      	ldr	r3, [r4, #12]
 8006c4c:	6832      	ldr	r2, [r6, #0]
 8006c4e:	1a9b      	subs	r3, r3, r2
 8006c50:	42ab      	cmp	r3, r5
 8006c52:	dc26      	bgt.n	8006ca2 <_printf_common+0x96>
 8006c54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c58:	1e13      	subs	r3, r2, #0
 8006c5a:	6822      	ldr	r2, [r4, #0]
 8006c5c:	bf18      	it	ne
 8006c5e:	2301      	movne	r3, #1
 8006c60:	0692      	lsls	r2, r2, #26
 8006c62:	d42b      	bmi.n	8006cbc <_printf_common+0xb0>
 8006c64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c68:	4649      	mov	r1, r9
 8006c6a:	4638      	mov	r0, r7
 8006c6c:	47c0      	blx	r8
 8006c6e:	3001      	adds	r0, #1
 8006c70:	d01e      	beq.n	8006cb0 <_printf_common+0xa4>
 8006c72:	6823      	ldr	r3, [r4, #0]
 8006c74:	68e5      	ldr	r5, [r4, #12]
 8006c76:	6832      	ldr	r2, [r6, #0]
 8006c78:	f003 0306 	and.w	r3, r3, #6
 8006c7c:	2b04      	cmp	r3, #4
 8006c7e:	bf08      	it	eq
 8006c80:	1aad      	subeq	r5, r5, r2
 8006c82:	68a3      	ldr	r3, [r4, #8]
 8006c84:	6922      	ldr	r2, [r4, #16]
 8006c86:	bf0c      	ite	eq
 8006c88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c8c:	2500      	movne	r5, #0
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	bfc4      	itt	gt
 8006c92:	1a9b      	subgt	r3, r3, r2
 8006c94:	18ed      	addgt	r5, r5, r3
 8006c96:	2600      	movs	r6, #0
 8006c98:	341a      	adds	r4, #26
 8006c9a:	42b5      	cmp	r5, r6
 8006c9c:	d11a      	bne.n	8006cd4 <_printf_common+0xc8>
 8006c9e:	2000      	movs	r0, #0
 8006ca0:	e008      	b.n	8006cb4 <_printf_common+0xa8>
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	4652      	mov	r2, sl
 8006ca6:	4649      	mov	r1, r9
 8006ca8:	4638      	mov	r0, r7
 8006caa:	47c0      	blx	r8
 8006cac:	3001      	adds	r0, #1
 8006cae:	d103      	bne.n	8006cb8 <_printf_common+0xac>
 8006cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cb8:	3501      	adds	r5, #1
 8006cba:	e7c6      	b.n	8006c4a <_printf_common+0x3e>
 8006cbc:	18e1      	adds	r1, r4, r3
 8006cbe:	1c5a      	adds	r2, r3, #1
 8006cc0:	2030      	movs	r0, #48	; 0x30
 8006cc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006cc6:	4422      	add	r2, r4
 8006cc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ccc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006cd0:	3302      	adds	r3, #2
 8006cd2:	e7c7      	b.n	8006c64 <_printf_common+0x58>
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	4622      	mov	r2, r4
 8006cd8:	4649      	mov	r1, r9
 8006cda:	4638      	mov	r0, r7
 8006cdc:	47c0      	blx	r8
 8006cde:	3001      	adds	r0, #1
 8006ce0:	d0e6      	beq.n	8006cb0 <_printf_common+0xa4>
 8006ce2:	3601      	adds	r6, #1
 8006ce4:	e7d9      	b.n	8006c9a <_printf_common+0x8e>
	...

08006ce8 <_printf_i>:
 8006ce8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cec:	460c      	mov	r4, r1
 8006cee:	4691      	mov	r9, r2
 8006cf0:	7e27      	ldrb	r7, [r4, #24]
 8006cf2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006cf4:	2f78      	cmp	r7, #120	; 0x78
 8006cf6:	4680      	mov	r8, r0
 8006cf8:	469a      	mov	sl, r3
 8006cfa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006cfe:	d807      	bhi.n	8006d10 <_printf_i+0x28>
 8006d00:	2f62      	cmp	r7, #98	; 0x62
 8006d02:	d80a      	bhi.n	8006d1a <_printf_i+0x32>
 8006d04:	2f00      	cmp	r7, #0
 8006d06:	f000 80d8 	beq.w	8006eba <_printf_i+0x1d2>
 8006d0a:	2f58      	cmp	r7, #88	; 0x58
 8006d0c:	f000 80a3 	beq.w	8006e56 <_printf_i+0x16e>
 8006d10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006d14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d18:	e03a      	b.n	8006d90 <_printf_i+0xa8>
 8006d1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d1e:	2b15      	cmp	r3, #21
 8006d20:	d8f6      	bhi.n	8006d10 <_printf_i+0x28>
 8006d22:	a001      	add	r0, pc, #4	; (adr r0, 8006d28 <_printf_i+0x40>)
 8006d24:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006d28:	08006d81 	.word	0x08006d81
 8006d2c:	08006d95 	.word	0x08006d95
 8006d30:	08006d11 	.word	0x08006d11
 8006d34:	08006d11 	.word	0x08006d11
 8006d38:	08006d11 	.word	0x08006d11
 8006d3c:	08006d11 	.word	0x08006d11
 8006d40:	08006d95 	.word	0x08006d95
 8006d44:	08006d11 	.word	0x08006d11
 8006d48:	08006d11 	.word	0x08006d11
 8006d4c:	08006d11 	.word	0x08006d11
 8006d50:	08006d11 	.word	0x08006d11
 8006d54:	08006ea1 	.word	0x08006ea1
 8006d58:	08006dc5 	.word	0x08006dc5
 8006d5c:	08006e83 	.word	0x08006e83
 8006d60:	08006d11 	.word	0x08006d11
 8006d64:	08006d11 	.word	0x08006d11
 8006d68:	08006ec3 	.word	0x08006ec3
 8006d6c:	08006d11 	.word	0x08006d11
 8006d70:	08006dc5 	.word	0x08006dc5
 8006d74:	08006d11 	.word	0x08006d11
 8006d78:	08006d11 	.word	0x08006d11
 8006d7c:	08006e8b 	.word	0x08006e8b
 8006d80:	680b      	ldr	r3, [r1, #0]
 8006d82:	1d1a      	adds	r2, r3, #4
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	600a      	str	r2, [r1, #0]
 8006d88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006d8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d90:	2301      	movs	r3, #1
 8006d92:	e0a3      	b.n	8006edc <_printf_i+0x1f4>
 8006d94:	6825      	ldr	r5, [r4, #0]
 8006d96:	6808      	ldr	r0, [r1, #0]
 8006d98:	062e      	lsls	r6, r5, #24
 8006d9a:	f100 0304 	add.w	r3, r0, #4
 8006d9e:	d50a      	bpl.n	8006db6 <_printf_i+0xce>
 8006da0:	6805      	ldr	r5, [r0, #0]
 8006da2:	600b      	str	r3, [r1, #0]
 8006da4:	2d00      	cmp	r5, #0
 8006da6:	da03      	bge.n	8006db0 <_printf_i+0xc8>
 8006da8:	232d      	movs	r3, #45	; 0x2d
 8006daa:	426d      	negs	r5, r5
 8006dac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006db0:	485e      	ldr	r0, [pc, #376]	; (8006f2c <_printf_i+0x244>)
 8006db2:	230a      	movs	r3, #10
 8006db4:	e019      	b.n	8006dea <_printf_i+0x102>
 8006db6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006dba:	6805      	ldr	r5, [r0, #0]
 8006dbc:	600b      	str	r3, [r1, #0]
 8006dbe:	bf18      	it	ne
 8006dc0:	b22d      	sxthne	r5, r5
 8006dc2:	e7ef      	b.n	8006da4 <_printf_i+0xbc>
 8006dc4:	680b      	ldr	r3, [r1, #0]
 8006dc6:	6825      	ldr	r5, [r4, #0]
 8006dc8:	1d18      	adds	r0, r3, #4
 8006dca:	6008      	str	r0, [r1, #0]
 8006dcc:	0628      	lsls	r0, r5, #24
 8006dce:	d501      	bpl.n	8006dd4 <_printf_i+0xec>
 8006dd0:	681d      	ldr	r5, [r3, #0]
 8006dd2:	e002      	b.n	8006dda <_printf_i+0xf2>
 8006dd4:	0669      	lsls	r1, r5, #25
 8006dd6:	d5fb      	bpl.n	8006dd0 <_printf_i+0xe8>
 8006dd8:	881d      	ldrh	r5, [r3, #0]
 8006dda:	4854      	ldr	r0, [pc, #336]	; (8006f2c <_printf_i+0x244>)
 8006ddc:	2f6f      	cmp	r7, #111	; 0x6f
 8006dde:	bf0c      	ite	eq
 8006de0:	2308      	moveq	r3, #8
 8006de2:	230a      	movne	r3, #10
 8006de4:	2100      	movs	r1, #0
 8006de6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006dea:	6866      	ldr	r6, [r4, #4]
 8006dec:	60a6      	str	r6, [r4, #8]
 8006dee:	2e00      	cmp	r6, #0
 8006df0:	bfa2      	ittt	ge
 8006df2:	6821      	ldrge	r1, [r4, #0]
 8006df4:	f021 0104 	bicge.w	r1, r1, #4
 8006df8:	6021      	strge	r1, [r4, #0]
 8006dfa:	b90d      	cbnz	r5, 8006e00 <_printf_i+0x118>
 8006dfc:	2e00      	cmp	r6, #0
 8006dfe:	d04d      	beq.n	8006e9c <_printf_i+0x1b4>
 8006e00:	4616      	mov	r6, r2
 8006e02:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e06:	fb03 5711 	mls	r7, r3, r1, r5
 8006e0a:	5dc7      	ldrb	r7, [r0, r7]
 8006e0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e10:	462f      	mov	r7, r5
 8006e12:	42bb      	cmp	r3, r7
 8006e14:	460d      	mov	r5, r1
 8006e16:	d9f4      	bls.n	8006e02 <_printf_i+0x11a>
 8006e18:	2b08      	cmp	r3, #8
 8006e1a:	d10b      	bne.n	8006e34 <_printf_i+0x14c>
 8006e1c:	6823      	ldr	r3, [r4, #0]
 8006e1e:	07df      	lsls	r7, r3, #31
 8006e20:	d508      	bpl.n	8006e34 <_printf_i+0x14c>
 8006e22:	6923      	ldr	r3, [r4, #16]
 8006e24:	6861      	ldr	r1, [r4, #4]
 8006e26:	4299      	cmp	r1, r3
 8006e28:	bfde      	ittt	le
 8006e2a:	2330      	movle	r3, #48	; 0x30
 8006e2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e30:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006e34:	1b92      	subs	r2, r2, r6
 8006e36:	6122      	str	r2, [r4, #16]
 8006e38:	f8cd a000 	str.w	sl, [sp]
 8006e3c:	464b      	mov	r3, r9
 8006e3e:	aa03      	add	r2, sp, #12
 8006e40:	4621      	mov	r1, r4
 8006e42:	4640      	mov	r0, r8
 8006e44:	f7ff fee2 	bl	8006c0c <_printf_common>
 8006e48:	3001      	adds	r0, #1
 8006e4a:	d14c      	bne.n	8006ee6 <_printf_i+0x1fe>
 8006e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e50:	b004      	add	sp, #16
 8006e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e56:	4835      	ldr	r0, [pc, #212]	; (8006f2c <_printf_i+0x244>)
 8006e58:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006e5c:	6823      	ldr	r3, [r4, #0]
 8006e5e:	680e      	ldr	r6, [r1, #0]
 8006e60:	061f      	lsls	r7, r3, #24
 8006e62:	f856 5b04 	ldr.w	r5, [r6], #4
 8006e66:	600e      	str	r6, [r1, #0]
 8006e68:	d514      	bpl.n	8006e94 <_printf_i+0x1ac>
 8006e6a:	07d9      	lsls	r1, r3, #31
 8006e6c:	bf44      	itt	mi
 8006e6e:	f043 0320 	orrmi.w	r3, r3, #32
 8006e72:	6023      	strmi	r3, [r4, #0]
 8006e74:	b91d      	cbnz	r5, 8006e7e <_printf_i+0x196>
 8006e76:	6823      	ldr	r3, [r4, #0]
 8006e78:	f023 0320 	bic.w	r3, r3, #32
 8006e7c:	6023      	str	r3, [r4, #0]
 8006e7e:	2310      	movs	r3, #16
 8006e80:	e7b0      	b.n	8006de4 <_printf_i+0xfc>
 8006e82:	6823      	ldr	r3, [r4, #0]
 8006e84:	f043 0320 	orr.w	r3, r3, #32
 8006e88:	6023      	str	r3, [r4, #0]
 8006e8a:	2378      	movs	r3, #120	; 0x78
 8006e8c:	4828      	ldr	r0, [pc, #160]	; (8006f30 <_printf_i+0x248>)
 8006e8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e92:	e7e3      	b.n	8006e5c <_printf_i+0x174>
 8006e94:	065e      	lsls	r6, r3, #25
 8006e96:	bf48      	it	mi
 8006e98:	b2ad      	uxthmi	r5, r5
 8006e9a:	e7e6      	b.n	8006e6a <_printf_i+0x182>
 8006e9c:	4616      	mov	r6, r2
 8006e9e:	e7bb      	b.n	8006e18 <_printf_i+0x130>
 8006ea0:	680b      	ldr	r3, [r1, #0]
 8006ea2:	6826      	ldr	r6, [r4, #0]
 8006ea4:	6960      	ldr	r0, [r4, #20]
 8006ea6:	1d1d      	adds	r5, r3, #4
 8006ea8:	600d      	str	r5, [r1, #0]
 8006eaa:	0635      	lsls	r5, r6, #24
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	d501      	bpl.n	8006eb4 <_printf_i+0x1cc>
 8006eb0:	6018      	str	r0, [r3, #0]
 8006eb2:	e002      	b.n	8006eba <_printf_i+0x1d2>
 8006eb4:	0671      	lsls	r1, r6, #25
 8006eb6:	d5fb      	bpl.n	8006eb0 <_printf_i+0x1c8>
 8006eb8:	8018      	strh	r0, [r3, #0]
 8006eba:	2300      	movs	r3, #0
 8006ebc:	6123      	str	r3, [r4, #16]
 8006ebe:	4616      	mov	r6, r2
 8006ec0:	e7ba      	b.n	8006e38 <_printf_i+0x150>
 8006ec2:	680b      	ldr	r3, [r1, #0]
 8006ec4:	1d1a      	adds	r2, r3, #4
 8006ec6:	600a      	str	r2, [r1, #0]
 8006ec8:	681e      	ldr	r6, [r3, #0]
 8006eca:	6862      	ldr	r2, [r4, #4]
 8006ecc:	2100      	movs	r1, #0
 8006ece:	4630      	mov	r0, r6
 8006ed0:	f7f9 f97e 	bl	80001d0 <memchr>
 8006ed4:	b108      	cbz	r0, 8006eda <_printf_i+0x1f2>
 8006ed6:	1b80      	subs	r0, r0, r6
 8006ed8:	6060      	str	r0, [r4, #4]
 8006eda:	6863      	ldr	r3, [r4, #4]
 8006edc:	6123      	str	r3, [r4, #16]
 8006ede:	2300      	movs	r3, #0
 8006ee0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ee4:	e7a8      	b.n	8006e38 <_printf_i+0x150>
 8006ee6:	6923      	ldr	r3, [r4, #16]
 8006ee8:	4632      	mov	r2, r6
 8006eea:	4649      	mov	r1, r9
 8006eec:	4640      	mov	r0, r8
 8006eee:	47d0      	blx	sl
 8006ef0:	3001      	adds	r0, #1
 8006ef2:	d0ab      	beq.n	8006e4c <_printf_i+0x164>
 8006ef4:	6823      	ldr	r3, [r4, #0]
 8006ef6:	079b      	lsls	r3, r3, #30
 8006ef8:	d413      	bmi.n	8006f22 <_printf_i+0x23a>
 8006efa:	68e0      	ldr	r0, [r4, #12]
 8006efc:	9b03      	ldr	r3, [sp, #12]
 8006efe:	4298      	cmp	r0, r3
 8006f00:	bfb8      	it	lt
 8006f02:	4618      	movlt	r0, r3
 8006f04:	e7a4      	b.n	8006e50 <_printf_i+0x168>
 8006f06:	2301      	movs	r3, #1
 8006f08:	4632      	mov	r2, r6
 8006f0a:	4649      	mov	r1, r9
 8006f0c:	4640      	mov	r0, r8
 8006f0e:	47d0      	blx	sl
 8006f10:	3001      	adds	r0, #1
 8006f12:	d09b      	beq.n	8006e4c <_printf_i+0x164>
 8006f14:	3501      	adds	r5, #1
 8006f16:	68e3      	ldr	r3, [r4, #12]
 8006f18:	9903      	ldr	r1, [sp, #12]
 8006f1a:	1a5b      	subs	r3, r3, r1
 8006f1c:	42ab      	cmp	r3, r5
 8006f1e:	dcf2      	bgt.n	8006f06 <_printf_i+0x21e>
 8006f20:	e7eb      	b.n	8006efa <_printf_i+0x212>
 8006f22:	2500      	movs	r5, #0
 8006f24:	f104 0619 	add.w	r6, r4, #25
 8006f28:	e7f5      	b.n	8006f16 <_printf_i+0x22e>
 8006f2a:	bf00      	nop
 8006f2c:	080071f9 	.word	0x080071f9
 8006f30:	0800720a 	.word	0x0800720a

08006f34 <memcpy>:
 8006f34:	440a      	add	r2, r1
 8006f36:	4291      	cmp	r1, r2
 8006f38:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f3c:	d100      	bne.n	8006f40 <memcpy+0xc>
 8006f3e:	4770      	bx	lr
 8006f40:	b510      	push	{r4, lr}
 8006f42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f4a:	4291      	cmp	r1, r2
 8006f4c:	d1f9      	bne.n	8006f42 <memcpy+0xe>
 8006f4e:	bd10      	pop	{r4, pc}

08006f50 <memmove>:
 8006f50:	4288      	cmp	r0, r1
 8006f52:	b510      	push	{r4, lr}
 8006f54:	eb01 0402 	add.w	r4, r1, r2
 8006f58:	d902      	bls.n	8006f60 <memmove+0x10>
 8006f5a:	4284      	cmp	r4, r0
 8006f5c:	4623      	mov	r3, r4
 8006f5e:	d807      	bhi.n	8006f70 <memmove+0x20>
 8006f60:	1e43      	subs	r3, r0, #1
 8006f62:	42a1      	cmp	r1, r4
 8006f64:	d008      	beq.n	8006f78 <memmove+0x28>
 8006f66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f6e:	e7f8      	b.n	8006f62 <memmove+0x12>
 8006f70:	4402      	add	r2, r0
 8006f72:	4601      	mov	r1, r0
 8006f74:	428a      	cmp	r2, r1
 8006f76:	d100      	bne.n	8006f7a <memmove+0x2a>
 8006f78:	bd10      	pop	{r4, pc}
 8006f7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f82:	e7f7      	b.n	8006f74 <memmove+0x24>

08006f84 <_free_r>:
 8006f84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f86:	2900      	cmp	r1, #0
 8006f88:	d048      	beq.n	800701c <_free_r+0x98>
 8006f8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f8e:	9001      	str	r0, [sp, #4]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	f1a1 0404 	sub.w	r4, r1, #4
 8006f96:	bfb8      	it	lt
 8006f98:	18e4      	addlt	r4, r4, r3
 8006f9a:	f000 f8d3 	bl	8007144 <__malloc_lock>
 8006f9e:	4a20      	ldr	r2, [pc, #128]	; (8007020 <_free_r+0x9c>)
 8006fa0:	9801      	ldr	r0, [sp, #4]
 8006fa2:	6813      	ldr	r3, [r2, #0]
 8006fa4:	4615      	mov	r5, r2
 8006fa6:	b933      	cbnz	r3, 8006fb6 <_free_r+0x32>
 8006fa8:	6063      	str	r3, [r4, #4]
 8006faa:	6014      	str	r4, [r2, #0]
 8006fac:	b003      	add	sp, #12
 8006fae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fb2:	f000 b8cd 	b.w	8007150 <__malloc_unlock>
 8006fb6:	42a3      	cmp	r3, r4
 8006fb8:	d90b      	bls.n	8006fd2 <_free_r+0x4e>
 8006fba:	6821      	ldr	r1, [r4, #0]
 8006fbc:	1862      	adds	r2, r4, r1
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	bf04      	itt	eq
 8006fc2:	681a      	ldreq	r2, [r3, #0]
 8006fc4:	685b      	ldreq	r3, [r3, #4]
 8006fc6:	6063      	str	r3, [r4, #4]
 8006fc8:	bf04      	itt	eq
 8006fca:	1852      	addeq	r2, r2, r1
 8006fcc:	6022      	streq	r2, [r4, #0]
 8006fce:	602c      	str	r4, [r5, #0]
 8006fd0:	e7ec      	b.n	8006fac <_free_r+0x28>
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	b10b      	cbz	r3, 8006fdc <_free_r+0x58>
 8006fd8:	42a3      	cmp	r3, r4
 8006fda:	d9fa      	bls.n	8006fd2 <_free_r+0x4e>
 8006fdc:	6811      	ldr	r1, [r2, #0]
 8006fde:	1855      	adds	r5, r2, r1
 8006fe0:	42a5      	cmp	r5, r4
 8006fe2:	d10b      	bne.n	8006ffc <_free_r+0x78>
 8006fe4:	6824      	ldr	r4, [r4, #0]
 8006fe6:	4421      	add	r1, r4
 8006fe8:	1854      	adds	r4, r2, r1
 8006fea:	42a3      	cmp	r3, r4
 8006fec:	6011      	str	r1, [r2, #0]
 8006fee:	d1dd      	bne.n	8006fac <_free_r+0x28>
 8006ff0:	681c      	ldr	r4, [r3, #0]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	6053      	str	r3, [r2, #4]
 8006ff6:	4421      	add	r1, r4
 8006ff8:	6011      	str	r1, [r2, #0]
 8006ffa:	e7d7      	b.n	8006fac <_free_r+0x28>
 8006ffc:	d902      	bls.n	8007004 <_free_r+0x80>
 8006ffe:	230c      	movs	r3, #12
 8007000:	6003      	str	r3, [r0, #0]
 8007002:	e7d3      	b.n	8006fac <_free_r+0x28>
 8007004:	6825      	ldr	r5, [r4, #0]
 8007006:	1961      	adds	r1, r4, r5
 8007008:	428b      	cmp	r3, r1
 800700a:	bf04      	itt	eq
 800700c:	6819      	ldreq	r1, [r3, #0]
 800700e:	685b      	ldreq	r3, [r3, #4]
 8007010:	6063      	str	r3, [r4, #4]
 8007012:	bf04      	itt	eq
 8007014:	1949      	addeq	r1, r1, r5
 8007016:	6021      	streq	r1, [r4, #0]
 8007018:	6054      	str	r4, [r2, #4]
 800701a:	e7c7      	b.n	8006fac <_free_r+0x28>
 800701c:	b003      	add	sp, #12
 800701e:	bd30      	pop	{r4, r5, pc}
 8007020:	200000b4 	.word	0x200000b4

08007024 <_malloc_r>:
 8007024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007026:	1ccd      	adds	r5, r1, #3
 8007028:	f025 0503 	bic.w	r5, r5, #3
 800702c:	3508      	adds	r5, #8
 800702e:	2d0c      	cmp	r5, #12
 8007030:	bf38      	it	cc
 8007032:	250c      	movcc	r5, #12
 8007034:	2d00      	cmp	r5, #0
 8007036:	4606      	mov	r6, r0
 8007038:	db01      	blt.n	800703e <_malloc_r+0x1a>
 800703a:	42a9      	cmp	r1, r5
 800703c:	d903      	bls.n	8007046 <_malloc_r+0x22>
 800703e:	230c      	movs	r3, #12
 8007040:	6033      	str	r3, [r6, #0]
 8007042:	2000      	movs	r0, #0
 8007044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007046:	f000 f87d 	bl	8007144 <__malloc_lock>
 800704a:	4921      	ldr	r1, [pc, #132]	; (80070d0 <_malloc_r+0xac>)
 800704c:	680a      	ldr	r2, [r1, #0]
 800704e:	4614      	mov	r4, r2
 8007050:	b99c      	cbnz	r4, 800707a <_malloc_r+0x56>
 8007052:	4f20      	ldr	r7, [pc, #128]	; (80070d4 <_malloc_r+0xb0>)
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	b923      	cbnz	r3, 8007062 <_malloc_r+0x3e>
 8007058:	4621      	mov	r1, r4
 800705a:	4630      	mov	r0, r6
 800705c:	f000 f862 	bl	8007124 <_sbrk_r>
 8007060:	6038      	str	r0, [r7, #0]
 8007062:	4629      	mov	r1, r5
 8007064:	4630      	mov	r0, r6
 8007066:	f000 f85d 	bl	8007124 <_sbrk_r>
 800706a:	1c43      	adds	r3, r0, #1
 800706c:	d123      	bne.n	80070b6 <_malloc_r+0x92>
 800706e:	230c      	movs	r3, #12
 8007070:	6033      	str	r3, [r6, #0]
 8007072:	4630      	mov	r0, r6
 8007074:	f000 f86c 	bl	8007150 <__malloc_unlock>
 8007078:	e7e3      	b.n	8007042 <_malloc_r+0x1e>
 800707a:	6823      	ldr	r3, [r4, #0]
 800707c:	1b5b      	subs	r3, r3, r5
 800707e:	d417      	bmi.n	80070b0 <_malloc_r+0x8c>
 8007080:	2b0b      	cmp	r3, #11
 8007082:	d903      	bls.n	800708c <_malloc_r+0x68>
 8007084:	6023      	str	r3, [r4, #0]
 8007086:	441c      	add	r4, r3
 8007088:	6025      	str	r5, [r4, #0]
 800708a:	e004      	b.n	8007096 <_malloc_r+0x72>
 800708c:	6863      	ldr	r3, [r4, #4]
 800708e:	42a2      	cmp	r2, r4
 8007090:	bf0c      	ite	eq
 8007092:	600b      	streq	r3, [r1, #0]
 8007094:	6053      	strne	r3, [r2, #4]
 8007096:	4630      	mov	r0, r6
 8007098:	f000 f85a 	bl	8007150 <__malloc_unlock>
 800709c:	f104 000b 	add.w	r0, r4, #11
 80070a0:	1d23      	adds	r3, r4, #4
 80070a2:	f020 0007 	bic.w	r0, r0, #7
 80070a6:	1ac2      	subs	r2, r0, r3
 80070a8:	d0cc      	beq.n	8007044 <_malloc_r+0x20>
 80070aa:	1a1b      	subs	r3, r3, r0
 80070ac:	50a3      	str	r3, [r4, r2]
 80070ae:	e7c9      	b.n	8007044 <_malloc_r+0x20>
 80070b0:	4622      	mov	r2, r4
 80070b2:	6864      	ldr	r4, [r4, #4]
 80070b4:	e7cc      	b.n	8007050 <_malloc_r+0x2c>
 80070b6:	1cc4      	adds	r4, r0, #3
 80070b8:	f024 0403 	bic.w	r4, r4, #3
 80070bc:	42a0      	cmp	r0, r4
 80070be:	d0e3      	beq.n	8007088 <_malloc_r+0x64>
 80070c0:	1a21      	subs	r1, r4, r0
 80070c2:	4630      	mov	r0, r6
 80070c4:	f000 f82e 	bl	8007124 <_sbrk_r>
 80070c8:	3001      	adds	r0, #1
 80070ca:	d1dd      	bne.n	8007088 <_malloc_r+0x64>
 80070cc:	e7cf      	b.n	800706e <_malloc_r+0x4a>
 80070ce:	bf00      	nop
 80070d0:	200000b4 	.word	0x200000b4
 80070d4:	200000b8 	.word	0x200000b8

080070d8 <_realloc_r>:
 80070d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070da:	4607      	mov	r7, r0
 80070dc:	4614      	mov	r4, r2
 80070de:	460e      	mov	r6, r1
 80070e0:	b921      	cbnz	r1, 80070ec <_realloc_r+0x14>
 80070e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80070e6:	4611      	mov	r1, r2
 80070e8:	f7ff bf9c 	b.w	8007024 <_malloc_r>
 80070ec:	b922      	cbnz	r2, 80070f8 <_realloc_r+0x20>
 80070ee:	f7ff ff49 	bl	8006f84 <_free_r>
 80070f2:	4625      	mov	r5, r4
 80070f4:	4628      	mov	r0, r5
 80070f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070f8:	f000 f830 	bl	800715c <_malloc_usable_size_r>
 80070fc:	42a0      	cmp	r0, r4
 80070fe:	d20f      	bcs.n	8007120 <_realloc_r+0x48>
 8007100:	4621      	mov	r1, r4
 8007102:	4638      	mov	r0, r7
 8007104:	f7ff ff8e 	bl	8007024 <_malloc_r>
 8007108:	4605      	mov	r5, r0
 800710a:	2800      	cmp	r0, #0
 800710c:	d0f2      	beq.n	80070f4 <_realloc_r+0x1c>
 800710e:	4631      	mov	r1, r6
 8007110:	4622      	mov	r2, r4
 8007112:	f7ff ff0f 	bl	8006f34 <memcpy>
 8007116:	4631      	mov	r1, r6
 8007118:	4638      	mov	r0, r7
 800711a:	f7ff ff33 	bl	8006f84 <_free_r>
 800711e:	e7e9      	b.n	80070f4 <_realloc_r+0x1c>
 8007120:	4635      	mov	r5, r6
 8007122:	e7e7      	b.n	80070f4 <_realloc_r+0x1c>

08007124 <_sbrk_r>:
 8007124:	b538      	push	{r3, r4, r5, lr}
 8007126:	4d06      	ldr	r5, [pc, #24]	; (8007140 <_sbrk_r+0x1c>)
 8007128:	2300      	movs	r3, #0
 800712a:	4604      	mov	r4, r0
 800712c:	4608      	mov	r0, r1
 800712e:	602b      	str	r3, [r5, #0]
 8007130:	f7fa fad2 	bl	80016d8 <_sbrk>
 8007134:	1c43      	adds	r3, r0, #1
 8007136:	d102      	bne.n	800713e <_sbrk_r+0x1a>
 8007138:	682b      	ldr	r3, [r5, #0]
 800713a:	b103      	cbz	r3, 800713e <_sbrk_r+0x1a>
 800713c:	6023      	str	r3, [r4, #0]
 800713e:	bd38      	pop	{r3, r4, r5, pc}
 8007140:	20000270 	.word	0x20000270

08007144 <__malloc_lock>:
 8007144:	4801      	ldr	r0, [pc, #4]	; (800714c <__malloc_lock+0x8>)
 8007146:	f000 b811 	b.w	800716c <__retarget_lock_acquire_recursive>
 800714a:	bf00      	nop
 800714c:	20000278 	.word	0x20000278

08007150 <__malloc_unlock>:
 8007150:	4801      	ldr	r0, [pc, #4]	; (8007158 <__malloc_unlock+0x8>)
 8007152:	f000 b80c 	b.w	800716e <__retarget_lock_release_recursive>
 8007156:	bf00      	nop
 8007158:	20000278 	.word	0x20000278

0800715c <_malloc_usable_size_r>:
 800715c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007160:	1f18      	subs	r0, r3, #4
 8007162:	2b00      	cmp	r3, #0
 8007164:	bfbc      	itt	lt
 8007166:	580b      	ldrlt	r3, [r1, r0]
 8007168:	18c0      	addlt	r0, r0, r3
 800716a:	4770      	bx	lr

0800716c <__retarget_lock_acquire_recursive>:
 800716c:	4770      	bx	lr

0800716e <__retarget_lock_release_recursive>:
 800716e:	4770      	bx	lr

08007170 <_init>:
 8007170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007172:	bf00      	nop
 8007174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007176:	bc08      	pop	{r3}
 8007178:	469e      	mov	lr, r3
 800717a:	4770      	bx	lr

0800717c <_fini>:
 800717c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800717e:	bf00      	nop
 8007180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007182:	bc08      	pop	{r3}
 8007184:	469e      	mov	lr, r3
 8007186:	4770      	bx	lr
