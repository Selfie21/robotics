
ArmuroLeer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ac8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08006c58  08006c58  00016c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cec  08006cec  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006cec  08006cec  00016cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006cf4  08006cf4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cf4  08006cf4  00016cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006cf8  08006cf8  00016cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006cfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  20000070  08006d6c  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08006d6c  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000158c8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c1e  00000000  00000000  00035968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  00038588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c8  00000000  00000000  00039788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023871  00000000  00000000  0003a850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014af4  00000000  00000000  0005e0c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc2d2  00000000  00000000  00072bb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014ee87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005090  00000000  00000000  0014eedc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006c40 	.word	0x08006c40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006c40 	.word	0x08006c40

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b80:	f000 b96e 	b.w	8000e60 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	468c      	mov	ip, r1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f040 8083 	bne.w	8000cb2 <__udivmoddi4+0x116>
 8000bac:	428a      	cmp	r2, r1
 8000bae:	4617      	mov	r7, r2
 8000bb0:	d947      	bls.n	8000c42 <__udivmoddi4+0xa6>
 8000bb2:	fab2 f282 	clz	r2, r2
 8000bb6:	b142      	cbz	r2, 8000bca <__udivmoddi4+0x2e>
 8000bb8:	f1c2 0020 	rsb	r0, r2, #32
 8000bbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000bc0:	4091      	lsls	r1, r2
 8000bc2:	4097      	lsls	r7, r2
 8000bc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000bc8:	4094      	lsls	r4, r2
 8000bca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000bd4:	fa1f fe87 	uxth.w	lr, r7
 8000bd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000bdc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be0:	fb06 f10e 	mul.w	r1, r6, lr
 8000be4:	4299      	cmp	r1, r3
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x60>
 8000be8:	18fb      	adds	r3, r7, r3
 8000bea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bee:	f080 8119 	bcs.w	8000e24 <__udivmoddi4+0x288>
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	f240 8116 	bls.w	8000e24 <__udivmoddi4+0x288>
 8000bf8:	3e02      	subs	r6, #2
 8000bfa:	443b      	add	r3, r7
 8000bfc:	1a5b      	subs	r3, r3, r1
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c04:	fb08 3310 	mls	r3, r8, r0, r3
 8000c08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	45a6      	cmp	lr, r4
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x8c>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1a:	f080 8105 	bcs.w	8000e28 <__udivmoddi4+0x28c>
 8000c1e:	45a6      	cmp	lr, r4
 8000c20:	f240 8102 	bls.w	8000e28 <__udivmoddi4+0x28c>
 8000c24:	3802      	subs	r0, #2
 8000c26:	443c      	add	r4, r7
 8000c28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2c:	eba4 040e 	sub.w	r4, r4, lr
 8000c30:	2600      	movs	r6, #0
 8000c32:	b11d      	cbz	r5, 8000c3c <__udivmoddi4+0xa0>
 8000c34:	40d4      	lsrs	r4, r2
 8000c36:	2300      	movs	r3, #0
 8000c38:	e9c5 4300 	strd	r4, r3, [r5]
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	b902      	cbnz	r2, 8000c46 <__udivmoddi4+0xaa>
 8000c44:	deff      	udf	#255	; 0xff
 8000c46:	fab2 f282 	clz	r2, r2
 8000c4a:	2a00      	cmp	r2, #0
 8000c4c:	d150      	bne.n	8000cf0 <__udivmoddi4+0x154>
 8000c4e:	1bcb      	subs	r3, r1, r7
 8000c50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c54:	fa1f f887 	uxth.w	r8, r7
 8000c58:	2601      	movs	r6, #1
 8000c5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c5e:	0c21      	lsrs	r1, r4, #16
 8000c60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c68:	fb08 f30c 	mul.w	r3, r8, ip
 8000c6c:	428b      	cmp	r3, r1
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0xe4>
 8000c70:	1879      	adds	r1, r7, r1
 8000c72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0xe2>
 8000c78:	428b      	cmp	r3, r1
 8000c7a:	f200 80e9 	bhi.w	8000e50 <__udivmoddi4+0x2b4>
 8000c7e:	4684      	mov	ip, r0
 8000c80:	1ac9      	subs	r1, r1, r3
 8000c82:	b2a3      	uxth	r3, r4
 8000c84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c90:	fb08 f800 	mul.w	r8, r8, r0
 8000c94:	45a0      	cmp	r8, r4
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0x10c>
 8000c98:	193c      	adds	r4, r7, r4
 8000c9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x10a>
 8000ca0:	45a0      	cmp	r8, r4
 8000ca2:	f200 80d9 	bhi.w	8000e58 <__udivmoddi4+0x2bc>
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	eba4 0408 	sub.w	r4, r4, r8
 8000cac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cb0:	e7bf      	b.n	8000c32 <__udivmoddi4+0x96>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0x12e>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80b1 	beq.w	8000e1e <__udivmoddi4+0x282>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x1cc>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0x140>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80b8 	bhi.w	8000e4c <__udivmoddi4+0x2b0>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0103 	sbc.w	r1, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	468c      	mov	ip, r1
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0a8      	beq.n	8000c3c <__udivmoddi4+0xa0>
 8000cea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cee:	e7a5      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000cf0:	f1c2 0320 	rsb	r3, r2, #32
 8000cf4:	fa20 f603 	lsr.w	r6, r0, r3
 8000cf8:	4097      	lsls	r7, r2
 8000cfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000cfe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d02:	40d9      	lsrs	r1, r3
 8000d04:	4330      	orrs	r0, r6
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d0c:	fa1f f887 	uxth.w	r8, r7
 8000d10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d18:	fb06 f108 	mul.w	r1, r6, r8
 8000d1c:	4299      	cmp	r1, r3
 8000d1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x19c>
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d2a:	f080 808d 	bcs.w	8000e48 <__udivmoddi4+0x2ac>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 808a 	bls.w	8000e48 <__udivmoddi4+0x2ac>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	443b      	add	r3, r7
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b281      	uxth	r1, r0
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d48:	fb00 f308 	mul.w	r3, r0, r8
 8000d4c:	428b      	cmp	r3, r1
 8000d4e:	d907      	bls.n	8000d60 <__udivmoddi4+0x1c4>
 8000d50:	1879      	adds	r1, r7, r1
 8000d52:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d56:	d273      	bcs.n	8000e40 <__udivmoddi4+0x2a4>
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d971      	bls.n	8000e40 <__udivmoddi4+0x2a4>
 8000d5c:	3802      	subs	r0, #2
 8000d5e:	4439      	add	r1, r7
 8000d60:	1acb      	subs	r3, r1, r3
 8000d62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d66:	e778      	b.n	8000c5a <__udivmoddi4+0xbe>
 8000d68:	f1c6 0c20 	rsb	ip, r6, #32
 8000d6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d74:	431c      	orrs	r4, r3
 8000d76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d86:	431f      	orrs	r7, r3
 8000d88:	0c3b      	lsrs	r3, r7, #16
 8000d8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d8e:	fa1f f884 	uxth.w	r8, r4
 8000d92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d9e:	458a      	cmp	sl, r1
 8000da0:	fa02 f206 	lsl.w	r2, r2, r6
 8000da4:	fa00 f306 	lsl.w	r3, r0, r6
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x220>
 8000daa:	1861      	adds	r1, r4, r1
 8000dac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db0:	d248      	bcs.n	8000e44 <__udivmoddi4+0x2a8>
 8000db2:	458a      	cmp	sl, r1
 8000db4:	d946      	bls.n	8000e44 <__udivmoddi4+0x2a8>
 8000db6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dba:	4421      	add	r1, r4
 8000dbc:	eba1 010a 	sub.w	r1, r1, sl
 8000dc0:	b2bf      	uxth	r7, r7
 8000dc2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dce:	fb00 f808 	mul.w	r8, r0, r8
 8000dd2:	45b8      	cmp	r8, r7
 8000dd4:	d907      	bls.n	8000de6 <__udivmoddi4+0x24a>
 8000dd6:	19e7      	adds	r7, r4, r7
 8000dd8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ddc:	d22e      	bcs.n	8000e3c <__udivmoddi4+0x2a0>
 8000dde:	45b8      	cmp	r8, r7
 8000de0:	d92c      	bls.n	8000e3c <__udivmoddi4+0x2a0>
 8000de2:	3802      	subs	r0, #2
 8000de4:	4427      	add	r7, r4
 8000de6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dea:	eba7 0708 	sub.w	r7, r7, r8
 8000dee:	fba0 8902 	umull	r8, r9, r0, r2
 8000df2:	454f      	cmp	r7, r9
 8000df4:	46c6      	mov	lr, r8
 8000df6:	4649      	mov	r1, r9
 8000df8:	d31a      	bcc.n	8000e30 <__udivmoddi4+0x294>
 8000dfa:	d017      	beq.n	8000e2c <__udivmoddi4+0x290>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x27a>
 8000dfe:	ebb3 020e 	subs.w	r2, r3, lr
 8000e02:	eb67 0701 	sbc.w	r7, r7, r1
 8000e06:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e0a:	40f2      	lsrs	r2, r6
 8000e0c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e10:	40f7      	lsrs	r7, r6
 8000e12:	e9c5 2700 	strd	r2, r7, [r5]
 8000e16:	2600      	movs	r6, #0
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	462e      	mov	r6, r5
 8000e20:	4628      	mov	r0, r5
 8000e22:	e70b      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000e24:	4606      	mov	r6, r0
 8000e26:	e6e9      	b.n	8000bfc <__udivmoddi4+0x60>
 8000e28:	4618      	mov	r0, r3
 8000e2a:	e6fd      	b.n	8000c28 <__udivmoddi4+0x8c>
 8000e2c:	4543      	cmp	r3, r8
 8000e2e:	d2e5      	bcs.n	8000dfc <__udivmoddi4+0x260>
 8000e30:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e34:	eb69 0104 	sbc.w	r1, r9, r4
 8000e38:	3801      	subs	r0, #1
 8000e3a:	e7df      	b.n	8000dfc <__udivmoddi4+0x260>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	e7d2      	b.n	8000de6 <__udivmoddi4+0x24a>
 8000e40:	4660      	mov	r0, ip
 8000e42:	e78d      	b.n	8000d60 <__udivmoddi4+0x1c4>
 8000e44:	4681      	mov	r9, r0
 8000e46:	e7b9      	b.n	8000dbc <__udivmoddi4+0x220>
 8000e48:	4666      	mov	r6, ip
 8000e4a:	e775      	b.n	8000d38 <__udivmoddi4+0x19c>
 8000e4c:	4630      	mov	r0, r6
 8000e4e:	e74a      	b.n	8000ce6 <__udivmoddi4+0x14a>
 8000e50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e54:	4439      	add	r1, r7
 8000e56:	e713      	b.n	8000c80 <__udivmoddi4+0xe4>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	443c      	add	r4, r7
 8000e5c:	e724      	b.n	8000ca8 <__udivmoddi4+0x10c>
 8000e5e:	bf00      	nop

08000e60 <__aeabi_idiv0>:
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
 8000e78:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e7a:	4b4d      	ldr	r3, [pc, #308]	; (8000fb0 <MX_ADC1_Init+0x14c>)
 8000e7c:	4a4d      	ldr	r2, [pc, #308]	; (8000fb4 <MX_ADC1_Init+0x150>)
 8000e7e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000e80:	4b4b      	ldr	r3, [pc, #300]	; (8000fb0 <MX_ADC1_Init+0x14c>)
 8000e82:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e86:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e88:	4b49      	ldr	r3, [pc, #292]	; (8000fb0 <MX_ADC1_Init+0x14c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e8e:	4b48      	ldr	r3, [pc, #288]	; (8000fb0 <MX_ADC1_Init+0x14c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e94:	4b46      	ldr	r3, [pc, #280]	; (8000fb0 <MX_ADC1_Init+0x14c>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000e9a:	4b45      	ldr	r3, [pc, #276]	; (8000fb0 <MX_ADC1_Init+0x14c>)
 8000e9c:	2208      	movs	r2, #8
 8000e9e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ea0:	4b43      	ldr	r3, [pc, #268]	; (8000fb0 <MX_ADC1_Init+0x14c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ea6:	4b42      	ldr	r3, [pc, #264]	; (8000fb0 <MX_ADC1_Init+0x14c>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 6;
 8000eac:	4b40      	ldr	r3, [pc, #256]	; (8000fb0 <MX_ADC1_Init+0x14c>)
 8000eae:	2206      	movs	r2, #6
 8000eb0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eb2:	4b3f      	ldr	r3, [pc, #252]	; (8000fb0 <MX_ADC1_Init+0x14c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eba:	4b3d      	ldr	r3, [pc, #244]	; (8000fb0 <MX_ADC1_Init+0x14c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ec0:	4b3b      	ldr	r3, [pc, #236]	; (8000fb0 <MX_ADC1_Init+0x14c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ec6:	4b3a      	ldr	r3, [pc, #232]	; (8000fb0 <MX_ADC1_Init+0x14c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ece:	4b38      	ldr	r3, [pc, #224]	; (8000fb0 <MX_ADC1_Init+0x14c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ed4:	4b36      	ldr	r3, [pc, #216]	; (8000fb0 <MX_ADC1_Init+0x14c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000edc:	4834      	ldr	r0, [pc, #208]	; (8000fb0 <MX_ADC1_Init+0x14c>)
 8000ede:	f001 f97b 	bl	80021d8 <HAL_ADC_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000ee8:	f000 fc92 	bl	8001810 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000eec:	4b32      	ldr	r3, [pc, #200]	; (8000fb8 <MX_ADC1_Init+0x154>)
 8000eee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ef0:	2306      	movs	r3, #6
 8000ef2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ef8:	237f      	movs	r3, #127	; 0x7f
 8000efa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000efc:	2304      	movs	r3, #4
 8000efe:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f04:	463b      	mov	r3, r7
 8000f06:	4619      	mov	r1, r3
 8000f08:	4829      	ldr	r0, [pc, #164]	; (8000fb0 <MX_ADC1_Init+0x14c>)
 8000f0a:	f001 fb45 	bl	8002598 <HAL_ADC_ConfigChannel>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000f14:	f000 fc7c 	bl	8001810 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f18:	4b28      	ldr	r3, [pc, #160]	; (8000fbc <MX_ADC1_Init+0x158>)
 8000f1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f1c:	230c      	movs	r3, #12
 8000f1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f20:	463b      	mov	r3, r7
 8000f22:	4619      	mov	r1, r3
 8000f24:	4822      	ldr	r0, [pc, #136]	; (8000fb0 <MX_ADC1_Init+0x14c>)
 8000f26:	f001 fb37 	bl	8002598 <HAL_ADC_ConfigChannel>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8000f30:	f000 fc6e 	bl	8001810 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f34:	4b22      	ldr	r3, [pc, #136]	; (8000fc0 <MX_ADC1_Init+0x15c>)
 8000f36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f38:	2312      	movs	r3, #18
 8000f3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	4619      	mov	r1, r3
 8000f40:	481b      	ldr	r0, [pc, #108]	; (8000fb0 <MX_ADC1_Init+0x14c>)
 8000f42:	f001 fb29 	bl	8002598 <HAL_ADC_ConfigChannel>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8000f4c:	f000 fc60 	bl	8001810 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f50:	4b1c      	ldr	r3, [pc, #112]	; (8000fc4 <MX_ADC1_Init+0x160>)
 8000f52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000f54:	2318      	movs	r3, #24
 8000f56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f58:	463b      	mov	r3, r7
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4814      	ldr	r0, [pc, #80]	; (8000fb0 <MX_ADC1_Init+0x14c>)
 8000f5e:	f001 fb1b 	bl	8002598 <HAL_ADC_ConfigChannel>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8000f68:	f000 fc52 	bl	8001810 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f6c:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <MX_ADC1_Init+0x164>)
 8000f6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000f70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f74:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f76:	463b      	mov	r3, r7
 8000f78:	4619      	mov	r1, r3
 8000f7a:	480d      	ldr	r0, [pc, #52]	; (8000fb0 <MX_ADC1_Init+0x14c>)
 8000f7c:	f001 fb0c 	bl	8002598 <HAL_ADC_ConfigChannel>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 8000f86:	f000 fc43 	bl	8001810 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000f8a:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <MX_ADC1_Init+0x168>)
 8000f8c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000f8e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000f92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f94:	463b      	mov	r3, r7
 8000f96:	4619      	mov	r1, r3
 8000f98:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MX_ADC1_Init+0x14c>)
 8000f9a:	f001 fafd 	bl	8002598 <HAL_ADC_ConfigChannel>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_ADC1_Init+0x144>
  {
    Error_Handler();
 8000fa4:	f000 fc34 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fa8:	bf00      	nop
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	200000a4 	.word	0x200000a4
 8000fb4:	50040000 	.word	0x50040000
 8000fb8:	14f00020 	.word	0x14f00020
 8000fbc:	19200040 	.word	0x19200040
 8000fc0:	21800100 	.word	0x21800100
 8000fc4:	25b00200 	.word	0x25b00200
 8000fc8:	2a000400 	.word	0x2a000400
 8000fcc:	32601000 	.word	0x32601000

08000fd0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	; 0x28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a2b      	ldr	r2, [pc, #172]	; (800109c <HAL_ADC_MspInit+0xcc>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d14f      	bne.n	8001092 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ff2:	4b2b      	ldr	r3, [pc, #172]	; (80010a0 <HAL_ADC_MspInit+0xd0>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	4a2a      	ldr	r2, [pc, #168]	; (80010a0 <HAL_ADC_MspInit+0xd0>)
 8000ff8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ffc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffe:	4b28      	ldr	r3, [pc, #160]	; (80010a0 <HAL_ADC_MspInit+0xd0>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	4b25      	ldr	r3, [pc, #148]	; (80010a0 <HAL_ADC_MspInit+0xd0>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	4a24      	ldr	r2, [pc, #144]	; (80010a0 <HAL_ADC_MspInit+0xd0>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001016:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <HAL_ADC_MspInit+0xd0>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = lineSensor_middle_Pin|encoder_left_Pin|lineSensor_right_Pin|battery_Pin
 8001022:	23bb      	movs	r3, #187	; 0xbb
 8001024:	617b      	str	r3, [r7, #20]
                          |encoder_right_Pin|lineSensor_left_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001026:	230b      	movs	r3, #11
 8001028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001038:	f002 fa8e 	bl	8003558 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800103c:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <HAL_ADC_MspInit+0xd4>)
 800103e:	4a1a      	ldr	r2, [pc, #104]	; (80010a8 <HAL_ADC_MspInit+0xd8>)
 8001040:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001042:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <HAL_ADC_MspInit+0xd4>)
 8001044:	2200      	movs	r2, #0
 8001046:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001048:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <HAL_ADC_MspInit+0xd4>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800104e:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <HAL_ADC_MspInit+0xd4>)
 8001050:	2200      	movs	r2, #0
 8001052:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <HAL_ADC_MspInit+0xd4>)
 8001056:	2280      	movs	r2, #128	; 0x80
 8001058:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800105a:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <HAL_ADC_MspInit+0xd4>)
 800105c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001060:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <HAL_ADC_MspInit+0xd4>)
 8001064:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001068:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <HAL_ADC_MspInit+0xd4>)
 800106c:	2220      	movs	r2, #32
 800106e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <HAL_ADC_MspInit+0xd4>)
 8001072:	2200      	movs	r2, #0
 8001074:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001076:	480b      	ldr	r0, [pc, #44]	; (80010a4 <HAL_ADC_MspInit+0xd4>)
 8001078:	f002 f876 	bl	8003168 <HAL_DMA_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8001082:	f000 fbc5 	bl	8001810 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a06      	ldr	r2, [pc, #24]	; (80010a4 <HAL_ADC_MspInit+0xd4>)
 800108a:	64da      	str	r2, [r3, #76]	; 0x4c
 800108c:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <HAL_ADC_MspInit+0xd4>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001092:	bf00      	nop
 8001094:	3728      	adds	r7, #40	; 0x28
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	50040000 	.word	0x50040000
 80010a0:	40021000 	.word	0x40021000
 80010a4:	20000108 	.word	0x20000108
 80010a8:	40020008 	.word	0x40020008

080010ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010b2:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <MX_DMA_Init+0x38>)
 80010b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010b6:	4a0b      	ldr	r2, [pc, #44]	; (80010e4 <MX_DMA_Init+0x38>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	6493      	str	r3, [r2, #72]	; 0x48
 80010be:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <MX_DMA_Init+0x38>)
 80010c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2100      	movs	r1, #0
 80010ce:	200b      	movs	r0, #11
 80010d0:	f002 f813 	bl	80030fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010d4:	200b      	movs	r0, #11
 80010d6:	f002 f82c 	bl	8003132 <HAL_NVIC_EnableIRQ>

}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40021000 	.word	0x40021000

080010e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b088      	sub	sp, #32
 80010ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ee:	f107 030c 	add.w	r3, r7, #12
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fe:	4b30      	ldr	r3, [pc, #192]	; (80011c0 <MX_GPIO_Init+0xd8>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001102:	4a2f      	ldr	r2, [pc, #188]	; (80011c0 <MX_GPIO_Init+0xd8>)
 8001104:	f043 0304 	orr.w	r3, r3, #4
 8001108:	64d3      	str	r3, [r2, #76]	; 0x4c
 800110a:	4b2d      	ldr	r3, [pc, #180]	; (80011c0 <MX_GPIO_Init+0xd8>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110e:	f003 0304 	and.w	r3, r3, #4
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	4b2a      	ldr	r3, [pc, #168]	; (80011c0 <MX_GPIO_Init+0xd8>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111a:	4a29      	ldr	r2, [pc, #164]	; (80011c0 <MX_GPIO_Init+0xd8>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001122:	4b27      	ldr	r3, [pc, #156]	; (80011c0 <MX_GPIO_Init+0xd8>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112e:	4b24      	ldr	r3, [pc, #144]	; (80011c0 <MX_GPIO_Init+0xd8>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001132:	4a23      	ldr	r2, [pc, #140]	; (80011c0 <MX_GPIO_Init+0xd8>)
 8001134:	f043 0302 	orr.w	r3, r3, #2
 8001138:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113a:	4b21      	ldr	r3, [pc, #132]	; (80011c0 <MX_GPIO_Init+0xd8>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(phase2_L_GPIO_Port, phase2_L_Pin, GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800114c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001150:	f002 fb6c 	bl	800382c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LED_right_Pin|LED_left_Pin|phase2_R_Pin, GPIO_PIN_RESET);
 8001154:	2200      	movs	r2, #0
 8001156:	21b8      	movs	r1, #184	; 0xb8
 8001158:	481a      	ldr	r0, [pc, #104]	; (80011c4 <MX_GPIO_Init+0xdc>)
 800115a:	f002 fb67 	bl	800382c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = switch_right_Pin|switch_middle_Pin|switch_left_Pin;
 800115e:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8001162:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001164:	2300      	movs	r3, #0
 8001166:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116c:	f107 030c 	add.w	r3, r7, #12
 8001170:	4619      	mov	r1, r3
 8001172:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001176:	f002 f9ef 	bl	8003558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = phase2_L_Pin;
 800117a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800117e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001180:	2301      	movs	r3, #1
 8001182:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(phase2_L_GPIO_Port, &GPIO_InitStruct);
 800118c:	f107 030c 	add.w	r3, r7, #12
 8001190:	4619      	mov	r1, r3
 8001192:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001196:	f002 f9df 	bl	8003558 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LED_right_Pin|LED_left_Pin|phase2_R_Pin;
 800119a:	23b8      	movs	r3, #184	; 0xb8
 800119c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119e:	2301      	movs	r3, #1
 80011a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011aa:	f107 030c 	add.w	r3, r7, #12
 80011ae:	4619      	mov	r1, r3
 80011b0:	4804      	ldr	r0, [pc, #16]	; (80011c4 <MX_GPIO_Init+0xdc>)
 80011b2:	f002 f9d1 	bl	8003558 <HAL_GPIO_Init>

}
 80011b6:	bf00      	nop
 80011b8:	3720      	adds	r7, #32
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40021000 	.word	0x40021000
 80011c4:	48000400 	.word	0x48000400

080011c8 <controlMotor>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);

/* Private user code ---------------------------------------------------------*/
void controlMotor(double leftMotorSpeed, double rightMotorSpeed) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	ed87 0b02 	vstr	d0, [r7, #8]
 80011d2:	ed87 1b00 	vstr	d1, [r7]
	if (leftMotorSpeed > 0) {
 80011d6:	f04f 0200 	mov.w	r2, #0
 80011da:	f04f 0300 	mov.w	r3, #0
 80011de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011e2:	f7ff fc91 	bl	8000b08 <__aeabi_dcmpgt>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d007      	beq.n	80011fc <controlMotor+0x34>
		HAL_GPIO_WritePin(GPIOA, phase2_L_Pin, GPIO_PIN_RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f6:	f002 fb19 	bl	800382c <HAL_GPIO_WritePin>
 80011fa:	e011      	b.n	8001220 <controlMotor+0x58>
	} else if (leftMotorSpeed < 0) {
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	f04f 0300 	mov.w	r3, #0
 8001204:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001208:	f7ff fc60 	bl	8000acc <__aeabi_dcmplt>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d006      	beq.n	8001220 <controlMotor+0x58>
		HAL_GPIO_WritePin(GPIOA, phase2_L_Pin, GPIO_PIN_SET);
 8001212:	2201      	movs	r2, #1
 8001214:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001218:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800121c:	f002 fb06 	bl	800382c <HAL_GPIO_WritePin>
	}
	if (rightMotorSpeed > 0) {
 8001220:	f04f 0200 	mov.w	r2, #0
 8001224:	f04f 0300 	mov.w	r3, #0
 8001228:	e9d7 0100 	ldrd	r0, r1, [r7]
 800122c:	f7ff fc6c 	bl	8000b08 <__aeabi_dcmpgt>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d005      	beq.n	8001242 <controlMotor+0x7a>
		HAL_GPIO_WritePin(GPIOB, phase2_R_Pin, GPIO_PIN_SET);
 8001236:	2201      	movs	r2, #1
 8001238:	2180      	movs	r1, #128	; 0x80
 800123a:	483b      	ldr	r0, [pc, #236]	; (8001328 <controlMotor+0x160>)
 800123c:	f002 faf6 	bl	800382c <HAL_GPIO_WritePin>
 8001240:	e00f      	b.n	8001262 <controlMotor+0x9a>
	} else if (rightMotorSpeed < 0) {
 8001242:	f04f 0200 	mov.w	r2, #0
 8001246:	f04f 0300 	mov.w	r3, #0
 800124a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800124e:	f7ff fc3d 	bl	8000acc <__aeabi_dcmplt>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d004      	beq.n	8001262 <controlMotor+0x9a>
		HAL_GPIO_WritePin(GPIOB, phase2_R_Pin, GPIO_PIN_RESET);
 8001258:	2200      	movs	r2, #0
 800125a:	2180      	movs	r1, #128	; 0x80
 800125c:	4832      	ldr	r0, [pc, #200]	; (8001328 <controlMotor+0x160>)
 800125e:	f002 fae5 	bl	800382c <HAL_GPIO_WritePin>
	}

	if (leftMotorSpeed < -1 || leftMotorSpeed > 1) {
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	4b31      	ldr	r3, [pc, #196]	; (800132c <controlMotor+0x164>)
 8001268:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800126c:	f7ff fc2e 	bl	8000acc <__aeabi_dcmplt>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d109      	bne.n	800128a <controlMotor+0xc2>
 8001276:	f04f 0200 	mov.w	r2, #0
 800127a:	4b2d      	ldr	r3, [pc, #180]	; (8001330 <controlMotor+0x168>)
 800127c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001280:	f7ff fc42 	bl	8000b08 <__aeabi_dcmpgt>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d004      	beq.n	8001294 <controlMotor+0xcc>
		leftMotorSpeed = 0.5f;
 800128a:	f04f 0200 	mov.w	r2, #0
 800128e:	4b29      	ldr	r3, [pc, #164]	; (8001334 <controlMotor+0x16c>)
 8001290:	e9c7 2302 	strd	r2, r3, [r7, #8]
	}

	if (rightMotorSpeed < -1 || rightMotorSpeed > 1) {
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	4b24      	ldr	r3, [pc, #144]	; (800132c <controlMotor+0x164>)
 800129a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800129e:	f7ff fc15 	bl	8000acc <__aeabi_dcmplt>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d109      	bne.n	80012bc <controlMotor+0xf4>
 80012a8:	f04f 0200 	mov.w	r2, #0
 80012ac:	4b20      	ldr	r3, [pc, #128]	; (8001330 <controlMotor+0x168>)
 80012ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012b2:	f7ff fc29 	bl	8000b08 <__aeabi_dcmpgt>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d004      	beq.n	80012c6 <controlMotor+0xfe>
		rightMotorSpeed = 0.5f;
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <controlMotor+0x16c>)
 80012c2:	e9c7 2300 	strd	r2, r3, [r7]
	}

	TIM1->CCR2 = (int) (leftMotorSpeed * 65535);
 80012c6:	a316      	add	r3, pc, #88	; (adr r3, 8001320 <controlMotor+0x158>)
 80012c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012d0:	f7ff f98a 	bl	80005e8 <__aeabi_dmul>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4610      	mov	r0, r2
 80012da:	4619      	mov	r1, r3
 80012dc:	f7ff fc1e 	bl	8000b1c <__aeabi_d2iz>
 80012e0:	4602      	mov	r2, r0
 80012e2:	4b15      	ldr	r3, [pc, #84]	; (8001338 <controlMotor+0x170>)
 80012e4:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = (int) ((1 - rightMotorSpeed) * 65535);
 80012e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012ea:	f04f 0000 	mov.w	r0, #0
 80012ee:	4910      	ldr	r1, [pc, #64]	; (8001330 <controlMotor+0x168>)
 80012f0:	f7fe ffc2 	bl	8000278 <__aeabi_dsub>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4610      	mov	r0, r2
 80012fa:	4619      	mov	r1, r3
 80012fc:	a308      	add	r3, pc, #32	; (adr r3, 8001320 <controlMotor+0x158>)
 80012fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001302:	f7ff f971 	bl	80005e8 <__aeabi_dmul>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4610      	mov	r0, r2
 800130c:	4619      	mov	r1, r3
 800130e:	f7ff fc05 	bl	8000b1c <__aeabi_d2iz>
 8001312:	4602      	mov	r2, r0
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <controlMotor+0x170>)
 8001316:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001318:	bf00      	nop
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	00000000 	.word	0x00000000
 8001324:	40efffe0 	.word	0x40efffe0
 8001328:	48000400 	.word	0x48000400
 800132c:	bff00000 	.word	0xbff00000
 8001330:	3ff00000 	.word	0x3ff00000
 8001334:	3fe00000 	.word	0x3fe00000
 8001338:	40012c00 	.word	0x40012c00

0800133c <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc1) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 6; i++) {
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	e00a      	b.n	8001360 <HAL_ADC_ConvCpltCallback+0x24>
		adc[i] = buffer[i];
 800134a:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <HAL_ADC_ConvCpltCallback+0x38>)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001352:	4909      	ldr	r1, [pc, #36]	; (8001378 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 6; i++) {
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	3301      	adds	r3, #1
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2b05      	cmp	r3, #5
 8001364:	ddf1      	ble.n	800134a <HAL_ADC_ConvCpltCallback+0xe>

	}
	writeSensorUSB();
 8001366:	f000 f809 	bl	800137c <writeSensorUSB>
}
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000154 	.word	0x20000154
 8001378:	2000016c 	.word	0x2000016c

0800137c <writeSensorUSB>:


void writeSensorUSB() {
 800137c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800137e:	b09f      	sub	sp, #124	; 0x7c
 8001380:	af04      	add	r7, sp, #16
	char stringBuf[100];
	int len = sprintf((char*) stringBuf, "%d, %d, %d, %d, %d, %d\n",
 8001382:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <writeSensorUSB+0x4c>)
 8001384:	681d      	ldr	r5, [r3, #0]
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <writeSensorUSB+0x4c>)
 8001388:	685e      	ldr	r6, [r3, #4]
 800138a:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <writeSensorUSB+0x4c>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	4a0e      	ldr	r2, [pc, #56]	; (80013c8 <writeSensorUSB+0x4c>)
 8001390:	68d2      	ldr	r2, [r2, #12]
 8001392:	490d      	ldr	r1, [pc, #52]	; (80013c8 <writeSensorUSB+0x4c>)
 8001394:	6909      	ldr	r1, [r1, #16]
 8001396:	480c      	ldr	r0, [pc, #48]	; (80013c8 <writeSensorUSB+0x4c>)
 8001398:	6940      	ldr	r0, [r0, #20]
 800139a:	463c      	mov	r4, r7
 800139c:	9003      	str	r0, [sp, #12]
 800139e:	9102      	str	r1, [sp, #8]
 80013a0:	9201      	str	r2, [sp, #4]
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	4633      	mov	r3, r6
 80013a6:	462a      	mov	r2, r5
 80013a8:	4908      	ldr	r1, [pc, #32]	; (80013cc <writeSensorUSB+0x50>)
 80013aa:	4620      	mov	r0, r4
 80013ac:	f005 f81a 	bl	80063e4 <siprintf>
 80013b0:	6678      	str	r0, [r7, #100]	; 0x64
			adc[0], adc[1], adc[2], adc[3], adc[4], adc[5]);
	HAL_UART_Transmit(&huart2, (uint8_t*) stringBuf, len, 1000000);
 80013b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	4639      	mov	r1, r7
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <writeSensorUSB+0x54>)
 80013ba:	4806      	ldr	r0, [pc, #24]	; (80013d4 <writeSensorUSB+0x58>)
 80013bc:	f004 fbd7 	bl	8005b6e <HAL_UART_Transmit>
}
 80013c0:	bf00      	nop
 80013c2:	376c      	adds	r7, #108	; 0x6c
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013c8:	2000016c 	.word	0x2000016c
 80013cc:	08006c58 	.word	0x08006c58
 80013d0:	000f4240 	.word	0x000f4240
 80013d4:	200001ec 	.word	0x200001ec

080013d8 <evaluateEncoder>:


void evaluateEncoder(){
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
	if(adc[1] > HIGH_THRESHOLD && !encoderStatusLeft){
 80013dc:	4b2a      	ldr	r3, [pc, #168]	; (8001488 <evaluateEncoder+0xb0>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d90f      	bls.n	8001408 <evaluateEncoder+0x30>
 80013e8:	4b28      	ldr	r3, [pc, #160]	; (800148c <evaluateEncoder+0xb4>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	f083 0301 	eor.w	r3, r3, #1
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d008      	beq.n	8001408 <evaluateEncoder+0x30>
		ticksLeft++;
 80013f6:	4b26      	ldr	r3, [pc, #152]	; (8001490 <evaluateEncoder+0xb8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	3301      	adds	r3, #1
 80013fc:	4a24      	ldr	r2, [pc, #144]	; (8001490 <evaluateEncoder+0xb8>)
 80013fe:	6013      	str	r3, [r2, #0]
		encoderStatusLeft = true;
 8001400:	4b22      	ldr	r3, [pc, #136]	; (800148c <evaluateEncoder+0xb4>)
 8001402:	2201      	movs	r2, #1
 8001404:	701a      	strb	r2, [r3, #0]
 8001406:	e011      	b.n	800142c <evaluateEncoder+0x54>
	}else if(adc[1] < LOW_THRESHOLD && encoderStatusLeft){
 8001408:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <evaluateEncoder+0xb0>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001410:	4293      	cmp	r3, r2
 8001412:	d20b      	bcs.n	800142c <evaluateEncoder+0x54>
 8001414:	4b1d      	ldr	r3, [pc, #116]	; (800148c <evaluateEncoder+0xb4>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d007      	beq.n	800142c <evaluateEncoder+0x54>
		ticksLeft++;
 800141c:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <evaluateEncoder+0xb8>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	3301      	adds	r3, #1
 8001422:	4a1b      	ldr	r2, [pc, #108]	; (8001490 <evaluateEncoder+0xb8>)
 8001424:	6013      	str	r3, [r2, #0]
		encoderStatusLeft = false;
 8001426:	4b19      	ldr	r3, [pc, #100]	; (800148c <evaluateEncoder+0xb4>)
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]
	}

	if(adc[4] > HIGH_THRESHOLD && !encoderStatusRight){
 800142c:	4b16      	ldr	r3, [pc, #88]	; (8001488 <evaluateEncoder+0xb0>)
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001434:	4293      	cmp	r3, r2
 8001436:	d90f      	bls.n	8001458 <evaluateEncoder+0x80>
 8001438:	4b16      	ldr	r3, [pc, #88]	; (8001494 <evaluateEncoder+0xbc>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	f083 0301 	eor.w	r3, r3, #1
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	d008      	beq.n	8001458 <evaluateEncoder+0x80>
		ticksRight++;
 8001446:	4b14      	ldr	r3, [pc, #80]	; (8001498 <evaluateEncoder+0xc0>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	3301      	adds	r3, #1
 800144c:	4a12      	ldr	r2, [pc, #72]	; (8001498 <evaluateEncoder+0xc0>)
 800144e:	6013      	str	r3, [r2, #0]
		encoderStatusRight = true;
 8001450:	4b10      	ldr	r3, [pc, #64]	; (8001494 <evaluateEncoder+0xbc>)
 8001452:	2201      	movs	r2, #1
 8001454:	701a      	strb	r2, [r3, #0]
	}else if(adc[4] < LOW_THRESHOLD && encoderStatusRight){
		ticksRight++;
		encoderStatusRight = false;
	}
}
 8001456:	e011      	b.n	800147c <evaluateEncoder+0xa4>
	}else if(adc[4] < LOW_THRESHOLD && encoderStatusRight){
 8001458:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <evaluateEncoder+0xb0>)
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001460:	4293      	cmp	r3, r2
 8001462:	d20b      	bcs.n	800147c <evaluateEncoder+0xa4>
 8001464:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <evaluateEncoder+0xbc>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d007      	beq.n	800147c <evaluateEncoder+0xa4>
		ticksRight++;
 800146c:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <evaluateEncoder+0xc0>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	3301      	adds	r3, #1
 8001472:	4a09      	ldr	r2, [pc, #36]	; (8001498 <evaluateEncoder+0xc0>)
 8001474:	6013      	str	r3, [r2, #0]
		encoderStatusRight = false;
 8001476:	4b07      	ldr	r3, [pc, #28]	; (8001494 <evaluateEncoder+0xbc>)
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	2000016c 	.word	0x2000016c
 800148c:	20000150 	.word	0x20000150
 8001490:	2000019c 	.word	0x2000019c
 8001494:	20000184 	.word	0x20000184
 8001498:	20000188 	.word	0x20000188

0800149c <taskLED>:


void taskLED() {
 800149c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014a0:	af00      	add	r7, sp, #0

	switch(taskLedState) {
 80014a2:	4b29      	ldr	r3, [pc, #164]	; (8001548 <taskLED+0xac>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d002      	beq.n	80014b0 <taskLED+0x14>
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d023      	beq.n	80014f6 <taskLED+0x5a>
			waitingSince = HAL_GetTick();
			taskLedState = stateA;
		}
		break;
	}
}
 80014ae:	e048      	b.n	8001542 <taskLED+0xa6>
		if(HAL_GetTick() > (waitingSince + 500)){
 80014b0:	f000 fc9a 	bl	8001de8 <HAL_GetTick>
 80014b4:	4603      	mov	r3, r0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f04f 0100 	mov.w	r1, #0
 80014bc:	4b23      	ldr	r3, [pc, #140]	; (800154c <taskLED+0xb0>)
 80014be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c2:	f512 78fa 	adds.w	r8, r2, #500	; 0x1f4
 80014c6:	f143 0900 	adc.w	r9, r3, #0
 80014ca:	4589      	cmp	r9, r1
 80014cc:	bf08      	it	eq
 80014ce:	4580      	cmpeq	r8, r0
 80014d0:	d234      	bcs.n	800153c <taskLED+0xa0>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80014d2:	2201      	movs	r2, #1
 80014d4:	2110      	movs	r1, #16
 80014d6:	481e      	ldr	r0, [pc, #120]	; (8001550 <taskLED+0xb4>)
 80014d8:	f002 f9a8 	bl	800382c <HAL_GPIO_WritePin>
			waitingSince = HAL_GetTick();
 80014dc:	f000 fc84 	bl	8001de8 <HAL_GetTick>
 80014e0:	4603      	mov	r3, r0
 80014e2:	461a      	mov	r2, r3
 80014e4:	f04f 0300 	mov.w	r3, #0
 80014e8:	4918      	ldr	r1, [pc, #96]	; (800154c <taskLED+0xb0>)
 80014ea:	e9c1 2300 	strd	r2, r3, [r1]
			taskLedState = stateB;
 80014ee:	4b16      	ldr	r3, [pc, #88]	; (8001548 <taskLED+0xac>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	701a      	strb	r2, [r3, #0]
		break;
 80014f4:	e022      	b.n	800153c <taskLED+0xa0>
		if(HAL_GetTick() > (waitingSince + 500)){
 80014f6:	f000 fc77 	bl	8001de8 <HAL_GetTick>
 80014fa:	4603      	mov	r3, r0
 80014fc:	4618      	mov	r0, r3
 80014fe:	f04f 0100 	mov.w	r1, #0
 8001502:	4b12      	ldr	r3, [pc, #72]	; (800154c <taskLED+0xb0>)
 8001504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001508:	f512 74fa 	adds.w	r4, r2, #500	; 0x1f4
 800150c:	f143 0500 	adc.w	r5, r3, #0
 8001510:	428d      	cmp	r5, r1
 8001512:	bf08      	it	eq
 8001514:	4284      	cmpeq	r4, r0
 8001516:	d213      	bcs.n	8001540 <taskLED+0xa4>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001518:	2200      	movs	r2, #0
 800151a:	2110      	movs	r1, #16
 800151c:	480c      	ldr	r0, [pc, #48]	; (8001550 <taskLED+0xb4>)
 800151e:	f002 f985 	bl	800382c <HAL_GPIO_WritePin>
			waitingSince = HAL_GetTick();
 8001522:	f000 fc61 	bl	8001de8 <HAL_GetTick>
 8001526:	4603      	mov	r3, r0
 8001528:	461a      	mov	r2, r3
 800152a:	f04f 0300 	mov.w	r3, #0
 800152e:	4907      	ldr	r1, [pc, #28]	; (800154c <taskLED+0xb0>)
 8001530:	e9c1 2300 	strd	r2, r3, [r1]
			taskLedState = stateA;
 8001534:	4b04      	ldr	r3, [pc, #16]	; (8001548 <taskLED+0xac>)
 8001536:	2200      	movs	r2, #0
 8001538:	701a      	strb	r2, [r3, #0]
		break;
 800153a:	e001      	b.n	8001540 <taskLED+0xa4>
		break;
 800153c:	bf00      	nop
 800153e:	e000      	b.n	8001542 <taskLED+0xa6>
		break;
 8001540:	bf00      	nop
}
 8001542:	bf00      	nop
 8001544:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001548:	2000008c 	.word	0x2000008c
 800154c:	20000090 	.word	0x20000090
 8001550:	48000400 	.word	0x48000400

08001554 <regulateMotor>:



// taking right encoder as as base (more accurate) so changing of speed happens to left motor
void regulateMotor(){
 8001554:	b5b0      	push	{r4, r5, r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
	diff =  ticksRight - ticksLeft;
 800155a:	4b37      	ldr	r3, [pc, #220]	; (8001638 <regulateMotor+0xe4>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	4b37      	ldr	r3, [pc, #220]	; (800163c <regulateMotor+0xe8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	4a36      	ldr	r2, [pc, #216]	; (8001640 <regulateMotor+0xec>)
 8001566:	6013      	str	r3, [r2, #0]
	percentageDiff = 0;
 8001568:	4936      	ldr	r1, [pc, #216]	; (8001644 <regulateMotor+0xf0>)
 800156a:	f04f 0200 	mov.w	r2, #0
 800156e:	f04f 0300 	mov.w	r3, #0
 8001572:	e9c1 2300 	strd	r2, r3, [r1]

	if(ticksLeft != 0){
 8001576:	4b31      	ldr	r3, [pc, #196]	; (800163c <regulateMotor+0xe8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d017      	beq.n	80015ae <regulateMotor+0x5a>
		percentageDiff = (double) diff/ticksLeft;
 800157e:	4b30      	ldr	r3, [pc, #192]	; (8001640 <regulateMotor+0xec>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f7fe ffb6 	bl	80004f4 <__aeabi_ui2d>
 8001588:	4604      	mov	r4, r0
 800158a:	460d      	mov	r5, r1
 800158c:	4b2b      	ldr	r3, [pc, #172]	; (800163c <regulateMotor+0xe8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f7fe ffaf 	bl	80004f4 <__aeabi_ui2d>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4620      	mov	r0, r4
 800159c:	4629      	mov	r1, r5
 800159e:	f7ff f94d 	bl	800083c <__aeabi_ddiv>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4927      	ldr	r1, [pc, #156]	; (8001644 <regulateMotor+0xf0>)
 80015a8:	e9c1 2300 	strd	r2, r3, [r1]
 80015ac:	e002      	b.n	80015b4 <regulateMotor+0x60>
	}else{
		diff = 0;
 80015ae:	4b24      	ldr	r3, [pc, #144]	; (8001640 <regulateMotor+0xec>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
	}

	double currentSpeedLeft = (double) (TIM1->CCR2)/65536;
 80015b4:	4b24      	ldr	r3, [pc, #144]	; (8001648 <regulateMotor+0xf4>)
 80015b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7fe ff9b 	bl	80004f4 <__aeabi_ui2d>
 80015be:	f04f 0200 	mov.w	r2, #0
 80015c2:	4b22      	ldr	r3, [pc, #136]	; (800164c <regulateMotor+0xf8>)
 80015c4:	f7ff f93a 	bl	800083c <__aeabi_ddiv>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double currentSpeedRight = (double) (TIM1->CCR3)/65536;
 80015d0:	4b1d      	ldr	r3, [pc, #116]	; (8001648 <regulateMotor+0xf4>)
 80015d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe ff8d 	bl	80004f4 <__aeabi_ui2d>
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	4b1b      	ldr	r3, [pc, #108]	; (800164c <regulateMotor+0xf8>)
 80015e0:	f7ff f92c 	bl	800083c <__aeabi_ddiv>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	e9c7 2300 	strd	r2, r3, [r7]
	if(diff > 0){
 80015ec:	4b14      	ldr	r3, [pc, #80]	; (8001640 <regulateMotor+0xec>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d01c      	beq.n	800162e <regulateMotor+0xda>
		controlMotor(currentSpeedLeft+(KP * percentageDiff), currentSpeedRight);
 80015f4:	2302      	movs	r3, #2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe ff8c 	bl	8000514 <__aeabi_i2d>
 80015fc:	4b11      	ldr	r3, [pc, #68]	; (8001644 <regulateMotor+0xf0>)
 80015fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001602:	f7fe fff1 	bl	80005e8 <__aeabi_dmul>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4610      	mov	r0, r2
 800160c:	4619      	mov	r1, r3
 800160e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001612:	f7fe fe33 	bl	800027c <__adddf3>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	ec43 2b17 	vmov	d7, r2, r3
 800161e:	ed97 1b00 	vldr	d1, [r7]
 8001622:	eeb0 0a47 	vmov.f32	s0, s14
 8001626:	eef0 0a67 	vmov.f32	s1, s15
 800162a:	f7ff fdcd 	bl	80011c8 <controlMotor>
	}else if(diff < 0){
		controlMotor(currentSpeedLeft-(KP *percentageDiff), currentSpeedRight);
	}
}
 800162e:	bf00      	nop
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bdb0      	pop	{r4, r5, r7, pc}
 8001636:	bf00      	nop
 8001638:	20000188 	.word	0x20000188
 800163c:	2000019c 	.word	0x2000019c
 8001640:	20000198 	.word	0x20000198
 8001644:	20000190 	.word	0x20000190
 8001648:	40012c00 	.word	0x40012c00
 800164c:	40f00000 	.word	0x40f00000

08001650 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001654:	f000 fb5f 	bl	8001d16 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8001658:	f000 f846 	bl	80016e8 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800165c:	f7ff fd44 	bl	80010e8 <MX_GPIO_Init>
	MX_DMA_Init();
 8001660:	f7ff fd24 	bl	80010ac <MX_DMA_Init>
	MX_USART2_UART_Init();
 8001664:	f000 faaa 	bl	8001bbc <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8001668:	f7ff fbfc 	bl	8000e64 <MX_ADC1_Init>
	MX_TIM1_Init();
 800166c:	f000 f996 	bl	800199c <MX_TIM1_Init>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001670:	2104      	movs	r1, #4
 8001672:	4817      	ldr	r0, [pc, #92]	; (80016d0 <main+0x80>)
 8001674:	f004 f88c 	bl	8005790 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001678:	2108      	movs	r1, #8
 800167a:	4815      	ldr	r0, [pc, #84]	; (80016d0 <main+0x80>)
 800167c:	f004 f888 	bl	8005790 <HAL_TIMEx_PWMN_Start>

	TIM1->CCR2 = 0;
 8001680:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <main+0x84>)
 8001682:	2200      	movs	r2, #0
 8001684:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 30000;
 8001686:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <main+0x84>)
 8001688:	f247 5230 	movw	r2, #30000	; 0x7530
 800168c:	63da      	str	r2, [r3, #60]	; 0x3c
	ticksLeft = 0;
 800168e:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <main+0x88>)
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
	ticksRight = 0;
 8001694:	4b11      	ldr	r3, [pc, #68]	; (80016dc <main+0x8c>)
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
	controlMotor(0.5f, 0.5f);
 800169a:	ed9f 1b0b 	vldr	d1, [pc, #44]	; 80016c8 <main+0x78>
 800169e:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 80016c8 <main+0x78>
 80016a2:	f7ff fd91 	bl	80011c8 <controlMotor>
	while (1) {
		HAL_ADC_Start_DMA(&hadc1, buffer, 6);
 80016a6:	2206      	movs	r2, #6
 80016a8:	490d      	ldr	r1, [pc, #52]	; (80016e0 <main+0x90>)
 80016aa:	480e      	ldr	r0, [pc, #56]	; (80016e4 <main+0x94>)
 80016ac:	f000 fedc 	bl	8002468 <HAL_ADC_Start_DMA>
		taskLED();
 80016b0:	f7ff fef4 	bl	800149c <taskLED>
		evaluateEncoder();
 80016b4:	f7ff fe90 	bl	80013d8 <evaluateEncoder>
		regulateMotor();
 80016b8:	f7ff ff4c 	bl	8001554 <regulateMotor>
		HAL_Delay(20);
 80016bc:	2014      	movs	r0, #20
 80016be:	f000 fb9f 	bl	8001e00 <HAL_Delay>
		HAL_ADC_Start_DMA(&hadc1, buffer, 6);
 80016c2:	e7f0      	b.n	80016a6 <main+0x56>
 80016c4:	f3af 8000 	nop.w
 80016c8:	00000000 	.word	0x00000000
 80016cc:	3fe00000 	.word	0x3fe00000
 80016d0:	200001a0 	.word	0x200001a0
 80016d4:	40012c00 	.word	0x40012c00
 80016d8:	2000019c 	.word	0x2000019c
 80016dc:	20000188 	.word	0x20000188
 80016e0:	20000154 	.word	0x20000154
 80016e4:	200000a4 	.word	0x200000a4

080016e8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b0ac      	sub	sp, #176	; 0xb0
 80016ec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016f2:	2244      	movs	r2, #68	; 0x44
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f004 fe6c 	bl	80063d4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	2254      	movs	r2, #84	; 0x54
 8001710:	2100      	movs	r1, #0
 8001712:	4618      	mov	r0, r3
 8001714:	f004 fe5e 	bl	80063d4 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8001718:	f002 f8a0 	bl	800385c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800171c:	4b3b      	ldr	r3, [pc, #236]	; (800180c <SystemClock_Config+0x124>)
 800171e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001722:	4a3a      	ldr	r2, [pc, #232]	; (800180c <SystemClock_Config+0x124>)
 8001724:	f023 0318 	bic.w	r3, r3, #24
 8001728:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800172c:	2314      	movs	r3, #20
 800172e:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001730:	2301      	movs	r3, #1
 8001732:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001734:	2301      	movs	r3, #1
 8001736:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	RCC_OscInitStruct.MSICalibrationValue = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001740:	2360      	movs	r3, #96	; 0x60
 8001742:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001746:	2302      	movs	r3, #2
 8001748:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800174c:	2301      	movs	r3, #1
 800174e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001752:	2301      	movs	r3, #1
 8001754:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.PLL.PLLN = 16;
 8001758:	2310      	movs	r3, #16
 800175a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800175e:	2307      	movs	r3, #7
 8001760:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001764:	2302      	movs	r3, #2
 8001766:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800176a:	2302      	movs	r3, #2
 800176c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001770:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001774:	4618      	mov	r0, r3
 8001776:	f002 f8e5 	bl	8003944 <HAL_RCC_OscConfig>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 8001780:	f000 f846 	bl	8001810 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001784:	230f      	movs	r3, #15
 8001786:	65bb      	str	r3, [r7, #88]	; 0x58
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001788:	2303      	movs	r3, #3
 800178a:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800178c:	2300      	movs	r3, #0
 800178e:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001790:	2300      	movs	r3, #0
 8001792:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001794:	2300      	movs	r3, #0
 8001796:	66bb      	str	r3, [r7, #104]	; 0x68

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001798:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800179c:	2101      	movs	r1, #1
 800179e:	4618      	mov	r0, r3
 80017a0:	f002 fcf0 	bl	8004184 <HAL_RCC_ClockConfig>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <SystemClock_Config+0xc6>
	{
		Error_Handler();
 80017aa:	f000 f831 	bl	8001810 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 80017ae:	f244 0302 	movw	r3, #16386	; 0x4002
 80017b2:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017b4:	2300      	movs	r3, #0
 80017b6:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80017b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80017bc:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80017be:	2301      	movs	r3, #1
 80017c0:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80017c2:	2301      	movs	r3, #1
 80017c4:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80017c6:	2310      	movs	r3, #16
 80017c8:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80017ca:	2307      	movs	r3, #7
 80017cc:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80017ce:	2302      	movs	r3, #2
 80017d0:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80017d2:	2302      	movs	r3, #2
 80017d4:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80017d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017da:	623b      	str	r3, [r7, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017dc:	1d3b      	adds	r3, r7, #4
 80017de:	4618      	mov	r0, r3
 80017e0:	f002 fed6 	bl	8004590 <HAL_RCCEx_PeriphCLKConfig>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <SystemClock_Config+0x106>
	{
		Error_Handler();
 80017ea:	f000 f811 	bl	8001810 <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80017ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80017f2:	f002 f851 	bl	8003898 <HAL_PWREx_ControlVoltageScaling>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <SystemClock_Config+0x118>
	{
		Error_Handler();
 80017fc:	f000 f808 	bl	8001810 <Error_Handler>
	}
	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8001800:	f003 f8ba 	bl	8004978 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001804:	bf00      	nop
 8001806:	37b0      	adds	r7, #176	; 0xb0
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40021000 	.word	0x40021000

08001810 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001814:	b672      	cpsid	i
}
 8001816:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001818:	e7fe      	b.n	8001818 <Error_Handler+0x8>
	...

0800181c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001822:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <HAL_MspInit+0x44>)
 8001824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001826:	4a0e      	ldr	r2, [pc, #56]	; (8001860 <HAL_MspInit+0x44>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	6613      	str	r3, [r2, #96]	; 0x60
 800182e:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <HAL_MspInit+0x44>)
 8001830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <HAL_MspInit+0x44>)
 800183c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183e:	4a08      	ldr	r2, [pc, #32]	; (8001860 <HAL_MspInit+0x44>)
 8001840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001844:	6593      	str	r3, [r2, #88]	; 0x58
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_MspInit+0x44>)
 8001848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184e:	603b      	str	r3, [r7, #0]
 8001850:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	40021000 	.word	0x40021000

08001864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001868:	e7fe      	b.n	8001868 <NMI_Handler+0x4>

0800186a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800186e:	e7fe      	b.n	800186e <HardFault_Handler+0x4>

08001870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001874:	e7fe      	b.n	8001874 <MemManage_Handler+0x4>

08001876 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800187a:	e7fe      	b.n	800187a <BusFault_Handler+0x4>

0800187c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001880:	e7fe      	b.n	8001880 <UsageFault_Handler+0x4>

08001882 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b0:	f000 fa86 	bl	8001dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80018bc:	4802      	ldr	r0, [pc, #8]	; (80018c8 <DMA1_Channel1_IRQHandler+0x10>)
 80018be:	f001 fd6b 	bl	8003398 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000108 	.word	0x20000108

080018cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d4:	4a14      	ldr	r2, [pc, #80]	; (8001928 <_sbrk+0x5c>)
 80018d6:	4b15      	ldr	r3, [pc, #84]	; (800192c <_sbrk+0x60>)
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e0:	4b13      	ldr	r3, [pc, #76]	; (8001930 <_sbrk+0x64>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d102      	bne.n	80018ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <_sbrk+0x64>)
 80018ea:	4a12      	ldr	r2, [pc, #72]	; (8001934 <_sbrk+0x68>)
 80018ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <_sbrk+0x64>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d207      	bcs.n	800190c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018fc:	f004 fd40 	bl	8006380 <__errno>
 8001900:	4603      	mov	r3, r0
 8001902:	220c      	movs	r2, #12
 8001904:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001906:	f04f 33ff 	mov.w	r3, #4294967295
 800190a:	e009      	b.n	8001920 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800190c:	4b08      	ldr	r3, [pc, #32]	; (8001930 <_sbrk+0x64>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001912:	4b07      	ldr	r3, [pc, #28]	; (8001930 <_sbrk+0x64>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	4a05      	ldr	r2, [pc, #20]	; (8001930 <_sbrk+0x64>)
 800191c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800191e:	68fb      	ldr	r3, [r7, #12]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20010000 	.word	0x20010000
 800192c:	00000400 	.word	0x00000400
 8001930:	20000098 	.word	0x20000098
 8001934:	20000288 	.word	0x20000288

08001938 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800193c:	4b15      	ldr	r3, [pc, #84]	; (8001994 <SystemInit+0x5c>)
 800193e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001942:	4a14      	ldr	r2, [pc, #80]	; (8001994 <SystemInit+0x5c>)
 8001944:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001948:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800194c:	4b12      	ldr	r3, [pc, #72]	; (8001998 <SystemInit+0x60>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a11      	ldr	r2, [pc, #68]	; (8001998 <SystemInit+0x60>)
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001958:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <SystemInit+0x60>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <SystemInit+0x60>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a0d      	ldr	r2, [pc, #52]	; (8001998 <SystemInit+0x60>)
 8001964:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001968:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800196c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800196e:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <SystemInit+0x60>)
 8001970:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001974:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001976:	4b08      	ldr	r3, [pc, #32]	; (8001998 <SystemInit+0x60>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a07      	ldr	r2, [pc, #28]	; (8001998 <SystemInit+0x60>)
 800197c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001980:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001982:	4b05      	ldr	r3, [pc, #20]	; (8001998 <SystemInit+0x60>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	e000ed00 	.word	0xe000ed00
 8001998:	40021000 	.word	0x40021000

0800199c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b09a      	sub	sp, #104	; 0x68
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]
 80019ac:	609a      	str	r2, [r3, #8]
 80019ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]
 80019cc:	615a      	str	r2, [r3, #20]
 80019ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	222c      	movs	r2, #44	; 0x2c
 80019d4:	2100      	movs	r1, #0
 80019d6:	4618      	mov	r0, r3
 80019d8:	f004 fcfc 	bl	80063d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019dc:	4b49      	ldr	r3, [pc, #292]	; (8001b04 <MX_TIM1_Init+0x168>)
 80019de:	4a4a      	ldr	r2, [pc, #296]	; (8001b08 <MX_TIM1_Init+0x16c>)
 80019e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019e2:	4b48      	ldr	r3, [pc, #288]	; (8001b04 <MX_TIM1_Init+0x168>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e8:	4b46      	ldr	r3, [pc, #280]	; (8001b04 <MX_TIM1_Init+0x168>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80019ee:	4b45      	ldr	r3, [pc, #276]	; (8001b04 <MX_TIM1_Init+0x168>)
 80019f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f6:	4b43      	ldr	r3, [pc, #268]	; (8001b04 <MX_TIM1_Init+0x168>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019fc:	4b41      	ldr	r3, [pc, #260]	; (8001b04 <MX_TIM1_Init+0x168>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a02:	4b40      	ldr	r3, [pc, #256]	; (8001b04 <MX_TIM1_Init+0x168>)
 8001a04:	2280      	movs	r2, #128	; 0x80
 8001a06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a08:	483e      	ldr	r0, [pc, #248]	; (8001b04 <MX_TIM1_Init+0x168>)
 8001a0a:	f003 f8b7 	bl	8004b7c <HAL_TIM_Base_Init>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001a14:	f7ff fefc 	bl	8001810 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a1c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a1e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a22:	4619      	mov	r1, r3
 8001a24:	4837      	ldr	r0, [pc, #220]	; (8001b04 <MX_TIM1_Init+0x168>)
 8001a26:	f003 fa71 	bl	8004f0c <HAL_TIM_ConfigClockSource>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001a30:	f7ff feee 	bl	8001810 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a34:	4833      	ldr	r0, [pc, #204]	; (8001b04 <MX_TIM1_Init+0x168>)
 8001a36:	f003 f8f8 	bl	8004c2a <HAL_TIM_PWM_Init>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001a40:	f7ff fee6 	bl	8001810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a44:	2300      	movs	r3, #0
 8001a46:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a50:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a54:	4619      	mov	r1, r3
 8001a56:	482b      	ldr	r0, [pc, #172]	; (8001b04 <MX_TIM1_Init+0x168>)
 8001a58:	f003 ff38 	bl	80058cc <HAL_TIMEx_MasterConfigSynchronization>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001a62:	f7ff fed5 	bl	8001810 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a66:	2360      	movs	r3, #96	; 0x60
 8001a68:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a72:	2300      	movs	r3, #0
 8001a74:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a76:	2300      	movs	r3, #0
 8001a78:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a86:	2204      	movs	r2, #4
 8001a88:	4619      	mov	r1, r3
 8001a8a:	481e      	ldr	r0, [pc, #120]	; (8001b04 <MX_TIM1_Init+0x168>)
 8001a8c:	f003 f92e 	bl	8004cec <HAL_TIM_PWM_ConfigChannel>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001a96:	f7ff febb 	bl	8001810 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a9e:	2208      	movs	r2, #8
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4818      	ldr	r0, [pc, #96]	; (8001b04 <MX_TIM1_Init+0x168>)
 8001aa4:	f003 f922 	bl	8004cec <HAL_TIM_PWM_ConfigChannel>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001aae:	f7ff feaf 	bl	8001810 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ac6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ad4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ae2:	1d3b      	adds	r3, r7, #4
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4807      	ldr	r0, [pc, #28]	; (8001b04 <MX_TIM1_Init+0x168>)
 8001ae8:	f003 ff56 	bl	8005998 <HAL_TIMEx_ConfigBreakDeadTime>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001af2:	f7ff fe8d 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001af6:	4803      	ldr	r0, [pc, #12]	; (8001b04 <MX_TIM1_Init+0x168>)
 8001af8:	f000 f828 	bl	8001b4c <HAL_TIM_MspPostInit>

}
 8001afc:	bf00      	nop
 8001afe:	3768      	adds	r7, #104	; 0x68
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	200001a0 	.word	0x200001a0
 8001b08:	40012c00 	.word	0x40012c00

08001b0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a0a      	ldr	r2, [pc, #40]	; (8001b44 <HAL_TIM_Base_MspInit+0x38>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d10b      	bne.n	8001b36 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b1e:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <HAL_TIM_Base_MspInit+0x3c>)
 8001b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b22:	4a09      	ldr	r2, [pc, #36]	; (8001b48 <HAL_TIM_Base_MspInit+0x3c>)
 8001b24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b28:	6613      	str	r3, [r2, #96]	; 0x60
 8001b2a:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <HAL_TIM_Base_MspInit+0x3c>)
 8001b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001b36:	bf00      	nop
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	40012c00 	.word	0x40012c00
 8001b48:	40021000 	.word	0x40021000

08001b4c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b088      	sub	sp, #32
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 030c 	add.w	r3, r7, #12
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a11      	ldr	r2, [pc, #68]	; (8001bb0 <HAL_TIM_MspPostInit+0x64>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d11b      	bne.n	8001ba6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6e:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <HAL_TIM_MspPostInit+0x68>)
 8001b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b72:	4a10      	ldr	r2, [pc, #64]	; (8001bb4 <HAL_TIM_MspPostInit+0x68>)
 8001b74:	f043 0302 	orr.w	r3, r3, #2
 8001b78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <HAL_TIM_MspPostInit+0x68>)
 8001b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	60bb      	str	r3, [r7, #8]
 8001b84:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB0     ------> TIM1_CH2N
    PB1     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = Phase1_L_CH2N_Pin|Phase1_R_CH3N_Pin;
 8001b86:	2303      	movs	r3, #3
 8001b88:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b96:	2301      	movs	r3, #1
 8001b98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9a:	f107 030c 	add.w	r3, r7, #12
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <HAL_TIM_MspPostInit+0x6c>)
 8001ba2:	f001 fcd9 	bl	8003558 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ba6:	bf00      	nop
 8001ba8:	3720      	adds	r7, #32
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40012c00 	.word	0x40012c00
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	48000400 	.word	0x48000400

08001bbc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bc0:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <MX_USART2_UART_Init+0x58>)
 8001bc2:	4a15      	ldr	r2, [pc, #84]	; (8001c18 <MX_USART2_UART_Init+0x5c>)
 8001bc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bc6:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <MX_USART2_UART_Init+0x58>)
 8001bc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bce:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <MX_USART2_UART_Init+0x58>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bd4:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <MX_USART2_UART_Init+0x58>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bda:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <MX_USART2_UART_Init+0x58>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <MX_USART2_UART_Init+0x58>)
 8001be2:	220c      	movs	r2, #12
 8001be4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001be6:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <MX_USART2_UART_Init+0x58>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bec:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <MX_USART2_UART_Init+0x58>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bf2:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <MX_USART2_UART_Init+0x58>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <MX_USART2_UART_Init+0x58>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bfe:	4805      	ldr	r0, [pc, #20]	; (8001c14 <MX_USART2_UART_Init+0x58>)
 8001c00:	f003 ff67 	bl	8005ad2 <HAL_UART_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c0a:	f7ff fe01 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	200001ec 	.word	0x200001ec
 8001c18:	40004400 	.word	0x40004400

08001c1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08a      	sub	sp, #40	; 0x28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a20      	ldr	r2, [pc, #128]	; (8001cbc <HAL_UART_MspInit+0xa0>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d13a      	bne.n	8001cb4 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c3e:	4b20      	ldr	r3, [pc, #128]	; (8001cc0 <HAL_UART_MspInit+0xa4>)
 8001c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c42:	4a1f      	ldr	r2, [pc, #124]	; (8001cc0 <HAL_UART_MspInit+0xa4>)
 8001c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c48:	6593      	str	r3, [r2, #88]	; 0x58
 8001c4a:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <HAL_UART_MspInit+0xa4>)
 8001c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c56:	4b1a      	ldr	r3, [pc, #104]	; (8001cc0 <HAL_UART_MspInit+0xa4>)
 8001c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5a:	4a19      	ldr	r2, [pc, #100]	; (8001cc0 <HAL_UART_MspInit+0xa4>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c62:	4b17      	ldr	r3, [pc, #92]	; (8001cc0 <HAL_UART_MspInit+0xa4>)
 8001c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001c6e:	2304      	movs	r3, #4
 8001c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c72:	2302      	movs	r3, #2
 8001c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c7e:	2307      	movs	r3, #7
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001c82:	f107 0314 	add.w	r3, r7, #20
 8001c86:	4619      	mov	r1, r3
 8001c88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c8c:	f001 fc64 	bl	8003558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001c90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c96:	2302      	movs	r3, #2
 8001c98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001ca6:	f107 0314 	add.w	r3, r7, #20
 8001caa:	4619      	mov	r1, r3
 8001cac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cb0:	f001 fc52 	bl	8003558 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	3728      	adds	r7, #40	; 0x28
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40004400 	.word	0x40004400
 8001cc0:	40021000 	.word	0x40021000

08001cc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001cc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cfc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cc8:	f7ff fe36 	bl	8001938 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001ccc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001cce:	e003      	b.n	8001cd8 <LoopCopyDataInit>

08001cd0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001cd2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001cd4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001cd6:	3104      	adds	r1, #4

08001cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001cd8:	480a      	ldr	r0, [pc, #40]	; (8001d04 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001cda:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001cdc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001cde:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001ce0:	d3f6      	bcc.n	8001cd0 <CopyDataInit>
	ldr	r2, =_sbss
 8001ce2:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001ce4:	e002      	b.n	8001cec <LoopFillZerobss>

08001ce6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001ce6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001ce8:	f842 3b04 	str.w	r3, [r2], #4

08001cec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001cec:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <LoopForever+0x16>)
	cmp	r2, r3
 8001cee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001cf0:	d3f9      	bcc.n	8001ce6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cf2:	f004 fb4b 	bl	800638c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cf6:	f7ff fcab 	bl	8001650 <main>

08001cfa <LoopForever>:

LoopForever:
    b LoopForever
 8001cfa:	e7fe      	b.n	8001cfa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001cfc:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001d00:	08006cfc 	.word	0x08006cfc
	ldr	r0, =_sdata
 8001d04:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d08:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001d0c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001d10:	20000284 	.word	0x20000284

08001d14 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d14:	e7fe      	b.n	8001d14 <ADC1_IRQHandler>

08001d16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d20:	2003      	movs	r0, #3
 8001d22:	f001 f9df 	bl	80030e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d26:	2000      	movs	r0, #0
 8001d28:	f000 f80e 	bl	8001d48 <HAL_InitTick>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d002      	beq.n	8001d38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	71fb      	strb	r3, [r7, #7]
 8001d36:	e001      	b.n	8001d3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d38:	f7ff fd70 	bl	800181c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d50:	2300      	movs	r3, #0
 8001d52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d54:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <HAL_InitTick+0x6c>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d023      	beq.n	8001da4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d5c:	4b16      	ldr	r3, [pc, #88]	; (8001db8 <HAL_InitTick+0x70>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4b14      	ldr	r3, [pc, #80]	; (8001db4 <HAL_InitTick+0x6c>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	4619      	mov	r1, r3
 8001d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d72:	4618      	mov	r0, r3
 8001d74:	f001 f9eb 	bl	800314e <HAL_SYSTICK_Config>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10f      	bne.n	8001d9e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b0f      	cmp	r3, #15
 8001d82:	d809      	bhi.n	8001d98 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d84:	2200      	movs	r2, #0
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	f04f 30ff 	mov.w	r0, #4294967295
 8001d8c:	f001 f9b5 	bl	80030fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d90:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <HAL_InitTick+0x74>)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	e007      	b.n	8001da8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	73fb      	strb	r3, [r7, #15]
 8001d9c:	e004      	b.n	8001da8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	73fb      	strb	r3, [r7, #15]
 8001da2:	e001      	b.n	8001da8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000008 	.word	0x20000008
 8001db8:	20000000 	.word	0x20000000
 8001dbc:	20000004 	.word	0x20000004

08001dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001dc4:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_IncTick+0x20>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_IncTick+0x24>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4413      	add	r3, r2
 8001dd0:	4a04      	ldr	r2, [pc, #16]	; (8001de4 <HAL_IncTick+0x24>)
 8001dd2:	6013      	str	r3, [r2, #0]
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	20000008 	.word	0x20000008
 8001de4:	20000270 	.word	0x20000270

08001de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return uwTick;
 8001dec:	4b03      	ldr	r3, [pc, #12]	; (8001dfc <HAL_GetTick+0x14>)
 8001dee:	681b      	ldr	r3, [r3, #0]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	20000270 	.word	0x20000270

08001e00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e08:	f7ff ffee 	bl	8001de8 <HAL_GetTick>
 8001e0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e18:	d005      	beq.n	8001e26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e1a:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <HAL_Delay+0x44>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4413      	add	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e26:	bf00      	nop
 8001e28:	f7ff ffde 	bl	8001de8 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d8f7      	bhi.n	8001e28 <HAL_Delay+0x28>
  {
  }
}
 8001e38:	bf00      	nop
 8001e3a:	bf00      	nop
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000008 	.word	0x20000008

08001e48 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	609a      	str	r2, [r3, #8]
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	609a      	str	r2, [r3, #8]
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b087      	sub	sp, #28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	3360      	adds	r3, #96	; 0x60
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <LL_ADC_SetOffset+0x44>)
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ee8:	bf00      	nop
 8001eea:	371c      	adds	r7, #28
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	03fff000 	.word	0x03fff000

08001ef8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3360      	adds	r3, #96	; 0x60
 8001f06:	461a      	mov	r2, r3
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4413      	add	r3, r2
 8001f0e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b087      	sub	sp, #28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	3360      	adds	r3, #96	; 0x60
 8001f34:	461a      	mov	r2, r3
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f4e:	bf00      	nop
 8001f50:	371c      	adds	r7, #28
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e000      	b.n	8001f74 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b087      	sub	sp, #28
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	3330      	adds	r3, #48	; 0x30
 8001f90:	461a      	mov	r2, r3
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	0a1b      	lsrs	r3, r3, #8
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	f003 030c 	and.w	r3, r3, #12
 8001f9c:	4413      	add	r3, r2
 8001f9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	f003 031f 	and.w	r3, r3, #31
 8001faa:	211f      	movs	r1, #31
 8001fac:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	401a      	ands	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	0e9b      	lsrs	r3, r3, #26
 8001fb8:	f003 011f 	and.w	r1, r3, #31
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	f003 031f 	and.w	r3, r3, #31
 8001fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001fcc:	bf00      	nop
 8001fce:	371c      	adds	r7, #28
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b087      	sub	sp, #28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	3314      	adds	r3, #20
 8001fe8:	461a      	mov	r2, r3
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	0e5b      	lsrs	r3, r3, #25
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	4413      	add	r3, r2
 8001ff6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	0d1b      	lsrs	r3, r3, #20
 8002000:	f003 031f 	and.w	r3, r3, #31
 8002004:	2107      	movs	r1, #7
 8002006:	fa01 f303 	lsl.w	r3, r1, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	401a      	ands	r2, r3
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	0d1b      	lsrs	r3, r3, #20
 8002012:	f003 031f 	and.w	r3, r3, #31
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	fa01 f303 	lsl.w	r3, r1, r3
 800201c:	431a      	orrs	r2, r3
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002022:	bf00      	nop
 8002024:	371c      	adds	r7, #28
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
	...

08002030 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002048:	43db      	mvns	r3, r3
 800204a:	401a      	ands	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f003 0318 	and.w	r3, r3, #24
 8002052:	4908      	ldr	r1, [pc, #32]	; (8002074 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002054:	40d9      	lsrs	r1, r3
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	400b      	ands	r3, r1
 800205a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800205e:	431a      	orrs	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002066:	bf00      	nop
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	0007ffff 	.word	0x0007ffff

08002078 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002088:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	6093      	str	r3, [r2, #8]
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020b0:	d101      	bne.n	80020b6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80020b2:	2301      	movs	r3, #1
 80020b4:	e000      	b.n	80020b8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80020d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002100:	d101      	bne.n	8002106 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002102:	2301      	movs	r3, #1
 8002104:	e000      	b.n	8002108 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002124:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002128:	f043 0201 	orr.w	r2, r3, #1
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b01      	cmp	r3, #1
 800214e:	d101      	bne.n	8002154 <LL_ADC_IsEnabled+0x18>
 8002150:	2301      	movs	r3, #1
 8002152:	e000      	b.n	8002156 <LL_ADC_IsEnabled+0x1a>
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002172:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002176:	f043 0204 	orr.w	r2, r3, #4
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800217e:	bf00      	nop
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800218a:	b480      	push	{r7}
 800218c:	b083      	sub	sp, #12
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 0304 	and.w	r3, r3, #4
 800219a:	2b04      	cmp	r3, #4
 800219c:	d101      	bne.n	80021a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800219e:	2301      	movs	r3, #1
 80021a0:	e000      	b.n	80021a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 0308 	and.w	r3, r3, #8
 80021c0:	2b08      	cmp	r3, #8
 80021c2:	d101      	bne.n	80021c8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80021c4:	2301      	movs	r3, #1
 80021c6:	e000      	b.n	80021ca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
	...

080021d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b088      	sub	sp, #32
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021e0:	2300      	movs	r3, #0
 80021e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e12c      	b.n	800244c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d109      	bne.n	8002214 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f7fe fee5 	bl	8000fd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff ff3f 	bl	800209c <LL_ADC_IsDeepPowerDownEnabled>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d004      	beq.n	800222e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff ff25 	bl	8002078 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff ff5a 	bl	80020ec <LL_ADC_IsInternalRegulatorEnabled>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d115      	bne.n	800226a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff ff3e 	bl	80020c4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002248:	4b82      	ldr	r3, [pc, #520]	; (8002454 <HAL_ADC_Init+0x27c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	099b      	lsrs	r3, r3, #6
 800224e:	4a82      	ldr	r2, [pc, #520]	; (8002458 <HAL_ADC_Init+0x280>)
 8002250:	fba2 2303 	umull	r2, r3, r2, r3
 8002254:	099b      	lsrs	r3, r3, #6
 8002256:	3301      	adds	r3, #1
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800225c:	e002      	b.n	8002264 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	3b01      	subs	r3, #1
 8002262:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f9      	bne.n	800225e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff ff3c 	bl	80020ec <LL_ADC_IsInternalRegulatorEnabled>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10d      	bne.n	8002296 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800227e:	f043 0210 	orr.w	r2, r3, #16
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228a:	f043 0201 	orr.w	r2, r3, #1
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff ff75 	bl	800218a <LL_ADC_REG_IsConversionOngoing>
 80022a0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a6:	f003 0310 	and.w	r3, r3, #16
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f040 80c5 	bne.w	800243a <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f040 80c1 	bne.w	800243a <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022bc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80022c0:	f043 0202 	orr.w	r2, r3, #2
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff ff35 	bl	800213c <LL_ADC_IsEnabled>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d10b      	bne.n	80022f0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022d8:	4860      	ldr	r0, [pc, #384]	; (800245c <HAL_ADC_Init+0x284>)
 80022da:	f7ff ff2f 	bl	800213c <LL_ADC_IsEnabled>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d105      	bne.n	80022f0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	4619      	mov	r1, r3
 80022ea:	485d      	ldr	r0, [pc, #372]	; (8002460 <HAL_ADC_Init+0x288>)
 80022ec:	f7ff fdac 	bl	8001e48 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	7e5b      	ldrb	r3, [r3, #25]
 80022f4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022fa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002300:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002306:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800230e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002310:	4313      	orrs	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 3020 	ldrb.w	r3, [r3, #32]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d106      	bne.n	800232c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	3b01      	subs	r3, #1
 8002324:	045b      	lsls	r3, r3, #17
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4313      	orrs	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002330:	2b00      	cmp	r3, #0
 8002332:	d009      	beq.n	8002348 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002338:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002340:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	4b45      	ldr	r3, [pc, #276]	; (8002464 <HAL_ADC_Init+0x28c>)
 8002350:	4013      	ands	r3, r2
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6812      	ldr	r2, [r2, #0]
 8002356:	69b9      	ldr	r1, [r7, #24]
 8002358:	430b      	orrs	r3, r1
 800235a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff ff12 	bl	800218a <LL_ADC_REG_IsConversionOngoing>
 8002366:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff ff1f 	bl	80021b0 <LL_ADC_INJ_IsConversionOngoing>
 8002372:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d13d      	bne.n	80023f6 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d13a      	bne.n	80023f6 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002384:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800238c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800239c:	f023 0302 	bic.w	r3, r3, #2
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6812      	ldr	r2, [r2, #0]
 80023a4:	69b9      	ldr	r1, [r7, #24]
 80023a6:	430b      	orrs	r3, r1
 80023a8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d118      	bne.n	80023e6 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80023be:	f023 0304 	bic.w	r3, r3, #4
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80023ca:	4311      	orrs	r1, r2
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80023d0:	4311      	orrs	r1, r2
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80023d6:	430a      	orrs	r2, r1
 80023d8:	431a      	orrs	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0201 	orr.w	r2, r2, #1
 80023e2:	611a      	str	r2, [r3, #16]
 80023e4:	e007      	b.n	80023f6 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	691a      	ldr	r2, [r3, #16]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 0201 	bic.w	r2, r2, #1
 80023f4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d10c      	bne.n	8002418 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002404:	f023 010f 	bic.w	r1, r3, #15
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	1e5a      	subs	r2, r3, #1
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	430a      	orrs	r2, r1
 8002414:	631a      	str	r2, [r3, #48]	; 0x30
 8002416:	e007      	b.n	8002428 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 020f 	bic.w	r2, r2, #15
 8002426:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242c:	f023 0303 	bic.w	r3, r3, #3
 8002430:	f043 0201 	orr.w	r2, r3, #1
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	655a      	str	r2, [r3, #84]	; 0x54
 8002438:	e007      	b.n	800244a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243e:	f043 0210 	orr.w	r2, r3, #16
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800244a:	7ffb      	ldrb	r3, [r7, #31]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3720      	adds	r7, #32
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20000000 	.word	0x20000000
 8002458:	053e2d63 	.word	0x053e2d63
 800245c:	50040000 	.word	0x50040000
 8002460:	50040300 	.word	0x50040300
 8002464:	fff0c007 	.word	0xfff0c007

08002468 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff fe86 	bl	800218a <LL_ADC_REG_IsConversionOngoing>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d167      	bne.n	8002554 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800248a:	2b01      	cmp	r3, #1
 800248c:	d101      	bne.n	8002492 <HAL_ADC_Start_DMA+0x2a>
 800248e:	2302      	movs	r3, #2
 8002490:	e063      	b.n	800255a <HAL_ADC_Start_DMA+0xf2>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f000 fc5c 	bl	8002d58 <ADC_Enable>
 80024a0:	4603      	mov	r3, r0
 80024a2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80024a4:	7dfb      	ldrb	r3, [r7, #23]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d14f      	bne.n	800254a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024b2:	f023 0301 	bic.w	r3, r3, #1
 80024b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d006      	beq.n	80024d8 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ce:	f023 0206 	bic.w	r2, r3, #6
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	659a      	str	r2, [r3, #88]	; 0x58
 80024d6:	e002      	b.n	80024de <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e2:	4a20      	ldr	r2, [pc, #128]	; (8002564 <HAL_ADC_Start_DMA+0xfc>)
 80024e4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ea:	4a1f      	ldr	r2, [pc, #124]	; (8002568 <HAL_ADC_Start_DMA+0x100>)
 80024ec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f2:	4a1e      	ldr	r2, [pc, #120]	; (800256c <HAL_ADC_Start_DMA+0x104>)
 80024f4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	221c      	movs	r2, #28
 80024fc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f042 0210 	orr.w	r2, r2, #16
 8002514:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f042 0201 	orr.w	r2, r2, #1
 8002524:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	3340      	adds	r3, #64	; 0x40
 8002530:	4619      	mov	r1, r3
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f000 fecf 	bl	80032d8 <HAL_DMA_Start_IT>
 800253a:	4603      	mov	r3, r0
 800253c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff fe0d 	bl	8002162 <LL_ADC_REG_StartConversion>
 8002548:	e006      	b.n	8002558 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002552:	e001      	b.n	8002558 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002554:	2302      	movs	r3, #2
 8002556:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002558:	7dfb      	ldrb	r3, [r7, #23]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	08002e1d 	.word	0x08002e1d
 8002568:	08002ef5 	.word	0x08002ef5
 800256c:	08002f11 	.word	0x08002f11

08002570 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b0b6      	sub	sp, #216	; 0xd8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d101      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x22>
 80025b6:	2302      	movs	r3, #2
 80025b8:	e3b9      	b.n	8002d2e <HAL_ADC_ConfigChannel+0x796>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff fddf 	bl	800218a <LL_ADC_REG_IsConversionOngoing>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f040 839e 	bne.w	8002d10 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2b05      	cmp	r3, #5
 80025da:	d824      	bhi.n	8002626 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	3b02      	subs	r3, #2
 80025e2:	2b03      	cmp	r3, #3
 80025e4:	d81b      	bhi.n	800261e <HAL_ADC_ConfigChannel+0x86>
 80025e6:	a201      	add	r2, pc, #4	; (adr r2, 80025ec <HAL_ADC_ConfigChannel+0x54>)
 80025e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ec:	080025fd 	.word	0x080025fd
 80025f0:	08002605 	.word	0x08002605
 80025f4:	0800260d 	.word	0x0800260d
 80025f8:	08002615 	.word	0x08002615
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	220c      	movs	r2, #12
 8002600:	605a      	str	r2, [r3, #4]
          break;
 8002602:	e011      	b.n	8002628 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	2212      	movs	r2, #18
 8002608:	605a      	str	r2, [r3, #4]
          break;
 800260a:	e00d      	b.n	8002628 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	2218      	movs	r2, #24
 8002610:	605a      	str	r2, [r3, #4]
          break;
 8002612:	e009      	b.n	8002628 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	f44f 7280 	mov.w	r2, #256	; 0x100
 800261a:	605a      	str	r2, [r3, #4]
          break;
 800261c:	e004      	b.n	8002628 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2206      	movs	r2, #6
 8002622:	605a      	str	r2, [r3, #4]
          break;
 8002624:	e000      	b.n	8002628 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002626:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6818      	ldr	r0, [r3, #0]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	6859      	ldr	r1, [r3, #4]
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	461a      	mov	r2, r3
 8002636:	f7ff fca3 	bl	8001f80 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff fda3 	bl	800218a <LL_ADC_REG_IsConversionOngoing>
 8002644:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff fdaf 	bl	80021b0 <LL_ADC_INJ_IsConversionOngoing>
 8002652:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002656:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800265a:	2b00      	cmp	r3, #0
 800265c:	f040 81a6 	bne.w	80029ac <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002660:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002664:	2b00      	cmp	r3, #0
 8002666:	f040 81a1 	bne.w	80029ac <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6818      	ldr	r0, [r3, #0]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	6819      	ldr	r1, [r3, #0]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	461a      	mov	r2, r3
 8002678:	f7ff fcae 	bl	8001fd8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	695a      	ldr	r2, [r3, #20]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	08db      	lsrs	r3, r3, #3
 8002688:	f003 0303 	and.w	r3, r3, #3
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	2b04      	cmp	r3, #4
 800269c:	d00a      	beq.n	80026b4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6818      	ldr	r0, [r3, #0]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	6919      	ldr	r1, [r3, #16]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80026ae:	f7ff fbff 	bl	8001eb0 <LL_ADC_SetOffset>
 80026b2:	e17b      	b.n	80029ac <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2100      	movs	r1, #0
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff fc1c 	bl	8001ef8 <LL_ADC_GetOffsetChannel>
 80026c0:	4603      	mov	r3, r0
 80026c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10a      	bne.n	80026e0 <HAL_ADC_ConfigChannel+0x148>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2100      	movs	r1, #0
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff fc11 	bl	8001ef8 <LL_ADC_GetOffsetChannel>
 80026d6:	4603      	mov	r3, r0
 80026d8:	0e9b      	lsrs	r3, r3, #26
 80026da:	f003 021f 	and.w	r2, r3, #31
 80026de:	e01e      	b.n	800271e <HAL_ADC_ConfigChannel+0x186>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2100      	movs	r1, #0
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff fc06 	bl	8001ef8 <LL_ADC_GetOffsetChannel>
 80026ec:	4603      	mov	r3, r0
 80026ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80026f6:	fa93 f3a3 	rbit	r3, r3
 80026fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002702:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002706:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800270e:	2320      	movs	r3, #32
 8002710:	e004      	b.n	800271c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002712:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002716:	fab3 f383 	clz	r3, r3
 800271a:	b2db      	uxtb	r3, r3
 800271c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002726:	2b00      	cmp	r3, #0
 8002728:	d105      	bne.n	8002736 <HAL_ADC_ConfigChannel+0x19e>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	0e9b      	lsrs	r3, r3, #26
 8002730:	f003 031f 	and.w	r3, r3, #31
 8002734:	e018      	b.n	8002768 <HAL_ADC_ConfigChannel+0x1d0>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002742:	fa93 f3a3 	rbit	r3, r3
 8002746:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800274a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800274e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002752:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800275a:	2320      	movs	r3, #32
 800275c:	e004      	b.n	8002768 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800275e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002762:	fab3 f383 	clz	r3, r3
 8002766:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002768:	429a      	cmp	r2, r3
 800276a:	d106      	bne.n	800277a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2200      	movs	r2, #0
 8002772:	2100      	movs	r1, #0
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff fbd5 	bl	8001f24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2101      	movs	r1, #1
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff fbb9 	bl	8001ef8 <LL_ADC_GetOffsetChannel>
 8002786:	4603      	mov	r3, r0
 8002788:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10a      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x20e>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2101      	movs	r1, #1
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff fbae 	bl	8001ef8 <LL_ADC_GetOffsetChannel>
 800279c:	4603      	mov	r3, r0
 800279e:	0e9b      	lsrs	r3, r3, #26
 80027a0:	f003 021f 	and.w	r2, r3, #31
 80027a4:	e01e      	b.n	80027e4 <HAL_ADC_ConfigChannel+0x24c>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2101      	movs	r1, #1
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff fba3 	bl	8001ef8 <LL_ADC_GetOffsetChannel>
 80027b2:	4603      	mov	r3, r0
 80027b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80027bc:	fa93 f3a3 	rbit	r3, r3
 80027c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80027c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80027c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80027cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80027d4:	2320      	movs	r3, #32
 80027d6:	e004      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80027d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027dc:	fab3 f383 	clz	r3, r3
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d105      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x264>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	0e9b      	lsrs	r3, r3, #26
 80027f6:	f003 031f 	and.w	r3, r3, #31
 80027fa:	e018      	b.n	800282e <HAL_ADC_ConfigChannel+0x296>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002804:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002808:	fa93 f3a3 	rbit	r3, r3
 800280c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002810:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002814:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002818:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002820:	2320      	movs	r3, #32
 8002822:	e004      	b.n	800282e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002824:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002828:	fab3 f383 	clz	r3, r3
 800282c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800282e:	429a      	cmp	r2, r3
 8002830:	d106      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2200      	movs	r2, #0
 8002838:	2101      	movs	r1, #1
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff fb72 	bl	8001f24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2102      	movs	r1, #2
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff fb56 	bl	8001ef8 <LL_ADC_GetOffsetChannel>
 800284c:	4603      	mov	r3, r0
 800284e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10a      	bne.n	800286c <HAL_ADC_ConfigChannel+0x2d4>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2102      	movs	r1, #2
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff fb4b 	bl	8001ef8 <LL_ADC_GetOffsetChannel>
 8002862:	4603      	mov	r3, r0
 8002864:	0e9b      	lsrs	r3, r3, #26
 8002866:	f003 021f 	and.w	r2, r3, #31
 800286a:	e01e      	b.n	80028aa <HAL_ADC_ConfigChannel+0x312>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2102      	movs	r1, #2
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff fb40 	bl	8001ef8 <LL_ADC_GetOffsetChannel>
 8002878:	4603      	mov	r3, r0
 800287a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002882:	fa93 f3a3 	rbit	r3, r3
 8002886:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800288a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800288e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002892:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800289a:	2320      	movs	r3, #32
 800289c:	e004      	b.n	80028a8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800289e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028a2:	fab3 f383 	clz	r3, r3
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d105      	bne.n	80028c2 <HAL_ADC_ConfigChannel+0x32a>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	0e9b      	lsrs	r3, r3, #26
 80028bc:	f003 031f 	and.w	r3, r3, #31
 80028c0:	e016      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x358>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028ce:	fa93 f3a3 	rbit	r3, r3
 80028d2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80028d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80028da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80028e2:	2320      	movs	r3, #32
 80028e4:	e004      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80028e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028ea:	fab3 f383 	clz	r3, r3
 80028ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d106      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2200      	movs	r2, #0
 80028fa:	2102      	movs	r1, #2
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff fb11 	bl	8001f24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2103      	movs	r1, #3
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff faf5 	bl	8001ef8 <LL_ADC_GetOffsetChannel>
 800290e:	4603      	mov	r3, r0
 8002910:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10a      	bne.n	800292e <HAL_ADC_ConfigChannel+0x396>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2103      	movs	r1, #3
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff faea 	bl	8001ef8 <LL_ADC_GetOffsetChannel>
 8002924:	4603      	mov	r3, r0
 8002926:	0e9b      	lsrs	r3, r3, #26
 8002928:	f003 021f 	and.w	r2, r3, #31
 800292c:	e017      	b.n	800295e <HAL_ADC_ConfigChannel+0x3c6>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2103      	movs	r1, #3
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff fadf 	bl	8001ef8 <LL_ADC_GetOffsetChannel>
 800293a:	4603      	mov	r3, r0
 800293c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002940:	fa93 f3a3 	rbit	r3, r3
 8002944:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002946:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002948:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800294a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002950:	2320      	movs	r3, #32
 8002952:	e003      	b.n	800295c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002954:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002956:	fab3 f383 	clz	r3, r3
 800295a:	b2db      	uxtb	r3, r3
 800295c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002966:	2b00      	cmp	r3, #0
 8002968:	d105      	bne.n	8002976 <HAL_ADC_ConfigChannel+0x3de>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	0e9b      	lsrs	r3, r3, #26
 8002970:	f003 031f 	and.w	r3, r3, #31
 8002974:	e011      	b.n	800299a <HAL_ADC_ConfigChannel+0x402>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800297e:	fa93 f3a3 	rbit	r3, r3
 8002982:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002984:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002986:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800298e:	2320      	movs	r3, #32
 8002990:	e003      	b.n	800299a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002994:	fab3 f383 	clz	r3, r3
 8002998:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800299a:	429a      	cmp	r2, r3
 800299c:	d106      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2200      	movs	r2, #0
 80029a4:	2103      	movs	r1, #3
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff fabc 	bl	8001f24 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff fbc3 	bl	800213c <LL_ADC_IsEnabled>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f040 813f 	bne.w	8002c3c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6818      	ldr	r0, [r3, #0]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	6819      	ldr	r1, [r3, #0]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	461a      	mov	r2, r3
 80029cc:	f7ff fb30 	bl	8002030 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	4a8e      	ldr	r2, [pc, #568]	; (8002c10 <HAL_ADC_ConfigChannel+0x678>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	f040 8130 	bne.w	8002c3c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10b      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x46c>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	0e9b      	lsrs	r3, r3, #26
 80029f2:	3301      	adds	r3, #1
 80029f4:	f003 031f 	and.w	r3, r3, #31
 80029f8:	2b09      	cmp	r3, #9
 80029fa:	bf94      	ite	ls
 80029fc:	2301      	movls	r3, #1
 80029fe:	2300      	movhi	r3, #0
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	e019      	b.n	8002a38 <HAL_ADC_ConfigChannel+0x4a0>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a0c:	fa93 f3a3 	rbit	r3, r3
 8002a10:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002a12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a14:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002a16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002a1c:	2320      	movs	r3, #32
 8002a1e:	e003      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002a20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a22:	fab3 f383 	clz	r3, r3
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	3301      	adds	r3, #1
 8002a2a:	f003 031f 	and.w	r3, r3, #31
 8002a2e:	2b09      	cmp	r3, #9
 8002a30:	bf94      	ite	ls
 8002a32:	2301      	movls	r3, #1
 8002a34:	2300      	movhi	r3, #0
 8002a36:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d079      	beq.n	8002b30 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d107      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x4c0>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	0e9b      	lsrs	r3, r3, #26
 8002a4e:	3301      	adds	r3, #1
 8002a50:	069b      	lsls	r3, r3, #26
 8002a52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a56:	e015      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x4ec>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a60:	fa93 f3a3 	rbit	r3, r3
 8002a64:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a68:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002a70:	2320      	movs	r3, #32
 8002a72:	e003      	b.n	8002a7c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a76:	fab3 f383 	clz	r3, r3
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	069b      	lsls	r3, r3, #26
 8002a80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d109      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0x50c>
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	0e9b      	lsrs	r3, r3, #26
 8002a96:	3301      	adds	r3, #1
 8002a98:	f003 031f 	and.w	r3, r3, #31
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa2:	e017      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x53c>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aac:	fa93 f3a3 	rbit	r3, r3
 8002ab0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002ab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ab4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002ab6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002abc:	2320      	movs	r3, #32
 8002abe:	e003      	b.n	8002ac8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002ac0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ac2:	fab3 f383 	clz	r3, r3
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	3301      	adds	r3, #1
 8002aca:	f003 031f 	and.w	r3, r3, #31
 8002ace:	2101      	movs	r1, #1
 8002ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad4:	ea42 0103 	orr.w	r1, r2, r3
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10a      	bne.n	8002afa <HAL_ADC_ConfigChannel+0x562>
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	0e9b      	lsrs	r3, r3, #26
 8002aea:	3301      	adds	r3, #1
 8002aec:	f003 021f 	and.w	r2, r3, #31
 8002af0:	4613      	mov	r3, r2
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	4413      	add	r3, r2
 8002af6:	051b      	lsls	r3, r3, #20
 8002af8:	e018      	b.n	8002b2c <HAL_ADC_ConfigChannel+0x594>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b02:	fa93 f3a3 	rbit	r3, r3
 8002b06:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002b12:	2320      	movs	r3, #32
 8002b14:	e003      	b.n	8002b1e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b18:	fab3 f383 	clz	r3, r3
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	3301      	adds	r3, #1
 8002b20:	f003 021f 	and.w	r2, r3, #31
 8002b24:	4613      	mov	r3, r2
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	4413      	add	r3, r2
 8002b2a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b2c:	430b      	orrs	r3, r1
 8002b2e:	e080      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d107      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x5b4>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	0e9b      	lsrs	r3, r3, #26
 8002b42:	3301      	adds	r3, #1
 8002b44:	069b      	lsls	r3, r3, #26
 8002b46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b4a:	e015      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x5e0>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b54:	fa93 f3a3 	rbit	r3, r3
 8002b58:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002b64:	2320      	movs	r3, #32
 8002b66:	e003      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6a:	fab3 f383 	clz	r3, r3
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	3301      	adds	r3, #1
 8002b72:	069b      	lsls	r3, r3, #26
 8002b74:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d109      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x600>
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	0e9b      	lsrs	r3, r3, #26
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	f003 031f 	and.w	r3, r3, #31
 8002b90:	2101      	movs	r1, #1
 8002b92:	fa01 f303 	lsl.w	r3, r1, r3
 8002b96:	e017      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x630>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9e:	6a3b      	ldr	r3, [r7, #32]
 8002ba0:	fa93 f3a3 	rbit	r3, r3
 8002ba4:	61fb      	str	r3, [r7, #28]
  return result;
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002bb0:	2320      	movs	r3, #32
 8002bb2:	e003      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb6:	fab3 f383 	clz	r3, r3
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	f003 031f 	and.w	r3, r3, #31
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc8:	ea42 0103 	orr.w	r1, r2, r3
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10d      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x65c>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	0e9b      	lsrs	r3, r3, #26
 8002bde:	3301      	adds	r3, #1
 8002be0:	f003 021f 	and.w	r2, r3, #31
 8002be4:	4613      	mov	r3, r2
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	4413      	add	r3, r2
 8002bea:	3b1e      	subs	r3, #30
 8002bec:	051b      	lsls	r3, r3, #20
 8002bee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bf2:	e01d      	b.n	8002c30 <HAL_ADC_ConfigChannel+0x698>
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	fa93 f3a3 	rbit	r3, r3
 8002c00:	613b      	str	r3, [r7, #16]
  return result;
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d103      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002c0c:	2320      	movs	r3, #32
 8002c0e:	e005      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x684>
 8002c10:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	fab3 f383 	clz	r3, r3
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	f003 021f 	and.w	r2, r3, #31
 8002c22:	4613      	mov	r3, r2
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	4413      	add	r3, r2
 8002c28:	3b1e      	subs	r3, #30
 8002c2a:	051b      	lsls	r3, r3, #20
 8002c2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c30:	430b      	orrs	r3, r1
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	6892      	ldr	r2, [r2, #8]
 8002c36:	4619      	mov	r1, r3
 8002c38:	f7ff f9ce 	bl	8001fd8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	4b3d      	ldr	r3, [pc, #244]	; (8002d38 <HAL_ADC_ConfigChannel+0x7a0>)
 8002c42:	4013      	ands	r3, r2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d06c      	beq.n	8002d22 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c48:	483c      	ldr	r0, [pc, #240]	; (8002d3c <HAL_ADC_ConfigChannel+0x7a4>)
 8002c4a:	f7ff f923 	bl	8001e94 <LL_ADC_GetCommonPathInternalCh>
 8002c4e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a3a      	ldr	r2, [pc, #232]	; (8002d40 <HAL_ADC_ConfigChannel+0x7a8>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d127      	bne.n	8002cac <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d121      	bne.n	8002cac <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a35      	ldr	r2, [pc, #212]	; (8002d44 <HAL_ADC_ConfigChannel+0x7ac>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d157      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c76:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	482f      	ldr	r0, [pc, #188]	; (8002d3c <HAL_ADC_ConfigChannel+0x7a4>)
 8002c7e:	f7ff f8f6 	bl	8001e6e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c82:	4b31      	ldr	r3, [pc, #196]	; (8002d48 <HAL_ADC_ConfigChannel+0x7b0>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	099b      	lsrs	r3, r3, #6
 8002c88:	4a30      	ldr	r2, [pc, #192]	; (8002d4c <HAL_ADC_ConfigChannel+0x7b4>)
 8002c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8e:	099b      	lsrs	r3, r3, #6
 8002c90:	1c5a      	adds	r2, r3, #1
 8002c92:	4613      	mov	r3, r2
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	4413      	add	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c9c:	e002      	b.n	8002ca4 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1f9      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002caa:	e03a      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a27      	ldr	r2, [pc, #156]	; (8002d50 <HAL_ADC_ConfigChannel+0x7b8>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d113      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x746>
 8002cb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10d      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a1f      	ldr	r2, [pc, #124]	; (8002d44 <HAL_ADC_ConfigChannel+0x7ac>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d12a      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ccc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4819      	ldr	r0, [pc, #100]	; (8002d3c <HAL_ADC_ConfigChannel+0x7a4>)
 8002cd8:	f7ff f8c9 	bl	8001e6e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cdc:	e021      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a1c      	ldr	r2, [pc, #112]	; (8002d54 <HAL_ADC_ConfigChannel+0x7bc>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d11c      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ce8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d116      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a12      	ldr	r2, [pc, #72]	; (8002d44 <HAL_ADC_ConfigChannel+0x7ac>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d111      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cfe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d02:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d06:	4619      	mov	r1, r3
 8002d08:	480c      	ldr	r0, [pc, #48]	; (8002d3c <HAL_ADC_ConfigChannel+0x7a4>)
 8002d0a:	f7ff f8b0 	bl	8001e6e <LL_ADC_SetCommonPathInternalCh>
 8002d0e:	e008      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d14:	f043 0220 	orr.w	r2, r3, #32
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d2a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	37d8      	adds	r7, #216	; 0xd8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	80080000 	.word	0x80080000
 8002d3c:	50040300 	.word	0x50040300
 8002d40:	c7520000 	.word	0xc7520000
 8002d44:	50040000 	.word	0x50040000
 8002d48:	20000000 	.word	0x20000000
 8002d4c:	053e2d63 	.word	0x053e2d63
 8002d50:	cb840000 	.word	0xcb840000
 8002d54:	80000001 	.word	0x80000001

08002d58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff f9e9 	bl	800213c <LL_ADC_IsEnabled>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d14d      	bne.n	8002e0c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689a      	ldr	r2, [r3, #8]
 8002d76:	4b28      	ldr	r3, [pc, #160]	; (8002e18 <ADC_Enable+0xc0>)
 8002d78:	4013      	ands	r3, r2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00d      	beq.n	8002d9a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d82:	f043 0210 	orr.w	r2, r3, #16
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8e:	f043 0201 	orr.w	r2, r3, #1
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e039      	b.n	8002e0e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff f9b8 	bl	8002114 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002da4:	f7ff f820 	bl	8001de8 <HAL_GetTick>
 8002da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002daa:	e028      	b.n	8002dfe <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff f9c3 	bl	800213c <LL_ADC_IsEnabled>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d104      	bne.n	8002dc6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff f9a7 	bl	8002114 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002dc6:	f7ff f80f 	bl	8001de8 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d914      	bls.n	8002dfe <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d00d      	beq.n	8002dfe <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de6:	f043 0210 	orr.w	r2, r3, #16
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df2:	f043 0201 	orr.w	r2, r3, #1
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e007      	b.n	8002e0e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d1cf      	bne.n	8002dac <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	8000003f 	.word	0x8000003f

08002e1c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e28:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d14b      	bne.n	8002ece <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0308 	and.w	r3, r3, #8
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d021      	beq.n	8002e94 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff f880 	bl	8001f5a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d032      	beq.n	8002ec6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d12b      	bne.n	8002ec6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d11f      	bne.n	8002ec6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8a:	f043 0201 	orr.w	r2, r3, #1
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	655a      	str	r2, [r3, #84]	; 0x54
 8002e92:	e018      	b.n	8002ec6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d111      	bne.n	8002ec6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d105      	bne.n	8002ec6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ebe:	f043 0201 	orr.w	r2, r3, #1
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f7fe fa38 	bl	800133c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ecc:	e00e      	b.n	8002eec <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed2:	f003 0310 	and.w	r3, r3, #16
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f7ff fb52 	bl	8002584 <HAL_ADC_ErrorCallback>
}
 8002ee0:	e004      	b.n	8002eec <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	4798      	blx	r3
}
 8002eec:	bf00      	nop
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f00:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f7ff fb34 	bl	8002570 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f08:	bf00      	nop
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2e:	f043 0204 	orr.w	r2, r3, #4
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f7ff fb24 	bl	8002584 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f3c:	bf00      	nop
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f54:	4b0c      	ldr	r3, [pc, #48]	; (8002f88 <__NVIC_SetPriorityGrouping+0x44>)
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f5a:	68ba      	ldr	r2, [r7, #8]
 8002f5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f60:	4013      	ands	r3, r2
 8002f62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f76:	4a04      	ldr	r2, [pc, #16]	; (8002f88 <__NVIC_SetPriorityGrouping+0x44>)
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	60d3      	str	r3, [r2, #12]
}
 8002f7c:	bf00      	nop
 8002f7e:	3714      	adds	r7, #20
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	e000ed00 	.word	0xe000ed00

08002f8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f90:	4b04      	ldr	r3, [pc, #16]	; (8002fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	0a1b      	lsrs	r3, r3, #8
 8002f96:	f003 0307 	and.w	r3, r3, #7
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	e000ed00 	.word	0xe000ed00

08002fa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	db0b      	blt.n	8002fd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fba:	79fb      	ldrb	r3, [r7, #7]
 8002fbc:	f003 021f 	and.w	r2, r3, #31
 8002fc0:	4907      	ldr	r1, [pc, #28]	; (8002fe0 <__NVIC_EnableIRQ+0x38>)
 8002fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc6:	095b      	lsrs	r3, r3, #5
 8002fc8:	2001      	movs	r0, #1
 8002fca:	fa00 f202 	lsl.w	r2, r0, r2
 8002fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	e000e100 	.word	0xe000e100

08002fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	4603      	mov	r3, r0
 8002fec:	6039      	str	r1, [r7, #0]
 8002fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	db0a      	blt.n	800300e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	490c      	ldr	r1, [pc, #48]	; (8003030 <__NVIC_SetPriority+0x4c>)
 8002ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003002:	0112      	lsls	r2, r2, #4
 8003004:	b2d2      	uxtb	r2, r2
 8003006:	440b      	add	r3, r1
 8003008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800300c:	e00a      	b.n	8003024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	b2da      	uxtb	r2, r3
 8003012:	4908      	ldr	r1, [pc, #32]	; (8003034 <__NVIC_SetPriority+0x50>)
 8003014:	79fb      	ldrb	r3, [r7, #7]
 8003016:	f003 030f 	and.w	r3, r3, #15
 800301a:	3b04      	subs	r3, #4
 800301c:	0112      	lsls	r2, r2, #4
 800301e:	b2d2      	uxtb	r2, r2
 8003020:	440b      	add	r3, r1
 8003022:	761a      	strb	r2, [r3, #24]
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	e000e100 	.word	0xe000e100
 8003034:	e000ed00 	.word	0xe000ed00

08003038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003038:	b480      	push	{r7}
 800303a:	b089      	sub	sp, #36	; 0x24
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	f1c3 0307 	rsb	r3, r3, #7
 8003052:	2b04      	cmp	r3, #4
 8003054:	bf28      	it	cs
 8003056:	2304      	movcs	r3, #4
 8003058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	3304      	adds	r3, #4
 800305e:	2b06      	cmp	r3, #6
 8003060:	d902      	bls.n	8003068 <NVIC_EncodePriority+0x30>
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	3b03      	subs	r3, #3
 8003066:	e000      	b.n	800306a <NVIC_EncodePriority+0x32>
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800306c:	f04f 32ff 	mov.w	r2, #4294967295
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	43da      	mvns	r2, r3
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	401a      	ands	r2, r3
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003080:	f04f 31ff 	mov.w	r1, #4294967295
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	fa01 f303 	lsl.w	r3, r1, r3
 800308a:	43d9      	mvns	r1, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003090:	4313      	orrs	r3, r2
         );
}
 8003092:	4618      	mov	r0, r3
 8003094:	3724      	adds	r7, #36	; 0x24
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
	...

080030a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	3b01      	subs	r3, #1
 80030ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030b0:	d301      	bcc.n	80030b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030b2:	2301      	movs	r3, #1
 80030b4:	e00f      	b.n	80030d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030b6:	4a0a      	ldr	r2, [pc, #40]	; (80030e0 <SysTick_Config+0x40>)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3b01      	subs	r3, #1
 80030bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030be:	210f      	movs	r1, #15
 80030c0:	f04f 30ff 	mov.w	r0, #4294967295
 80030c4:	f7ff ff8e 	bl	8002fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030c8:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <SysTick_Config+0x40>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030ce:	4b04      	ldr	r3, [pc, #16]	; (80030e0 <SysTick_Config+0x40>)
 80030d0:	2207      	movs	r2, #7
 80030d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	e000e010 	.word	0xe000e010

080030e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f7ff ff29 	bl	8002f44 <__NVIC_SetPriorityGrouping>
}
 80030f2:	bf00      	nop
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b086      	sub	sp, #24
 80030fe:	af00      	add	r7, sp, #0
 8003100:	4603      	mov	r3, r0
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	607a      	str	r2, [r7, #4]
 8003106:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003108:	2300      	movs	r3, #0
 800310a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800310c:	f7ff ff3e 	bl	8002f8c <__NVIC_GetPriorityGrouping>
 8003110:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	68b9      	ldr	r1, [r7, #8]
 8003116:	6978      	ldr	r0, [r7, #20]
 8003118:	f7ff ff8e 	bl	8003038 <NVIC_EncodePriority>
 800311c:	4602      	mov	r2, r0
 800311e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003122:	4611      	mov	r1, r2
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff ff5d 	bl	8002fe4 <__NVIC_SetPriority>
}
 800312a:	bf00      	nop
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b082      	sub	sp, #8
 8003136:	af00      	add	r7, sp, #0
 8003138:	4603      	mov	r3, r0
 800313a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800313c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff ff31 	bl	8002fa8 <__NVIC_EnableIRQ>
}
 8003146:	bf00      	nop
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b082      	sub	sp, #8
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7ff ffa2 	bl	80030a0 <SysTick_Config>
 800315c:	4603      	mov	r3, r0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
	...

08003168 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e098      	b.n	80032ac <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	461a      	mov	r2, r3
 8003180:	4b4d      	ldr	r3, [pc, #308]	; (80032b8 <HAL_DMA_Init+0x150>)
 8003182:	429a      	cmp	r2, r3
 8003184:	d80f      	bhi.n	80031a6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	461a      	mov	r2, r3
 800318c:	4b4b      	ldr	r3, [pc, #300]	; (80032bc <HAL_DMA_Init+0x154>)
 800318e:	4413      	add	r3, r2
 8003190:	4a4b      	ldr	r2, [pc, #300]	; (80032c0 <HAL_DMA_Init+0x158>)
 8003192:	fba2 2303 	umull	r2, r3, r2, r3
 8003196:	091b      	lsrs	r3, r3, #4
 8003198:	009a      	lsls	r2, r3, #2
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a48      	ldr	r2, [pc, #288]	; (80032c4 <HAL_DMA_Init+0x15c>)
 80031a2:	641a      	str	r2, [r3, #64]	; 0x40
 80031a4:	e00e      	b.n	80031c4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	461a      	mov	r2, r3
 80031ac:	4b46      	ldr	r3, [pc, #280]	; (80032c8 <HAL_DMA_Init+0x160>)
 80031ae:	4413      	add	r3, r2
 80031b0:	4a43      	ldr	r2, [pc, #268]	; (80032c0 <HAL_DMA_Init+0x158>)
 80031b2:	fba2 2303 	umull	r2, r3, r2, r3
 80031b6:	091b      	lsrs	r3, r3, #4
 80031b8:	009a      	lsls	r2, r3, #2
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a42      	ldr	r2, [pc, #264]	; (80032cc <HAL_DMA_Init+0x164>)
 80031c2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80031da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80031e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003200:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	4313      	orrs	r3, r2
 800320c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800321e:	d039      	beq.n	8003294 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003224:	4a27      	ldr	r2, [pc, #156]	; (80032c4 <HAL_DMA_Init+0x15c>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d11a      	bne.n	8003260 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800322a:	4b29      	ldr	r3, [pc, #164]	; (80032d0 <HAL_DMA_Init+0x168>)
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003232:	f003 031c 	and.w	r3, r3, #28
 8003236:	210f      	movs	r1, #15
 8003238:	fa01 f303 	lsl.w	r3, r1, r3
 800323c:	43db      	mvns	r3, r3
 800323e:	4924      	ldr	r1, [pc, #144]	; (80032d0 <HAL_DMA_Init+0x168>)
 8003240:	4013      	ands	r3, r2
 8003242:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003244:	4b22      	ldr	r3, [pc, #136]	; (80032d0 <HAL_DMA_Init+0x168>)
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6859      	ldr	r1, [r3, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003250:	f003 031c 	and.w	r3, r3, #28
 8003254:	fa01 f303 	lsl.w	r3, r1, r3
 8003258:	491d      	ldr	r1, [pc, #116]	; (80032d0 <HAL_DMA_Init+0x168>)
 800325a:	4313      	orrs	r3, r2
 800325c:	600b      	str	r3, [r1, #0]
 800325e:	e019      	b.n	8003294 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003260:	4b1c      	ldr	r3, [pc, #112]	; (80032d4 <HAL_DMA_Init+0x16c>)
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003268:	f003 031c 	and.w	r3, r3, #28
 800326c:	210f      	movs	r1, #15
 800326e:	fa01 f303 	lsl.w	r3, r1, r3
 8003272:	43db      	mvns	r3, r3
 8003274:	4917      	ldr	r1, [pc, #92]	; (80032d4 <HAL_DMA_Init+0x16c>)
 8003276:	4013      	ands	r3, r2
 8003278:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800327a:	4b16      	ldr	r3, [pc, #88]	; (80032d4 <HAL_DMA_Init+0x16c>)
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6859      	ldr	r1, [r3, #4]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003286:	f003 031c 	and.w	r3, r3, #28
 800328a:	fa01 f303 	lsl.w	r3, r1, r3
 800328e:	4911      	ldr	r1, [pc, #68]	; (80032d4 <HAL_DMA_Init+0x16c>)
 8003290:	4313      	orrs	r3, r2
 8003292:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3714      	adds	r7, #20
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	40020407 	.word	0x40020407
 80032bc:	bffdfff8 	.word	0xbffdfff8
 80032c0:	cccccccd 	.word	0xcccccccd
 80032c4:	40020000 	.word	0x40020000
 80032c8:	bffdfbf8 	.word	0xbffdfbf8
 80032cc:	40020400 	.word	0x40020400
 80032d0:	400200a8 	.word	0x400200a8
 80032d4:	400204a8 	.word	0x400204a8

080032d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
 80032e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032e6:	2300      	movs	r3, #0
 80032e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d101      	bne.n	80032f8 <HAL_DMA_Start_IT+0x20>
 80032f4:	2302      	movs	r3, #2
 80032f6:	e04b      	b.n	8003390 <HAL_DMA_Start_IT+0xb8>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b01      	cmp	r3, #1
 800330a:	d13a      	bne.n	8003382 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2202      	movs	r2, #2
 8003310:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0201 	bic.w	r2, r2, #1
 8003328:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	68b9      	ldr	r1, [r7, #8]
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 f8e0 	bl	80034f6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	2b00      	cmp	r3, #0
 800333c:	d008      	beq.n	8003350 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f042 020e 	orr.w	r2, r2, #14
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	e00f      	b.n	8003370 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0204 	bic.w	r2, r2, #4
 800335e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 020a 	orr.w	r2, r2, #10
 800336e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f042 0201 	orr.w	r2, r2, #1
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	e005      	b.n	800338e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800338a:	2302      	movs	r3, #2
 800338c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800338e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003390:	4618      	mov	r0, r3
 8003392:	3718      	adds	r7, #24
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b4:	f003 031c 	and.w	r3, r3, #28
 80033b8:	2204      	movs	r2, #4
 80033ba:	409a      	lsls	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4013      	ands	r3, r2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d026      	beq.n	8003412 <HAL_DMA_IRQHandler+0x7a>
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	f003 0304 	and.w	r3, r3, #4
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d021      	beq.n	8003412 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0320 	and.w	r3, r3, #32
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d107      	bne.n	80033ec <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0204 	bic.w	r2, r2, #4
 80033ea:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f0:	f003 021c 	and.w	r2, r3, #28
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f8:	2104      	movs	r1, #4
 80033fa:	fa01 f202 	lsl.w	r2, r1, r2
 80033fe:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003404:	2b00      	cmp	r3, #0
 8003406:	d071      	beq.n	80034ec <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003410:	e06c      	b.n	80034ec <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003416:	f003 031c 	and.w	r3, r3, #28
 800341a:	2202      	movs	r2, #2
 800341c:	409a      	lsls	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4013      	ands	r3, r2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d02e      	beq.n	8003484 <HAL_DMA_IRQHandler+0xec>
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d029      	beq.n	8003484 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0320 	and.w	r3, r3, #32
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10b      	bne.n	8003456 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 020a 	bic.w	r2, r2, #10
 800344c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345a:	f003 021c 	and.w	r2, r3, #28
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	2102      	movs	r1, #2
 8003464:	fa01 f202 	lsl.w	r2, r1, r2
 8003468:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003476:	2b00      	cmp	r3, #0
 8003478:	d038      	beq.n	80034ec <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003482:	e033      	b.n	80034ec <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003488:	f003 031c 	and.w	r3, r3, #28
 800348c:	2208      	movs	r2, #8
 800348e:	409a      	lsls	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	4013      	ands	r3, r2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d02a      	beq.n	80034ee <HAL_DMA_IRQHandler+0x156>
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d025      	beq.n	80034ee <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 020e 	bic.w	r2, r2, #14
 80034b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b6:	f003 021c 	and.w	r2, r3, #28
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	2101      	movs	r1, #1
 80034c0:	fa01 f202 	lsl.w	r2, r1, r2
 80034c4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d004      	beq.n	80034ee <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80034ec:	bf00      	nop
 80034ee:	bf00      	nop
}
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034f6:	b480      	push	{r7}
 80034f8:	b085      	sub	sp, #20
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	60f8      	str	r0, [r7, #12]
 80034fe:	60b9      	str	r1, [r7, #8]
 8003500:	607a      	str	r2, [r7, #4]
 8003502:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003508:	f003 021c 	and.w	r2, r3, #28
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	2101      	movs	r1, #1
 8003512:	fa01 f202 	lsl.w	r2, r1, r2
 8003516:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2b10      	cmp	r3, #16
 8003526:	d108      	bne.n	800353a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003538:	e007      	b.n	800354a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	60da      	str	r2, [r3, #12]
}
 800354a:	bf00      	nop
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
	...

08003558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003558:	b480      	push	{r7}
 800355a:	b087      	sub	sp, #28
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003562:	2300      	movs	r3, #0
 8003564:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003566:	e148      	b.n	80037fa <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	2101      	movs	r1, #1
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	fa01 f303 	lsl.w	r3, r1, r3
 8003574:	4013      	ands	r3, r2
 8003576:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 813a 	beq.w	80037f4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d00b      	beq.n	80035a0 <HAL_GPIO_Init+0x48>
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	2b02      	cmp	r3, #2
 800358e:	d007      	beq.n	80035a0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003594:	2b11      	cmp	r3, #17
 8003596:	d003      	beq.n	80035a0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2b12      	cmp	r3, #18
 800359e:	d130      	bne.n	8003602 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	2203      	movs	r2, #3
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	43db      	mvns	r3, r3
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	4013      	ands	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	68da      	ldr	r2, [r3, #12]
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035d6:	2201      	movs	r2, #1
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	43db      	mvns	r3, r3
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	4013      	ands	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	091b      	lsrs	r3, r3, #4
 80035ec:	f003 0201 	and.w	r2, r3, #1
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	2203      	movs	r2, #3
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	43db      	mvns	r3, r3
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	4013      	ands	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	689a      	ldr	r2, [r3, #8]
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	fa02 f303 	lsl.w	r3, r2, r3
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	4313      	orrs	r3, r2
 800362a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b02      	cmp	r3, #2
 8003638:	d003      	beq.n	8003642 <HAL_GPIO_Init+0xea>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b12      	cmp	r3, #18
 8003640:	d123      	bne.n	800368a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	08da      	lsrs	r2, r3, #3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	3208      	adds	r2, #8
 800364a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800364e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	220f      	movs	r2, #15
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	43db      	mvns	r3, r3
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	4013      	ands	r3, r2
 8003664:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	691a      	ldr	r2, [r3, #16]
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	fa02 f303 	lsl.w	r3, r2, r3
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	4313      	orrs	r3, r2
 800367a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	08da      	lsrs	r2, r3, #3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	3208      	adds	r2, #8
 8003684:	6939      	ldr	r1, [r7, #16]
 8003686:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	2203      	movs	r2, #3
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	43db      	mvns	r3, r3
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	4013      	ands	r3, r2
 80036a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f003 0203 	and.w	r2, r3, #3
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 8094 	beq.w	80037f4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036cc:	4b52      	ldr	r3, [pc, #328]	; (8003818 <HAL_GPIO_Init+0x2c0>)
 80036ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d0:	4a51      	ldr	r2, [pc, #324]	; (8003818 <HAL_GPIO_Init+0x2c0>)
 80036d2:	f043 0301 	orr.w	r3, r3, #1
 80036d6:	6613      	str	r3, [r2, #96]	; 0x60
 80036d8:	4b4f      	ldr	r3, [pc, #316]	; (8003818 <HAL_GPIO_Init+0x2c0>)
 80036da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	60bb      	str	r3, [r7, #8]
 80036e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80036e4:	4a4d      	ldr	r2, [pc, #308]	; (800381c <HAL_GPIO_Init+0x2c4>)
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	089b      	lsrs	r3, r3, #2
 80036ea:	3302      	adds	r3, #2
 80036ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f003 0303 	and.w	r3, r3, #3
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	220f      	movs	r2, #15
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	43db      	mvns	r3, r3
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	4013      	ands	r3, r2
 8003706:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800370e:	d00d      	beq.n	800372c <HAL_GPIO_Init+0x1d4>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a43      	ldr	r2, [pc, #268]	; (8003820 <HAL_GPIO_Init+0x2c8>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d007      	beq.n	8003728 <HAL_GPIO_Init+0x1d0>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a42      	ldr	r2, [pc, #264]	; (8003824 <HAL_GPIO_Init+0x2cc>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d101      	bne.n	8003724 <HAL_GPIO_Init+0x1cc>
 8003720:	2302      	movs	r3, #2
 8003722:	e004      	b.n	800372e <HAL_GPIO_Init+0x1d6>
 8003724:	2307      	movs	r3, #7
 8003726:	e002      	b.n	800372e <HAL_GPIO_Init+0x1d6>
 8003728:	2301      	movs	r3, #1
 800372a:	e000      	b.n	800372e <HAL_GPIO_Init+0x1d6>
 800372c:	2300      	movs	r3, #0
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	f002 0203 	and.w	r2, r2, #3
 8003734:	0092      	lsls	r2, r2, #2
 8003736:	4093      	lsls	r3, r2
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	4313      	orrs	r3, r2
 800373c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800373e:	4937      	ldr	r1, [pc, #220]	; (800381c <HAL_GPIO_Init+0x2c4>)
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	089b      	lsrs	r3, r3, #2
 8003744:	3302      	adds	r3, #2
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800374c:	4b36      	ldr	r3, [pc, #216]	; (8003828 <HAL_GPIO_Init+0x2d0>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	43db      	mvns	r3, r3
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	4013      	ands	r3, r2
 800375a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d003      	beq.n	8003770 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003770:	4a2d      	ldr	r2, [pc, #180]	; (8003828 <HAL_GPIO_Init+0x2d0>)
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003776:	4b2c      	ldr	r3, [pc, #176]	; (8003828 <HAL_GPIO_Init+0x2d0>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	43db      	mvns	r3, r3
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	4013      	ands	r3, r2
 8003784:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4313      	orrs	r3, r2
 8003798:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800379a:	4a23      	ldr	r2, [pc, #140]	; (8003828 <HAL_GPIO_Init+0x2d0>)
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037a0:	4b21      	ldr	r3, [pc, #132]	; (8003828 <HAL_GPIO_Init+0x2d0>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	43db      	mvns	r3, r3
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	4013      	ands	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037c4:	4a18      	ldr	r2, [pc, #96]	; (8003828 <HAL_GPIO_Init+0x2d0>)
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037ca:	4b17      	ldr	r3, [pc, #92]	; (8003828 <HAL_GPIO_Init+0x2d0>)
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	43db      	mvns	r3, r3
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	4013      	ands	r3, r2
 80037d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037ee:	4a0e      	ldr	r2, [pc, #56]	; (8003828 <HAL_GPIO_Init+0x2d0>)
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	3301      	adds	r3, #1
 80037f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	fa22 f303 	lsr.w	r3, r2, r3
 8003804:	2b00      	cmp	r3, #0
 8003806:	f47f aeaf 	bne.w	8003568 <HAL_GPIO_Init+0x10>
  }
}
 800380a:	bf00      	nop
 800380c:	bf00      	nop
 800380e:	371c      	adds	r7, #28
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	40021000 	.word	0x40021000
 800381c:	40010000 	.word	0x40010000
 8003820:	48000400 	.word	0x48000400
 8003824:	48000800 	.word	0x48000800
 8003828:	40010400 	.word	0x40010400

0800382c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	460b      	mov	r3, r1
 8003836:	807b      	strh	r3, [r7, #2]
 8003838:	4613      	mov	r3, r2
 800383a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800383c:	787b      	ldrb	r3, [r7, #1]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003842:	887a      	ldrh	r2, [r7, #2]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003848:	e002      	b.n	8003850 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800384a:	887a      	ldrh	r2, [r7, #2]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003860:	4b05      	ldr	r3, [pc, #20]	; (8003878 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a04      	ldr	r2, [pc, #16]	; (8003878 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800386a:	6013      	str	r3, [r2, #0]
}
 800386c:	bf00      	nop
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	40007000 	.word	0x40007000

0800387c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003880:	4b04      	ldr	r3, [pc, #16]	; (8003894 <HAL_PWREx_GetVoltageRange+0x18>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003888:	4618      	mov	r0, r3
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	40007000 	.word	0x40007000

08003898 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038a6:	d130      	bne.n	800390a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80038a8:	4b23      	ldr	r3, [pc, #140]	; (8003938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038b4:	d038      	beq.n	8003928 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038b6:	4b20      	ldr	r3, [pc, #128]	; (8003938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038be:	4a1e      	ldr	r2, [pc, #120]	; (8003938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038c6:	4b1d      	ldr	r3, [pc, #116]	; (800393c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2232      	movs	r2, #50	; 0x32
 80038cc:	fb02 f303 	mul.w	r3, r2, r3
 80038d0:	4a1b      	ldr	r2, [pc, #108]	; (8003940 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80038d2:	fba2 2303 	umull	r2, r3, r2, r3
 80038d6:	0c9b      	lsrs	r3, r3, #18
 80038d8:	3301      	adds	r3, #1
 80038da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038dc:	e002      	b.n	80038e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	3b01      	subs	r3, #1
 80038e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038e4:	4b14      	ldr	r3, [pc, #80]	; (8003938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038f0:	d102      	bne.n	80038f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1f2      	bne.n	80038de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038f8:	4b0f      	ldr	r3, [pc, #60]	; (8003938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003904:	d110      	bne.n	8003928 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e00f      	b.n	800392a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800390a:	4b0b      	ldr	r3, [pc, #44]	; (8003938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003916:	d007      	beq.n	8003928 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003918:	4b07      	ldr	r3, [pc, #28]	; (8003938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003920:	4a05      	ldr	r2, [pc, #20]	; (8003938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003922:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003926:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	40007000 	.word	0x40007000
 800393c:	20000000 	.word	0x20000000
 8003940:	431bde83 	.word	0x431bde83

08003944 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b088      	sub	sp, #32
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d102      	bne.n	8003958 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	f000 bc11 	b.w	800417a <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003958:	4ba0      	ldr	r3, [pc, #640]	; (8003bdc <HAL_RCC_OscConfig+0x298>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f003 030c 	and.w	r3, r3, #12
 8003960:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003962:	4b9e      	ldr	r3, [pc, #632]	; (8003bdc <HAL_RCC_OscConfig+0x298>)
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0310 	and.w	r3, r3, #16
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 80e4 	beq.w	8003b42 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d007      	beq.n	8003990 <HAL_RCC_OscConfig+0x4c>
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	2b0c      	cmp	r3, #12
 8003984:	f040 808b 	bne.w	8003a9e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	2b01      	cmp	r3, #1
 800398c:	f040 8087 	bne.w	8003a9e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003990:	4b92      	ldr	r3, [pc, #584]	; (8003bdc <HAL_RCC_OscConfig+0x298>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d005      	beq.n	80039a8 <HAL_RCC_OscConfig+0x64>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d101      	bne.n	80039a8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e3e8      	b.n	800417a <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a1a      	ldr	r2, [r3, #32]
 80039ac:	4b8b      	ldr	r3, [pc, #556]	; (8003bdc <HAL_RCC_OscConfig+0x298>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0308 	and.w	r3, r3, #8
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d004      	beq.n	80039c2 <HAL_RCC_OscConfig+0x7e>
 80039b8:	4b88      	ldr	r3, [pc, #544]	; (8003bdc <HAL_RCC_OscConfig+0x298>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039c0:	e005      	b.n	80039ce <HAL_RCC_OscConfig+0x8a>
 80039c2:	4b86      	ldr	r3, [pc, #536]	; (8003bdc <HAL_RCC_OscConfig+0x298>)
 80039c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039c8:	091b      	lsrs	r3, r3, #4
 80039ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d223      	bcs.n	8003a1a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 fd7a 	bl	80044d0 <RCC_SetFlashLatencyFromMSIRange>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e3c9      	b.n	800417a <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039e6:	4b7d      	ldr	r3, [pc, #500]	; (8003bdc <HAL_RCC_OscConfig+0x298>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a7c      	ldr	r2, [pc, #496]	; (8003bdc <HAL_RCC_OscConfig+0x298>)
 80039ec:	f043 0308 	orr.w	r3, r3, #8
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	4b7a      	ldr	r3, [pc, #488]	; (8003bdc <HAL_RCC_OscConfig+0x298>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	4977      	ldr	r1, [pc, #476]	; (8003bdc <HAL_RCC_OscConfig+0x298>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a04:	4b75      	ldr	r3, [pc, #468]	; (8003bdc <HAL_RCC_OscConfig+0x298>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	69db      	ldr	r3, [r3, #28]
 8003a10:	021b      	lsls	r3, r3, #8
 8003a12:	4972      	ldr	r1, [pc, #456]	; (8003bdc <HAL_RCC_OscConfig+0x298>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	604b      	str	r3, [r1, #4]
 8003a18:	e025      	b.n	8003a66 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a1a:	4b70      	ldr	r3, [pc, #448]	; (8003bdc <HAL_RCC_OscConfig+0x298>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a6f      	ldr	r2, [pc, #444]	; (8003bdc <HAL_RCC_OscConfig+0x298>)
 8003a20:	f043 0308 	orr.w	r3, r3, #8
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	4b6d      	ldr	r3, [pc, #436]	; (8003bdc <HAL_RCC_OscConfig+0x298>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	496a      	ldr	r1, [pc, #424]	; (8003bdc <HAL_RCC_OscConfig+0x298>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a38:	4b68      	ldr	r3, [pc, #416]	; (8003bdc <HAL_RCC_OscConfig+0x298>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	69db      	ldr	r3, [r3, #28]
 8003a44:	021b      	lsls	r3, r3, #8
 8003a46:	4965      	ldr	r1, [pc, #404]	; (8003bdc <HAL_RCC_OscConfig+0x298>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d109      	bne.n	8003a66 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f000 fd3a 	bl	80044d0 <RCC_SetFlashLatencyFromMSIRange>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e389      	b.n	800417a <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a66:	f000 fc6f 	bl	8004348 <HAL_RCC_GetSysClockFreq>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	4b5b      	ldr	r3, [pc, #364]	; (8003bdc <HAL_RCC_OscConfig+0x298>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	091b      	lsrs	r3, r3, #4
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	495a      	ldr	r1, [pc, #360]	; (8003be0 <HAL_RCC_OscConfig+0x29c>)
 8003a78:	5ccb      	ldrb	r3, [r1, r3]
 8003a7a:	f003 031f 	and.w	r3, r3, #31
 8003a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a82:	4a58      	ldr	r2, [pc, #352]	; (8003be4 <HAL_RCC_OscConfig+0x2a0>)
 8003a84:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a86:	4b58      	ldr	r3, [pc, #352]	; (8003be8 <HAL_RCC_OscConfig+0x2a4>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fe f95c 	bl	8001d48 <HAL_InitTick>
 8003a90:	4603      	mov	r3, r0
 8003a92:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d052      	beq.n	8003b40 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003a9a:	7bfb      	ldrb	r3, [r7, #15]
 8003a9c:	e36d      	b.n	800417a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d032      	beq.n	8003b0c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003aa6:	4b4d      	ldr	r3, [pc, #308]	; (8003bdc <HAL_RCC_OscConfig+0x298>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a4c      	ldr	r2, [pc, #304]	; (8003bdc <HAL_RCC_OscConfig+0x298>)
 8003aac:	f043 0301 	orr.w	r3, r3, #1
 8003ab0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ab2:	f7fe f999 	bl	8001de8 <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ab8:	e008      	b.n	8003acc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003aba:	f7fe f995 	bl	8001de8 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e356      	b.n	800417a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003acc:	4b43      	ldr	r3, [pc, #268]	; (8003bdc <HAL_RCC_OscConfig+0x298>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0f0      	beq.n	8003aba <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ad8:	4b40      	ldr	r3, [pc, #256]	; (8003bdc <HAL_RCC_OscConfig+0x298>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a3f      	ldr	r2, [pc, #252]	; (8003bdc <HAL_RCC_OscConfig+0x298>)
 8003ade:	f043 0308 	orr.w	r3, r3, #8
 8003ae2:	6013      	str	r3, [r2, #0]
 8003ae4:	4b3d      	ldr	r3, [pc, #244]	; (8003bdc <HAL_RCC_OscConfig+0x298>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	493a      	ldr	r1, [pc, #232]	; (8003bdc <HAL_RCC_OscConfig+0x298>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003af6:	4b39      	ldr	r3, [pc, #228]	; (8003bdc <HAL_RCC_OscConfig+0x298>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	021b      	lsls	r3, r3, #8
 8003b04:	4935      	ldr	r1, [pc, #212]	; (8003bdc <HAL_RCC_OscConfig+0x298>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	604b      	str	r3, [r1, #4]
 8003b0a:	e01a      	b.n	8003b42 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b0c:	4b33      	ldr	r3, [pc, #204]	; (8003bdc <HAL_RCC_OscConfig+0x298>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a32      	ldr	r2, [pc, #200]	; (8003bdc <HAL_RCC_OscConfig+0x298>)
 8003b12:	f023 0301 	bic.w	r3, r3, #1
 8003b16:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b18:	f7fe f966 	bl	8001de8 <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b20:	f7fe f962 	bl	8001de8 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e323      	b.n	800417a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b32:	4b2a      	ldr	r3, [pc, #168]	; (8003bdc <HAL_RCC_OscConfig+0x298>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1f0      	bne.n	8003b20 <HAL_RCC_OscConfig+0x1dc>
 8003b3e:	e000      	b.n	8003b42 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b40:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d073      	beq.n	8003c36 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	d005      	beq.n	8003b60 <HAL_RCC_OscConfig+0x21c>
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	2b0c      	cmp	r3, #12
 8003b58:	d10e      	bne.n	8003b78 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	2b03      	cmp	r3, #3
 8003b5e:	d10b      	bne.n	8003b78 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b60:	4b1e      	ldr	r3, [pc, #120]	; (8003bdc <HAL_RCC_OscConfig+0x298>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d063      	beq.n	8003c34 <HAL_RCC_OscConfig+0x2f0>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d15f      	bne.n	8003c34 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e300      	b.n	800417a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b80:	d106      	bne.n	8003b90 <HAL_RCC_OscConfig+0x24c>
 8003b82:	4b16      	ldr	r3, [pc, #88]	; (8003bdc <HAL_RCC_OscConfig+0x298>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a15      	ldr	r2, [pc, #84]	; (8003bdc <HAL_RCC_OscConfig+0x298>)
 8003b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b8c:	6013      	str	r3, [r2, #0]
 8003b8e:	e01d      	b.n	8003bcc <HAL_RCC_OscConfig+0x288>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b98:	d10c      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x270>
 8003b9a:	4b10      	ldr	r3, [pc, #64]	; (8003bdc <HAL_RCC_OscConfig+0x298>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a0f      	ldr	r2, [pc, #60]	; (8003bdc <HAL_RCC_OscConfig+0x298>)
 8003ba0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	4b0d      	ldr	r3, [pc, #52]	; (8003bdc <HAL_RCC_OscConfig+0x298>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a0c      	ldr	r2, [pc, #48]	; (8003bdc <HAL_RCC_OscConfig+0x298>)
 8003bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	e00b      	b.n	8003bcc <HAL_RCC_OscConfig+0x288>
 8003bb4:	4b09      	ldr	r3, [pc, #36]	; (8003bdc <HAL_RCC_OscConfig+0x298>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a08      	ldr	r2, [pc, #32]	; (8003bdc <HAL_RCC_OscConfig+0x298>)
 8003bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bbe:	6013      	str	r3, [r2, #0]
 8003bc0:	4b06      	ldr	r3, [pc, #24]	; (8003bdc <HAL_RCC_OscConfig+0x298>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a05      	ldr	r2, [pc, #20]	; (8003bdc <HAL_RCC_OscConfig+0x298>)
 8003bc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d01b      	beq.n	8003c0c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd4:	f7fe f908 	bl	8001de8 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bda:	e010      	b.n	8003bfe <HAL_RCC_OscConfig+0x2ba>
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	08006c70 	.word	0x08006c70
 8003be4:	20000000 	.word	0x20000000
 8003be8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bec:	f7fe f8fc 	bl	8001de8 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b64      	cmp	r3, #100	; 0x64
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e2bd      	b.n	800417a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bfe:	4baf      	ldr	r3, [pc, #700]	; (8003ebc <HAL_RCC_OscConfig+0x578>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0f0      	beq.n	8003bec <HAL_RCC_OscConfig+0x2a8>
 8003c0a:	e014      	b.n	8003c36 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0c:	f7fe f8ec 	bl	8001de8 <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c14:	f7fe f8e8 	bl	8001de8 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b64      	cmp	r3, #100	; 0x64
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e2a9      	b.n	800417a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c26:	4ba5      	ldr	r3, [pc, #660]	; (8003ebc <HAL_RCC_OscConfig+0x578>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1f0      	bne.n	8003c14 <HAL_RCC_OscConfig+0x2d0>
 8003c32:	e000      	b.n	8003c36 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d060      	beq.n	8003d04 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d005      	beq.n	8003c54 <HAL_RCC_OscConfig+0x310>
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	2b0c      	cmp	r3, #12
 8003c4c:	d119      	bne.n	8003c82 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d116      	bne.n	8003c82 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c54:	4b99      	ldr	r3, [pc, #612]	; (8003ebc <HAL_RCC_OscConfig+0x578>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d005      	beq.n	8003c6c <HAL_RCC_OscConfig+0x328>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e286      	b.n	800417a <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c6c:	4b93      	ldr	r3, [pc, #588]	; (8003ebc <HAL_RCC_OscConfig+0x578>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	061b      	lsls	r3, r3, #24
 8003c7a:	4990      	ldr	r1, [pc, #576]	; (8003ebc <HAL_RCC_OscConfig+0x578>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c80:	e040      	b.n	8003d04 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d023      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c8a:	4b8c      	ldr	r3, [pc, #560]	; (8003ebc <HAL_RCC_OscConfig+0x578>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a8b      	ldr	r2, [pc, #556]	; (8003ebc <HAL_RCC_OscConfig+0x578>)
 8003c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c96:	f7fe f8a7 	bl	8001de8 <HAL_GetTick>
 8003c9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c9e:	f7fe f8a3 	bl	8001de8 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e264      	b.n	800417a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cb0:	4b82      	ldr	r3, [pc, #520]	; (8003ebc <HAL_RCC_OscConfig+0x578>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0f0      	beq.n	8003c9e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cbc:	4b7f      	ldr	r3, [pc, #508]	; (8003ebc <HAL_RCC_OscConfig+0x578>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	061b      	lsls	r3, r3, #24
 8003cca:	497c      	ldr	r1, [pc, #496]	; (8003ebc <HAL_RCC_OscConfig+0x578>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	604b      	str	r3, [r1, #4]
 8003cd0:	e018      	b.n	8003d04 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cd2:	4b7a      	ldr	r3, [pc, #488]	; (8003ebc <HAL_RCC_OscConfig+0x578>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a79      	ldr	r2, [pc, #484]	; (8003ebc <HAL_RCC_OscConfig+0x578>)
 8003cd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cde:	f7fe f883 	bl	8001de8 <HAL_GetTick>
 8003ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ce4:	e008      	b.n	8003cf8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ce6:	f7fe f87f 	bl	8001de8 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e240      	b.n	800417a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cf8:	4b70      	ldr	r3, [pc, #448]	; (8003ebc <HAL_RCC_OscConfig+0x578>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1f0      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0308 	and.w	r3, r3, #8
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d03c      	beq.n	8003d8a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d01c      	beq.n	8003d52 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d18:	4b68      	ldr	r3, [pc, #416]	; (8003ebc <HAL_RCC_OscConfig+0x578>)
 8003d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d1e:	4a67      	ldr	r2, [pc, #412]	; (8003ebc <HAL_RCC_OscConfig+0x578>)
 8003d20:	f043 0301 	orr.w	r3, r3, #1
 8003d24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d28:	f7fe f85e 	bl	8001de8 <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d30:	f7fe f85a 	bl	8001de8 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e21b      	b.n	800417a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d42:	4b5e      	ldr	r3, [pc, #376]	; (8003ebc <HAL_RCC_OscConfig+0x578>)
 8003d44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0ef      	beq.n	8003d30 <HAL_RCC_OscConfig+0x3ec>
 8003d50:	e01b      	b.n	8003d8a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d52:	4b5a      	ldr	r3, [pc, #360]	; (8003ebc <HAL_RCC_OscConfig+0x578>)
 8003d54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d58:	4a58      	ldr	r2, [pc, #352]	; (8003ebc <HAL_RCC_OscConfig+0x578>)
 8003d5a:	f023 0301 	bic.w	r3, r3, #1
 8003d5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d62:	f7fe f841 	bl	8001de8 <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d68:	e008      	b.n	8003d7c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d6a:	f7fe f83d 	bl	8001de8 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e1fe      	b.n	800417a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d7c:	4b4f      	ldr	r3, [pc, #316]	; (8003ebc <HAL_RCC_OscConfig+0x578>)
 8003d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1ef      	bne.n	8003d6a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0304 	and.w	r3, r3, #4
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 80a6 	beq.w	8003ee4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d9c:	4b47      	ldr	r3, [pc, #284]	; (8003ebc <HAL_RCC_OscConfig+0x578>)
 8003d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10d      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003da8:	4b44      	ldr	r3, [pc, #272]	; (8003ebc <HAL_RCC_OscConfig+0x578>)
 8003daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dac:	4a43      	ldr	r2, [pc, #268]	; (8003ebc <HAL_RCC_OscConfig+0x578>)
 8003dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003db2:	6593      	str	r3, [r2, #88]	; 0x58
 8003db4:	4b41      	ldr	r3, [pc, #260]	; (8003ebc <HAL_RCC_OscConfig+0x578>)
 8003db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dbc:	60bb      	str	r3, [r7, #8]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dc4:	4b3e      	ldr	r3, [pc, #248]	; (8003ec0 <HAL_RCC_OscConfig+0x57c>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d118      	bne.n	8003e02 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dd0:	4b3b      	ldr	r3, [pc, #236]	; (8003ec0 <HAL_RCC_OscConfig+0x57c>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a3a      	ldr	r2, [pc, #232]	; (8003ec0 <HAL_RCC_OscConfig+0x57c>)
 8003dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ddc:	f7fe f804 	bl	8001de8 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003de4:	f7fe f800 	bl	8001de8 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e1c1      	b.n	800417a <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003df6:	4b32      	ldr	r3, [pc, #200]	; (8003ec0 <HAL_RCC_OscConfig+0x57c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d0f0      	beq.n	8003de4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d108      	bne.n	8003e1c <HAL_RCC_OscConfig+0x4d8>
 8003e0a:	4b2c      	ldr	r3, [pc, #176]	; (8003ebc <HAL_RCC_OscConfig+0x578>)
 8003e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e10:	4a2a      	ldr	r2, [pc, #168]	; (8003ebc <HAL_RCC_OscConfig+0x578>)
 8003e12:	f043 0301 	orr.w	r3, r3, #1
 8003e16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e1a:	e024      	b.n	8003e66 <HAL_RCC_OscConfig+0x522>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	2b05      	cmp	r3, #5
 8003e22:	d110      	bne.n	8003e46 <HAL_RCC_OscConfig+0x502>
 8003e24:	4b25      	ldr	r3, [pc, #148]	; (8003ebc <HAL_RCC_OscConfig+0x578>)
 8003e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2a:	4a24      	ldr	r2, [pc, #144]	; (8003ebc <HAL_RCC_OscConfig+0x578>)
 8003e2c:	f043 0304 	orr.w	r3, r3, #4
 8003e30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e34:	4b21      	ldr	r3, [pc, #132]	; (8003ebc <HAL_RCC_OscConfig+0x578>)
 8003e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3a:	4a20      	ldr	r2, [pc, #128]	; (8003ebc <HAL_RCC_OscConfig+0x578>)
 8003e3c:	f043 0301 	orr.w	r3, r3, #1
 8003e40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e44:	e00f      	b.n	8003e66 <HAL_RCC_OscConfig+0x522>
 8003e46:	4b1d      	ldr	r3, [pc, #116]	; (8003ebc <HAL_RCC_OscConfig+0x578>)
 8003e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4c:	4a1b      	ldr	r2, [pc, #108]	; (8003ebc <HAL_RCC_OscConfig+0x578>)
 8003e4e:	f023 0301 	bic.w	r3, r3, #1
 8003e52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e56:	4b19      	ldr	r3, [pc, #100]	; (8003ebc <HAL_RCC_OscConfig+0x578>)
 8003e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5c:	4a17      	ldr	r2, [pc, #92]	; (8003ebc <HAL_RCC_OscConfig+0x578>)
 8003e5e:	f023 0304 	bic.w	r3, r3, #4
 8003e62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d016      	beq.n	8003e9c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6e:	f7fd ffbb 	bl	8001de8 <HAL_GetTick>
 8003e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e74:	e00a      	b.n	8003e8c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e76:	f7fd ffb7 	bl	8001de8 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e176      	b.n	800417a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e8c:	4b0b      	ldr	r3, [pc, #44]	; (8003ebc <HAL_RCC_OscConfig+0x578>)
 8003e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0ed      	beq.n	8003e76 <HAL_RCC_OscConfig+0x532>
 8003e9a:	e01a      	b.n	8003ed2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e9c:	f7fd ffa4 	bl	8001de8 <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ea2:	e00f      	b.n	8003ec4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ea4:	f7fd ffa0 	bl	8001de8 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d906      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e15f      	b.n	800417a <HAL_RCC_OscConfig+0x836>
 8003eba:	bf00      	nop
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ec4:	4baa      	ldr	r3, [pc, #680]	; (8004170 <HAL_RCC_OscConfig+0x82c>)
 8003ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1e8      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ed2:	7ffb      	ldrb	r3, [r7, #31]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d105      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ed8:	4ba5      	ldr	r3, [pc, #660]	; (8004170 <HAL_RCC_OscConfig+0x82c>)
 8003eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003edc:	4aa4      	ldr	r2, [pc, #656]	; (8004170 <HAL_RCC_OscConfig+0x82c>)
 8003ede:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ee2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0320 	and.w	r3, r3, #32
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d03c      	beq.n	8003f6a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d01c      	beq.n	8003f32 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ef8:	4b9d      	ldr	r3, [pc, #628]	; (8004170 <HAL_RCC_OscConfig+0x82c>)
 8003efa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003efe:	4a9c      	ldr	r2, [pc, #624]	; (8004170 <HAL_RCC_OscConfig+0x82c>)
 8003f00:	f043 0301 	orr.w	r3, r3, #1
 8003f04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f08:	f7fd ff6e 	bl	8001de8 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f10:	f7fd ff6a 	bl	8001de8 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e12b      	b.n	800417a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f22:	4b93      	ldr	r3, [pc, #588]	; (8004170 <HAL_RCC_OscConfig+0x82c>)
 8003f24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d0ef      	beq.n	8003f10 <HAL_RCC_OscConfig+0x5cc>
 8003f30:	e01b      	b.n	8003f6a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f32:	4b8f      	ldr	r3, [pc, #572]	; (8004170 <HAL_RCC_OscConfig+0x82c>)
 8003f34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f38:	4a8d      	ldr	r2, [pc, #564]	; (8004170 <HAL_RCC_OscConfig+0x82c>)
 8003f3a:	f023 0301 	bic.w	r3, r3, #1
 8003f3e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f42:	f7fd ff51 	bl	8001de8 <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f48:	e008      	b.n	8003f5c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f4a:	f7fd ff4d 	bl	8001de8 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d901      	bls.n	8003f5c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e10e      	b.n	800417a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f5c:	4b84      	ldr	r3, [pc, #528]	; (8004170 <HAL_RCC_OscConfig+0x82c>)
 8003f5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1ef      	bne.n	8003f4a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 8102 	beq.w	8004178 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	f040 80c5 	bne.w	8004108 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f7e:	4b7c      	ldr	r3, [pc, #496]	; (8004170 <HAL_RCC_OscConfig+0x82c>)
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f003 0203 	and.w	r2, r3, #3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d12c      	bne.n	8003fec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d123      	bne.n	8003fec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fae:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d11b      	bne.n	8003fec <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d113      	bne.n	8003fec <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fce:	085b      	lsrs	r3, r3, #1
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d109      	bne.n	8003fec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	085b      	lsrs	r3, r3, #1
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d067      	beq.n	80040bc <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	2b0c      	cmp	r3, #12
 8003ff0:	d062      	beq.n	80040b8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003ff2:	4b5f      	ldr	r3, [pc, #380]	; (8004170 <HAL_RCC_OscConfig+0x82c>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e0bb      	b.n	800417a <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004002:	4b5b      	ldr	r3, [pc, #364]	; (8004170 <HAL_RCC_OscConfig+0x82c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a5a      	ldr	r2, [pc, #360]	; (8004170 <HAL_RCC_OscConfig+0x82c>)
 8004008:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800400c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800400e:	f7fd feeb 	bl	8001de8 <HAL_GetTick>
 8004012:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004014:	e008      	b.n	8004028 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004016:	f7fd fee7 	bl	8001de8 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d901      	bls.n	8004028 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e0a8      	b.n	800417a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004028:	4b51      	ldr	r3, [pc, #324]	; (8004170 <HAL_RCC_OscConfig+0x82c>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1f0      	bne.n	8004016 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004034:	4b4e      	ldr	r3, [pc, #312]	; (8004170 <HAL_RCC_OscConfig+0x82c>)
 8004036:	68da      	ldr	r2, [r3, #12]
 8004038:	4b4e      	ldr	r3, [pc, #312]	; (8004174 <HAL_RCC_OscConfig+0x830>)
 800403a:	4013      	ands	r3, r2
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004044:	3a01      	subs	r2, #1
 8004046:	0112      	lsls	r2, r2, #4
 8004048:	4311      	orrs	r1, r2
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800404e:	0212      	lsls	r2, r2, #8
 8004050:	4311      	orrs	r1, r2
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004056:	0852      	lsrs	r2, r2, #1
 8004058:	3a01      	subs	r2, #1
 800405a:	0552      	lsls	r2, r2, #21
 800405c:	4311      	orrs	r1, r2
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004062:	0852      	lsrs	r2, r2, #1
 8004064:	3a01      	subs	r2, #1
 8004066:	0652      	lsls	r2, r2, #25
 8004068:	4311      	orrs	r1, r2
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800406e:	06d2      	lsls	r2, r2, #27
 8004070:	430a      	orrs	r2, r1
 8004072:	493f      	ldr	r1, [pc, #252]	; (8004170 <HAL_RCC_OscConfig+0x82c>)
 8004074:	4313      	orrs	r3, r2
 8004076:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004078:	4b3d      	ldr	r3, [pc, #244]	; (8004170 <HAL_RCC_OscConfig+0x82c>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a3c      	ldr	r2, [pc, #240]	; (8004170 <HAL_RCC_OscConfig+0x82c>)
 800407e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004082:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004084:	4b3a      	ldr	r3, [pc, #232]	; (8004170 <HAL_RCC_OscConfig+0x82c>)
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	4a39      	ldr	r2, [pc, #228]	; (8004170 <HAL_RCC_OscConfig+0x82c>)
 800408a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800408e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004090:	f7fd feaa 	bl	8001de8 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004098:	f7fd fea6 	bl	8001de8 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e067      	b.n	800417a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040aa:	4b31      	ldr	r3, [pc, #196]	; (8004170 <HAL_RCC_OscConfig+0x82c>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d0f0      	beq.n	8004098 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040b6:	e05f      	b.n	8004178 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e05e      	b.n	800417a <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040bc:	4b2c      	ldr	r3, [pc, #176]	; (8004170 <HAL_RCC_OscConfig+0x82c>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d157      	bne.n	8004178 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80040c8:	4b29      	ldr	r3, [pc, #164]	; (8004170 <HAL_RCC_OscConfig+0x82c>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a28      	ldr	r2, [pc, #160]	; (8004170 <HAL_RCC_OscConfig+0x82c>)
 80040ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040d2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040d4:	4b26      	ldr	r3, [pc, #152]	; (8004170 <HAL_RCC_OscConfig+0x82c>)
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	4a25      	ldr	r2, [pc, #148]	; (8004170 <HAL_RCC_OscConfig+0x82c>)
 80040da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040e0:	f7fd fe82 	bl	8001de8 <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040e6:	e008      	b.n	80040fa <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040e8:	f7fd fe7e 	bl	8001de8 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e03f      	b.n	800417a <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040fa:	4b1d      	ldr	r3, [pc, #116]	; (8004170 <HAL_RCC_OscConfig+0x82c>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d0f0      	beq.n	80040e8 <HAL_RCC_OscConfig+0x7a4>
 8004106:	e037      	b.n	8004178 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	2b0c      	cmp	r3, #12
 800410c:	d02d      	beq.n	800416a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800410e:	4b18      	ldr	r3, [pc, #96]	; (8004170 <HAL_RCC_OscConfig+0x82c>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a17      	ldr	r2, [pc, #92]	; (8004170 <HAL_RCC_OscConfig+0x82c>)
 8004114:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004118:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800411a:	4b15      	ldr	r3, [pc, #84]	; (8004170 <HAL_RCC_OscConfig+0x82c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d105      	bne.n	8004132 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004126:	4b12      	ldr	r3, [pc, #72]	; (8004170 <HAL_RCC_OscConfig+0x82c>)
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	4a11      	ldr	r2, [pc, #68]	; (8004170 <HAL_RCC_OscConfig+0x82c>)
 800412c:	f023 0303 	bic.w	r3, r3, #3
 8004130:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004132:	4b0f      	ldr	r3, [pc, #60]	; (8004170 <HAL_RCC_OscConfig+0x82c>)
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	4a0e      	ldr	r2, [pc, #56]	; (8004170 <HAL_RCC_OscConfig+0x82c>)
 8004138:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800413c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004140:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004142:	f7fd fe51 	bl	8001de8 <HAL_GetTick>
 8004146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004148:	e008      	b.n	800415c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800414a:	f7fd fe4d 	bl	8001de8 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e00e      	b.n	800417a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800415c:	4b04      	ldr	r3, [pc, #16]	; (8004170 <HAL_RCC_OscConfig+0x82c>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1f0      	bne.n	800414a <HAL_RCC_OscConfig+0x806>
 8004168:	e006      	b.n	8004178 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e005      	b.n	800417a <HAL_RCC_OscConfig+0x836>
 800416e:	bf00      	nop
 8004170:	40021000 	.word	0x40021000
 8004174:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3720      	adds	r7, #32
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop

08004184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d101      	bne.n	8004198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e0c8      	b.n	800432a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004198:	4b66      	ldr	r3, [pc, #408]	; (8004334 <HAL_RCC_ClockConfig+0x1b0>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0307 	and.w	r3, r3, #7
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d910      	bls.n	80041c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041a6:	4b63      	ldr	r3, [pc, #396]	; (8004334 <HAL_RCC_ClockConfig+0x1b0>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f023 0207 	bic.w	r2, r3, #7
 80041ae:	4961      	ldr	r1, [pc, #388]	; (8004334 <HAL_RCC_ClockConfig+0x1b0>)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041b6:	4b5f      	ldr	r3, [pc, #380]	; (8004334 <HAL_RCC_ClockConfig+0x1b0>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0307 	and.w	r3, r3, #7
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d001      	beq.n	80041c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e0b0      	b.n	800432a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d04c      	beq.n	800426e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2b03      	cmp	r3, #3
 80041da:	d107      	bne.n	80041ec <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041dc:	4b56      	ldr	r3, [pc, #344]	; (8004338 <HAL_RCC_ClockConfig+0x1b4>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d121      	bne.n	800422c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e09e      	b.n	800432a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d107      	bne.n	8004204 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041f4:	4b50      	ldr	r3, [pc, #320]	; (8004338 <HAL_RCC_ClockConfig+0x1b4>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d115      	bne.n	800422c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e092      	b.n	800432a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d107      	bne.n	800421c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800420c:	4b4a      	ldr	r3, [pc, #296]	; (8004338 <HAL_RCC_ClockConfig+0x1b4>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d109      	bne.n	800422c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e086      	b.n	800432a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800421c:	4b46      	ldr	r3, [pc, #280]	; (8004338 <HAL_RCC_ClockConfig+0x1b4>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004224:	2b00      	cmp	r3, #0
 8004226:	d101      	bne.n	800422c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e07e      	b.n	800432a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800422c:	4b42      	ldr	r3, [pc, #264]	; (8004338 <HAL_RCC_ClockConfig+0x1b4>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f023 0203 	bic.w	r2, r3, #3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	493f      	ldr	r1, [pc, #252]	; (8004338 <HAL_RCC_ClockConfig+0x1b4>)
 800423a:	4313      	orrs	r3, r2
 800423c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800423e:	f7fd fdd3 	bl	8001de8 <HAL_GetTick>
 8004242:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004244:	e00a      	b.n	800425c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004246:	f7fd fdcf 	bl	8001de8 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	f241 3288 	movw	r2, #5000	; 0x1388
 8004254:	4293      	cmp	r3, r2
 8004256:	d901      	bls.n	800425c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e066      	b.n	800432a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800425c:	4b36      	ldr	r3, [pc, #216]	; (8004338 <HAL_RCC_ClockConfig+0x1b4>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f003 020c 	and.w	r2, r3, #12
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	429a      	cmp	r2, r3
 800426c:	d1eb      	bne.n	8004246 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d008      	beq.n	800428c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800427a:	4b2f      	ldr	r3, [pc, #188]	; (8004338 <HAL_RCC_ClockConfig+0x1b4>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	492c      	ldr	r1, [pc, #176]	; (8004338 <HAL_RCC_ClockConfig+0x1b4>)
 8004288:	4313      	orrs	r3, r2
 800428a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800428c:	4b29      	ldr	r3, [pc, #164]	; (8004334 <HAL_RCC_ClockConfig+0x1b0>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	429a      	cmp	r2, r3
 8004298:	d210      	bcs.n	80042bc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800429a:	4b26      	ldr	r3, [pc, #152]	; (8004334 <HAL_RCC_ClockConfig+0x1b0>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f023 0207 	bic.w	r2, r3, #7
 80042a2:	4924      	ldr	r1, [pc, #144]	; (8004334 <HAL_RCC_ClockConfig+0x1b0>)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042aa:	4b22      	ldr	r3, [pc, #136]	; (8004334 <HAL_RCC_ClockConfig+0x1b0>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0307 	and.w	r3, r3, #7
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d001      	beq.n	80042bc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e036      	b.n	800432a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d008      	beq.n	80042da <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042c8:	4b1b      	ldr	r3, [pc, #108]	; (8004338 <HAL_RCC_ClockConfig+0x1b4>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	4918      	ldr	r1, [pc, #96]	; (8004338 <HAL_RCC_ClockConfig+0x1b4>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0308 	and.w	r3, r3, #8
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d009      	beq.n	80042fa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042e6:	4b14      	ldr	r3, [pc, #80]	; (8004338 <HAL_RCC_ClockConfig+0x1b4>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	4910      	ldr	r1, [pc, #64]	; (8004338 <HAL_RCC_ClockConfig+0x1b4>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042fa:	f000 f825 	bl	8004348 <HAL_RCC_GetSysClockFreq>
 80042fe:	4602      	mov	r2, r0
 8004300:	4b0d      	ldr	r3, [pc, #52]	; (8004338 <HAL_RCC_ClockConfig+0x1b4>)
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	091b      	lsrs	r3, r3, #4
 8004306:	f003 030f 	and.w	r3, r3, #15
 800430a:	490c      	ldr	r1, [pc, #48]	; (800433c <HAL_RCC_ClockConfig+0x1b8>)
 800430c:	5ccb      	ldrb	r3, [r1, r3]
 800430e:	f003 031f 	and.w	r3, r3, #31
 8004312:	fa22 f303 	lsr.w	r3, r2, r3
 8004316:	4a0a      	ldr	r2, [pc, #40]	; (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 8004318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800431a:	4b0a      	ldr	r3, [pc, #40]	; (8004344 <HAL_RCC_ClockConfig+0x1c0>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4618      	mov	r0, r3
 8004320:	f7fd fd12 	bl	8001d48 <HAL_InitTick>
 8004324:	4603      	mov	r3, r0
 8004326:	72fb      	strb	r3, [r7, #11]

  return status;
 8004328:	7afb      	ldrb	r3, [r7, #11]
}
 800432a:	4618      	mov	r0, r3
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	40022000 	.word	0x40022000
 8004338:	40021000 	.word	0x40021000
 800433c:	08006c70 	.word	0x08006c70
 8004340:	20000000 	.word	0x20000000
 8004344:	20000004 	.word	0x20000004

08004348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004348:	b480      	push	{r7}
 800434a:	b089      	sub	sp, #36	; 0x24
 800434c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800434e:	2300      	movs	r3, #0
 8004350:	61fb      	str	r3, [r7, #28]
 8004352:	2300      	movs	r3, #0
 8004354:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004356:	4b3e      	ldr	r3, [pc, #248]	; (8004450 <HAL_RCC_GetSysClockFreq+0x108>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f003 030c 	and.w	r3, r3, #12
 800435e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004360:	4b3b      	ldr	r3, [pc, #236]	; (8004450 <HAL_RCC_GetSysClockFreq+0x108>)
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f003 0303 	and.w	r3, r3, #3
 8004368:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d005      	beq.n	800437c <HAL_RCC_GetSysClockFreq+0x34>
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	2b0c      	cmp	r3, #12
 8004374:	d121      	bne.n	80043ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d11e      	bne.n	80043ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800437c:	4b34      	ldr	r3, [pc, #208]	; (8004450 <HAL_RCC_GetSysClockFreq+0x108>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0308 	and.w	r3, r3, #8
 8004384:	2b00      	cmp	r3, #0
 8004386:	d107      	bne.n	8004398 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004388:	4b31      	ldr	r3, [pc, #196]	; (8004450 <HAL_RCC_GetSysClockFreq+0x108>)
 800438a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800438e:	0a1b      	lsrs	r3, r3, #8
 8004390:	f003 030f 	and.w	r3, r3, #15
 8004394:	61fb      	str	r3, [r7, #28]
 8004396:	e005      	b.n	80043a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004398:	4b2d      	ldr	r3, [pc, #180]	; (8004450 <HAL_RCC_GetSysClockFreq+0x108>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	091b      	lsrs	r3, r3, #4
 800439e:	f003 030f 	and.w	r3, r3, #15
 80043a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80043a4:	4a2b      	ldr	r2, [pc, #172]	; (8004454 <HAL_RCC_GetSysClockFreq+0x10c>)
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10d      	bne.n	80043d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043b8:	e00a      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	2b04      	cmp	r3, #4
 80043be:	d102      	bne.n	80043c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043c0:	4b25      	ldr	r3, [pc, #148]	; (8004458 <HAL_RCC_GetSysClockFreq+0x110>)
 80043c2:	61bb      	str	r3, [r7, #24]
 80043c4:	e004      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d101      	bne.n	80043d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043cc:	4b23      	ldr	r3, [pc, #140]	; (800445c <HAL_RCC_GetSysClockFreq+0x114>)
 80043ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	2b0c      	cmp	r3, #12
 80043d4:	d134      	bne.n	8004440 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043d6:	4b1e      	ldr	r3, [pc, #120]	; (8004450 <HAL_RCC_GetSysClockFreq+0x108>)
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	f003 0303 	and.w	r3, r3, #3
 80043de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d003      	beq.n	80043ee <HAL_RCC_GetSysClockFreq+0xa6>
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	2b03      	cmp	r3, #3
 80043ea:	d003      	beq.n	80043f4 <HAL_RCC_GetSysClockFreq+0xac>
 80043ec:	e005      	b.n	80043fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80043ee:	4b1a      	ldr	r3, [pc, #104]	; (8004458 <HAL_RCC_GetSysClockFreq+0x110>)
 80043f0:	617b      	str	r3, [r7, #20]
      break;
 80043f2:	e005      	b.n	8004400 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80043f4:	4b19      	ldr	r3, [pc, #100]	; (800445c <HAL_RCC_GetSysClockFreq+0x114>)
 80043f6:	617b      	str	r3, [r7, #20]
      break;
 80043f8:	e002      	b.n	8004400 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	617b      	str	r3, [r7, #20]
      break;
 80043fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004400:	4b13      	ldr	r3, [pc, #76]	; (8004450 <HAL_RCC_GetSysClockFreq+0x108>)
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	091b      	lsrs	r3, r3, #4
 8004406:	f003 0307 	and.w	r3, r3, #7
 800440a:	3301      	adds	r3, #1
 800440c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800440e:	4b10      	ldr	r3, [pc, #64]	; (8004450 <HAL_RCC_GetSysClockFreq+0x108>)
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	0a1b      	lsrs	r3, r3, #8
 8004414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	fb02 f203 	mul.w	r2, r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	fbb2 f3f3 	udiv	r3, r2, r3
 8004424:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004426:	4b0a      	ldr	r3, [pc, #40]	; (8004450 <HAL_RCC_GetSysClockFreq+0x108>)
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	0e5b      	lsrs	r3, r3, #25
 800442c:	f003 0303 	and.w	r3, r3, #3
 8004430:	3301      	adds	r3, #1
 8004432:	005b      	lsls	r3, r3, #1
 8004434:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	fbb2 f3f3 	udiv	r3, r2, r3
 800443e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004440:	69bb      	ldr	r3, [r7, #24]
}
 8004442:	4618      	mov	r0, r3
 8004444:	3724      	adds	r7, #36	; 0x24
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	40021000 	.word	0x40021000
 8004454:	08006c88 	.word	0x08006c88
 8004458:	00f42400 	.word	0x00f42400
 800445c:	007a1200 	.word	0x007a1200

08004460 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004464:	4b03      	ldr	r3, [pc, #12]	; (8004474 <HAL_RCC_GetHCLKFreq+0x14>)
 8004466:	681b      	ldr	r3, [r3, #0]
}
 8004468:	4618      	mov	r0, r3
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	20000000 	.word	0x20000000

08004478 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800447c:	f7ff fff0 	bl	8004460 <HAL_RCC_GetHCLKFreq>
 8004480:	4602      	mov	r2, r0
 8004482:	4b06      	ldr	r3, [pc, #24]	; (800449c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	0a1b      	lsrs	r3, r3, #8
 8004488:	f003 0307 	and.w	r3, r3, #7
 800448c:	4904      	ldr	r1, [pc, #16]	; (80044a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800448e:	5ccb      	ldrb	r3, [r1, r3]
 8004490:	f003 031f 	and.w	r3, r3, #31
 8004494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004498:	4618      	mov	r0, r3
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40021000 	.word	0x40021000
 80044a0:	08006c80 	.word	0x08006c80

080044a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80044a8:	f7ff ffda 	bl	8004460 <HAL_RCC_GetHCLKFreq>
 80044ac:	4602      	mov	r2, r0
 80044ae:	4b06      	ldr	r3, [pc, #24]	; (80044c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	0adb      	lsrs	r3, r3, #11
 80044b4:	f003 0307 	and.w	r3, r3, #7
 80044b8:	4904      	ldr	r1, [pc, #16]	; (80044cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80044ba:	5ccb      	ldrb	r3, [r1, r3]
 80044bc:	f003 031f 	and.w	r3, r3, #31
 80044c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	40021000 	.word	0x40021000
 80044cc:	08006c80 	.word	0x08006c80

080044d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80044d8:	2300      	movs	r3, #0
 80044da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80044dc:	4b2a      	ldr	r3, [pc, #168]	; (8004588 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d003      	beq.n	80044f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80044e8:	f7ff f9c8 	bl	800387c <HAL_PWREx_GetVoltageRange>
 80044ec:	6178      	str	r0, [r7, #20]
 80044ee:	e014      	b.n	800451a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044f0:	4b25      	ldr	r3, [pc, #148]	; (8004588 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f4:	4a24      	ldr	r2, [pc, #144]	; (8004588 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044fa:	6593      	str	r3, [r2, #88]	; 0x58
 80044fc:	4b22      	ldr	r3, [pc, #136]	; (8004588 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004504:	60fb      	str	r3, [r7, #12]
 8004506:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004508:	f7ff f9b8 	bl	800387c <HAL_PWREx_GetVoltageRange>
 800450c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800450e:	4b1e      	ldr	r3, [pc, #120]	; (8004588 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004512:	4a1d      	ldr	r2, [pc, #116]	; (8004588 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004514:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004518:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004520:	d10b      	bne.n	800453a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b80      	cmp	r3, #128	; 0x80
 8004526:	d919      	bls.n	800455c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2ba0      	cmp	r3, #160	; 0xa0
 800452c:	d902      	bls.n	8004534 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800452e:	2302      	movs	r3, #2
 8004530:	613b      	str	r3, [r7, #16]
 8004532:	e013      	b.n	800455c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004534:	2301      	movs	r3, #1
 8004536:	613b      	str	r3, [r7, #16]
 8004538:	e010      	b.n	800455c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b80      	cmp	r3, #128	; 0x80
 800453e:	d902      	bls.n	8004546 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004540:	2303      	movs	r3, #3
 8004542:	613b      	str	r3, [r7, #16]
 8004544:	e00a      	b.n	800455c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b80      	cmp	r3, #128	; 0x80
 800454a:	d102      	bne.n	8004552 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800454c:	2302      	movs	r3, #2
 800454e:	613b      	str	r3, [r7, #16]
 8004550:	e004      	b.n	800455c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b70      	cmp	r3, #112	; 0x70
 8004556:	d101      	bne.n	800455c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004558:	2301      	movs	r3, #1
 800455a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800455c:	4b0b      	ldr	r3, [pc, #44]	; (800458c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f023 0207 	bic.w	r2, r3, #7
 8004564:	4909      	ldr	r1, [pc, #36]	; (800458c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	4313      	orrs	r3, r2
 800456a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800456c:	4b07      	ldr	r3, [pc, #28]	; (800458c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0307 	and.w	r3, r3, #7
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	429a      	cmp	r2, r3
 8004578:	d001      	beq.n	800457e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e000      	b.n	8004580 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3718      	adds	r7, #24
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	40021000 	.word	0x40021000
 800458c:	40022000 	.word	0x40022000

08004590 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004598:	2300      	movs	r3, #0
 800459a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800459c:	2300      	movs	r3, #0
 800459e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d031      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045b4:	d01a      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80045b6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045ba:	d814      	bhi.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d009      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80045c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045c4:	d10f      	bne.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80045c6:	4bac      	ldr	r3, [pc, #688]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	4aab      	ldr	r2, [pc, #684]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80045cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045d2:	e00c      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3304      	adds	r3, #4
 80045d8:	2100      	movs	r1, #0
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 f9dc 	bl	8004998 <RCCEx_PLLSAI1_Config>
 80045e0:	4603      	mov	r3, r0
 80045e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045e4:	e003      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	74fb      	strb	r3, [r7, #19]
      break;
 80045ea:	e000      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80045ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045ee:	7cfb      	ldrb	r3, [r7, #19]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d10b      	bne.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045f4:	4ba0      	ldr	r3, [pc, #640]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80045f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004602:	499d      	ldr	r1, [pc, #628]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004604:	4313      	orrs	r3, r2
 8004606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800460a:	e001      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800460c:	7cfb      	ldrb	r3, [r7, #19]
 800460e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 8099 	beq.w	8004750 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800461e:	2300      	movs	r3, #0
 8004620:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004622:	4b95      	ldr	r3, [pc, #596]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800462e:	2301      	movs	r3, #1
 8004630:	e000      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004632:	2300      	movs	r3, #0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00d      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004638:	4b8f      	ldr	r3, [pc, #572]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800463a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800463c:	4a8e      	ldr	r2, [pc, #568]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800463e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004642:	6593      	str	r3, [r2, #88]	; 0x58
 8004644:	4b8c      	ldr	r3, [pc, #560]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800464c:	60bb      	str	r3, [r7, #8]
 800464e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004650:	2301      	movs	r3, #1
 8004652:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004654:	4b89      	ldr	r3, [pc, #548]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a88      	ldr	r2, [pc, #544]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800465a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800465e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004660:	f7fd fbc2 	bl	8001de8 <HAL_GetTick>
 8004664:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004666:	e009      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004668:	f7fd fbbe 	bl	8001de8 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b02      	cmp	r3, #2
 8004674:	d902      	bls.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	74fb      	strb	r3, [r7, #19]
        break;
 800467a:	e005      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800467c:	4b7f      	ldr	r3, [pc, #508]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0ef      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004688:	7cfb      	ldrb	r3, [r7, #19]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d155      	bne.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800468e:	4b7a      	ldr	r3, [pc, #488]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004694:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004698:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d01e      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d019      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046aa:	4b73      	ldr	r3, [pc, #460]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80046ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046b4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046b6:	4b70      	ldr	r3, [pc, #448]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80046b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046bc:	4a6e      	ldr	r2, [pc, #440]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80046be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046c6:	4b6c      	ldr	r3, [pc, #432]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80046c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046cc:	4a6a      	ldr	r2, [pc, #424]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80046ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046d6:	4a68      	ldr	r2, [pc, #416]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d016      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e8:	f7fd fb7e 	bl	8001de8 <HAL_GetTick>
 80046ec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046ee:	e00b      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046f0:	f7fd fb7a 	bl	8001de8 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80046fe:	4293      	cmp	r3, r2
 8004700:	d902      	bls.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	74fb      	strb	r3, [r7, #19]
            break;
 8004706:	e006      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004708:	4b5b      	ldr	r3, [pc, #364]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800470a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d0ec      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004716:	7cfb      	ldrb	r3, [r7, #19]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10b      	bne.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800471c:	4b56      	ldr	r3, [pc, #344]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800471e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004722:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800472a:	4953      	ldr	r1, [pc, #332]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800472c:	4313      	orrs	r3, r2
 800472e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004732:	e004      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004734:	7cfb      	ldrb	r3, [r7, #19]
 8004736:	74bb      	strb	r3, [r7, #18]
 8004738:	e001      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800473a:	7cfb      	ldrb	r3, [r7, #19]
 800473c:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800473e:	7c7b      	ldrb	r3, [r7, #17]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d105      	bne.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004744:	4b4c      	ldr	r3, [pc, #304]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004748:	4a4b      	ldr	r2, [pc, #300]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800474a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800474e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00a      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800475c:	4b46      	ldr	r3, [pc, #280]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800475e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004762:	f023 0203 	bic.w	r2, r3, #3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	4943      	ldr	r1, [pc, #268]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800476c:	4313      	orrs	r3, r2
 800476e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00a      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800477e:	4b3e      	ldr	r3, [pc, #248]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004784:	f023 020c 	bic.w	r2, r3, #12
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478c:	493a      	ldr	r1, [pc, #232]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800478e:	4313      	orrs	r3, r2
 8004790:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0320 	and.w	r3, r3, #32
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00a      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047a0:	4b35      	ldr	r3, [pc, #212]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80047a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ae:	4932      	ldr	r1, [pc, #200]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00a      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047c2:	4b2d      	ldr	r3, [pc, #180]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80047c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d0:	4929      	ldr	r1, [pc, #164]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00a      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047e4:	4b24      	ldr	r3, [pc, #144]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80047e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f2:	4921      	ldr	r1, [pc, #132]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004806:	4b1c      	ldr	r3, [pc, #112]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004814:	4918      	ldr	r1, [pc, #96]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004816:	4313      	orrs	r3, r2
 8004818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00a      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004828:	4b13      	ldr	r3, [pc, #76]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800482a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800482e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004836:	4910      	ldr	r1, [pc, #64]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004838:	4313      	orrs	r3, r2
 800483a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d02c      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800484a:	4b0b      	ldr	r3, [pc, #44]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800484c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004850:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004858:	4907      	ldr	r1, [pc, #28]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800485a:	4313      	orrs	r3, r2
 800485c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004864:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004868:	d10a      	bne.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800486a:	4b03      	ldr	r3, [pc, #12]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	4a02      	ldr	r2, [pc, #8]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004870:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004874:	60d3      	str	r3, [r2, #12]
 8004876:	e015      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004878:	40021000 	.word	0x40021000
 800487c:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004884:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004888:	d10c      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	3304      	adds	r3, #4
 800488e:	2101      	movs	r1, #1
 8004890:	4618      	mov	r0, r3
 8004892:	f000 f881 	bl	8004998 <RCCEx_PLLSAI1_Config>
 8004896:	4603      	mov	r3, r0
 8004898:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800489a:	7cfb      	ldrb	r3, [r7, #19]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d001      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 80048a0:	7cfb      	ldrb	r3, [r7, #19]
 80048a2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d028      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048b0:	4b30      	ldr	r3, [pc, #192]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048be:	492d      	ldr	r1, [pc, #180]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048ce:	d106      	bne.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048d0:	4b28      	ldr	r3, [pc, #160]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	4a27      	ldr	r2, [pc, #156]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048da:	60d3      	str	r3, [r2, #12]
 80048dc:	e011      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048e6:	d10c      	bne.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	3304      	adds	r3, #4
 80048ec:	2101      	movs	r1, #1
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 f852 	bl	8004998 <RCCEx_PLLSAI1_Config>
 80048f4:	4603      	mov	r3, r0
 80048f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048f8:	7cfb      	ldrb	r3, [r7, #19]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d001      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 80048fe:	7cfb      	ldrb	r3, [r7, #19]
 8004900:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d01c      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800490e:	4b19      	ldr	r3, [pc, #100]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004914:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800491c:	4915      	ldr	r1, [pc, #84]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800491e:	4313      	orrs	r3, r2
 8004920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004928:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800492c:	d10c      	bne.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	3304      	adds	r3, #4
 8004932:	2102      	movs	r1, #2
 8004934:	4618      	mov	r0, r3
 8004936:	f000 f82f 	bl	8004998 <RCCEx_PLLSAI1_Config>
 800493a:	4603      	mov	r3, r0
 800493c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800493e:	7cfb      	ldrb	r3, [r7, #19]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004944:	7cfb      	ldrb	r3, [r7, #19]
 8004946:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00a      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004954:	4b07      	ldr	r3, [pc, #28]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800495a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004962:	4904      	ldr	r1, [pc, #16]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004964:	4313      	orrs	r3, r2
 8004966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800496a:	7cbb      	ldrb	r3, [r7, #18]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	40021000 	.word	0x40021000

08004978 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004978:	b480      	push	{r7}
 800497a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800497c:	4b05      	ldr	r3, [pc, #20]	; (8004994 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a04      	ldr	r2, [pc, #16]	; (8004994 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004982:	f043 0304 	orr.w	r3, r3, #4
 8004986:	6013      	str	r3, [r2, #0]
}
 8004988:	bf00      	nop
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	40021000 	.word	0x40021000

08004998 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049a2:	2300      	movs	r3, #0
 80049a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049a6:	4b74      	ldr	r3, [pc, #464]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	f003 0303 	and.w	r3, r3, #3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d018      	beq.n	80049e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80049b2:	4b71      	ldr	r3, [pc, #452]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	f003 0203 	and.w	r2, r3, #3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d10d      	bne.n	80049de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
       ||
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d009      	beq.n	80049de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80049ca:	4b6b      	ldr	r3, [pc, #428]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	091b      	lsrs	r3, r3, #4
 80049d0:	f003 0307 	and.w	r3, r3, #7
 80049d4:	1c5a      	adds	r2, r3, #1
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
       ||
 80049da:	429a      	cmp	r2, r3
 80049dc:	d047      	beq.n	8004a6e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	73fb      	strb	r3, [r7, #15]
 80049e2:	e044      	b.n	8004a6e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b03      	cmp	r3, #3
 80049ea:	d018      	beq.n	8004a1e <RCCEx_PLLSAI1_Config+0x86>
 80049ec:	2b03      	cmp	r3, #3
 80049ee:	d825      	bhi.n	8004a3c <RCCEx_PLLSAI1_Config+0xa4>
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d002      	beq.n	80049fa <RCCEx_PLLSAI1_Config+0x62>
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d009      	beq.n	8004a0c <RCCEx_PLLSAI1_Config+0x74>
 80049f8:	e020      	b.n	8004a3c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049fa:	4b5f      	ldr	r3, [pc, #380]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d11d      	bne.n	8004a42 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a0a:	e01a      	b.n	8004a42 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a0c:	4b5a      	ldr	r3, [pc, #360]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d116      	bne.n	8004a46 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a1c:	e013      	b.n	8004a46 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a1e:	4b56      	ldr	r3, [pc, #344]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10f      	bne.n	8004a4a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a2a:	4b53      	ldr	r3, [pc, #332]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d109      	bne.n	8004a4a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a3a:	e006      	b.n	8004a4a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a40:	e004      	b.n	8004a4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a42:	bf00      	nop
 8004a44:	e002      	b.n	8004a4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a46:	bf00      	nop
 8004a48:	e000      	b.n	8004a4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a4c:	7bfb      	ldrb	r3, [r7, #15]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10d      	bne.n	8004a6e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a52:	4b49      	ldr	r3, [pc, #292]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6819      	ldr	r1, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	3b01      	subs	r3, #1
 8004a64:	011b      	lsls	r3, r3, #4
 8004a66:	430b      	orrs	r3, r1
 8004a68:	4943      	ldr	r1, [pc, #268]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a6e:	7bfb      	ldrb	r3, [r7, #15]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d17c      	bne.n	8004b6e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a74:	4b40      	ldr	r3, [pc, #256]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a3f      	ldr	r2, [pc, #252]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a80:	f7fd f9b2 	bl	8001de8 <HAL_GetTick>
 8004a84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a86:	e009      	b.n	8004a9c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a88:	f7fd f9ae 	bl	8001de8 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d902      	bls.n	8004a9c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	73fb      	strb	r3, [r7, #15]
        break;
 8004a9a:	e005      	b.n	8004aa8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a9c:	4b36      	ldr	r3, [pc, #216]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1ef      	bne.n	8004a88 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004aa8:	7bfb      	ldrb	r3, [r7, #15]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d15f      	bne.n	8004b6e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d110      	bne.n	8004ad6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ab4:	4b30      	ldr	r3, [pc, #192]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004abc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	6892      	ldr	r2, [r2, #8]
 8004ac4:	0211      	lsls	r1, r2, #8
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	68d2      	ldr	r2, [r2, #12]
 8004aca:	06d2      	lsls	r2, r2, #27
 8004acc:	430a      	orrs	r2, r1
 8004ace:	492a      	ldr	r1, [pc, #168]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	610b      	str	r3, [r1, #16]
 8004ad4:	e027      	b.n	8004b26 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d112      	bne.n	8004b02 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004adc:	4b26      	ldr	r3, [pc, #152]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004ae4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	6892      	ldr	r2, [r2, #8]
 8004aec:	0211      	lsls	r1, r2, #8
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6912      	ldr	r2, [r2, #16]
 8004af2:	0852      	lsrs	r2, r2, #1
 8004af4:	3a01      	subs	r2, #1
 8004af6:	0552      	lsls	r2, r2, #21
 8004af8:	430a      	orrs	r2, r1
 8004afa:	491f      	ldr	r1, [pc, #124]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	610b      	str	r3, [r1, #16]
 8004b00:	e011      	b.n	8004b26 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b02:	4b1d      	ldr	r3, [pc, #116]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b0a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	6892      	ldr	r2, [r2, #8]
 8004b12:	0211      	lsls	r1, r2, #8
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	6952      	ldr	r2, [r2, #20]
 8004b18:	0852      	lsrs	r2, r2, #1
 8004b1a:	3a01      	subs	r2, #1
 8004b1c:	0652      	lsls	r2, r2, #25
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	4915      	ldr	r1, [pc, #84]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004b26:	4b14      	ldr	r3, [pc, #80]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a13      	ldr	r2, [pc, #76]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b30:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b32:	f7fd f959 	bl	8001de8 <HAL_GetTick>
 8004b36:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b38:	e009      	b.n	8004b4e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b3a:	f7fd f955 	bl	8001de8 <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d902      	bls.n	8004b4e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	73fb      	strb	r3, [r7, #15]
          break;
 8004b4c:	e005      	b.n	8004b5a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b4e:	4b0a      	ldr	r3, [pc, #40]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0ef      	beq.n	8004b3a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004b5a:	7bfb      	ldrb	r3, [r7, #15]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d106      	bne.n	8004b6e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004b60:	4b05      	ldr	r3, [pc, #20]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b62:	691a      	ldr	r2, [r3, #16]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	4903      	ldr	r1, [pc, #12]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	40021000 	.word	0x40021000

08004b7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e049      	b.n	8004c22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d106      	bne.n	8004ba8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f7fc ffb2 	bl	8001b0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	3304      	adds	r3, #4
 8004bb8:	4619      	mov	r1, r3
 8004bba:	4610      	mov	r0, r2
 8004bbc:	f000 fa6c 	bl	8005098 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b082      	sub	sp, #8
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d101      	bne.n	8004c3c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e049      	b.n	8004cd0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d106      	bne.n	8004c56 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f841 	bl	8004cd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2202      	movs	r2, #2
 8004c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	3304      	adds	r3, #4
 8004c66:	4619      	mov	r1, r3
 8004c68:	4610      	mov	r0, r2
 8004c6a:	f000 fa15 	bl	8005098 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d101      	bne.n	8004d06 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004d02:	2302      	movs	r3, #2
 8004d04:	e0fd      	b.n	8004f02 <HAL_TIM_PWM_ConfigChannel+0x216>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2b14      	cmp	r3, #20
 8004d12:	f200 80f0 	bhi.w	8004ef6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004d16:	a201      	add	r2, pc, #4	; (adr r2, 8004d1c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1c:	08004d71 	.word	0x08004d71
 8004d20:	08004ef7 	.word	0x08004ef7
 8004d24:	08004ef7 	.word	0x08004ef7
 8004d28:	08004ef7 	.word	0x08004ef7
 8004d2c:	08004db1 	.word	0x08004db1
 8004d30:	08004ef7 	.word	0x08004ef7
 8004d34:	08004ef7 	.word	0x08004ef7
 8004d38:	08004ef7 	.word	0x08004ef7
 8004d3c:	08004df3 	.word	0x08004df3
 8004d40:	08004ef7 	.word	0x08004ef7
 8004d44:	08004ef7 	.word	0x08004ef7
 8004d48:	08004ef7 	.word	0x08004ef7
 8004d4c:	08004e33 	.word	0x08004e33
 8004d50:	08004ef7 	.word	0x08004ef7
 8004d54:	08004ef7 	.word	0x08004ef7
 8004d58:	08004ef7 	.word	0x08004ef7
 8004d5c:	08004e75 	.word	0x08004e75
 8004d60:	08004ef7 	.word	0x08004ef7
 8004d64:	08004ef7 	.word	0x08004ef7
 8004d68:	08004ef7 	.word	0x08004ef7
 8004d6c:	08004eb5 	.word	0x08004eb5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68b9      	ldr	r1, [r7, #8]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f000 f9f2 	bl	8005160 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	699a      	ldr	r2, [r3, #24]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f042 0208 	orr.w	r2, r2, #8
 8004d8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	699a      	ldr	r2, [r3, #24]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f022 0204 	bic.w	r2, r2, #4
 8004d9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6999      	ldr	r1, [r3, #24]
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	691a      	ldr	r2, [r3, #16]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	430a      	orrs	r2, r1
 8004dac:	619a      	str	r2, [r3, #24]
      break;
 8004dae:	e0a3      	b.n	8004ef8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68b9      	ldr	r1, [r7, #8]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 fa4e 	bl	8005258 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	699a      	ldr	r2, [r3, #24]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	699a      	ldr	r2, [r3, #24]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6999      	ldr	r1, [r3, #24]
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	021a      	lsls	r2, r3, #8
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	430a      	orrs	r2, r1
 8004dee:	619a      	str	r2, [r3, #24]
      break;
 8004df0:	e082      	b.n	8004ef8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68b9      	ldr	r1, [r7, #8]
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 faa7 	bl	800534c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	69da      	ldr	r2, [r3, #28]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f042 0208 	orr.w	r2, r2, #8
 8004e0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	69da      	ldr	r2, [r3, #28]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 0204 	bic.w	r2, r2, #4
 8004e1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	69d9      	ldr	r1, [r3, #28]
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	691a      	ldr	r2, [r3, #16]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	61da      	str	r2, [r3, #28]
      break;
 8004e30:	e062      	b.n	8004ef8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68b9      	ldr	r1, [r7, #8]
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f000 faff 	bl	800543c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	69da      	ldr	r2, [r3, #28]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	69da      	ldr	r2, [r3, #28]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	69d9      	ldr	r1, [r3, #28]
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	021a      	lsls	r2, r3, #8
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	61da      	str	r2, [r3, #28]
      break;
 8004e72:	e041      	b.n	8004ef8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68b9      	ldr	r1, [r7, #8]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f000 fb3c 	bl	80054f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 0208 	orr.w	r2, r2, #8
 8004e8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 0204 	bic.w	r2, r2, #4
 8004e9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	691a      	ldr	r2, [r3, #16]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004eb2:	e021      	b.n	8004ef8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68b9      	ldr	r1, [r7, #8]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 fb74 	bl	80055a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ece:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ede:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	021a      	lsls	r2, r3, #8
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004ef4:	e000      	b.n	8004ef8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004ef6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop

08004f0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d101      	bne.n	8004f24 <HAL_TIM_ConfigClockSource+0x18>
 8004f20:	2302      	movs	r3, #2
 8004f22:	e0b5      	b.n	8005090 <HAL_TIM_ConfigClockSource+0x184>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2202      	movs	r2, #2
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f60:	d03e      	beq.n	8004fe0 <HAL_TIM_ConfigClockSource+0xd4>
 8004f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f66:	f200 8087 	bhi.w	8005078 <HAL_TIM_ConfigClockSource+0x16c>
 8004f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f6e:	f000 8085 	beq.w	800507c <HAL_TIM_ConfigClockSource+0x170>
 8004f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f76:	d87f      	bhi.n	8005078 <HAL_TIM_ConfigClockSource+0x16c>
 8004f78:	2b70      	cmp	r3, #112	; 0x70
 8004f7a:	d01a      	beq.n	8004fb2 <HAL_TIM_ConfigClockSource+0xa6>
 8004f7c:	2b70      	cmp	r3, #112	; 0x70
 8004f7e:	d87b      	bhi.n	8005078 <HAL_TIM_ConfigClockSource+0x16c>
 8004f80:	2b60      	cmp	r3, #96	; 0x60
 8004f82:	d050      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0x11a>
 8004f84:	2b60      	cmp	r3, #96	; 0x60
 8004f86:	d877      	bhi.n	8005078 <HAL_TIM_ConfigClockSource+0x16c>
 8004f88:	2b50      	cmp	r3, #80	; 0x50
 8004f8a:	d03c      	beq.n	8005006 <HAL_TIM_ConfigClockSource+0xfa>
 8004f8c:	2b50      	cmp	r3, #80	; 0x50
 8004f8e:	d873      	bhi.n	8005078 <HAL_TIM_ConfigClockSource+0x16c>
 8004f90:	2b40      	cmp	r3, #64	; 0x40
 8004f92:	d058      	beq.n	8005046 <HAL_TIM_ConfigClockSource+0x13a>
 8004f94:	2b40      	cmp	r3, #64	; 0x40
 8004f96:	d86f      	bhi.n	8005078 <HAL_TIM_ConfigClockSource+0x16c>
 8004f98:	2b30      	cmp	r3, #48	; 0x30
 8004f9a:	d064      	beq.n	8005066 <HAL_TIM_ConfigClockSource+0x15a>
 8004f9c:	2b30      	cmp	r3, #48	; 0x30
 8004f9e:	d86b      	bhi.n	8005078 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa0:	2b20      	cmp	r3, #32
 8004fa2:	d060      	beq.n	8005066 <HAL_TIM_ConfigClockSource+0x15a>
 8004fa4:	2b20      	cmp	r3, #32
 8004fa6:	d867      	bhi.n	8005078 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d05c      	beq.n	8005066 <HAL_TIM_ConfigClockSource+0x15a>
 8004fac:	2b10      	cmp	r3, #16
 8004fae:	d05a      	beq.n	8005066 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004fb0:	e062      	b.n	8005078 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6818      	ldr	r0, [r3, #0]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	6899      	ldr	r1, [r3, #8]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	f000 fbc5 	bl	8005750 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fd4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	609a      	str	r2, [r3, #8]
      break;
 8004fde:	e04e      	b.n	800507e <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6818      	ldr	r0, [r3, #0]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	6899      	ldr	r1, [r3, #8]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	f000 fbae 	bl	8005750 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689a      	ldr	r2, [r3, #8]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005002:	609a      	str	r2, [r3, #8]
      break;
 8005004:	e03b      	b.n	800507e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6818      	ldr	r0, [r3, #0]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	6859      	ldr	r1, [r3, #4]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	461a      	mov	r2, r3
 8005014:	f000 fb22 	bl	800565c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2150      	movs	r1, #80	; 0x50
 800501e:	4618      	mov	r0, r3
 8005020:	f000 fb7b 	bl	800571a <TIM_ITRx_SetConfig>
      break;
 8005024:	e02b      	b.n	800507e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6818      	ldr	r0, [r3, #0]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	6859      	ldr	r1, [r3, #4]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	461a      	mov	r2, r3
 8005034:	f000 fb41 	bl	80056ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2160      	movs	r1, #96	; 0x60
 800503e:	4618      	mov	r0, r3
 8005040:	f000 fb6b 	bl	800571a <TIM_ITRx_SetConfig>
      break;
 8005044:	e01b      	b.n	800507e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6818      	ldr	r0, [r3, #0]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	6859      	ldr	r1, [r3, #4]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	461a      	mov	r2, r3
 8005054:	f000 fb02 	bl	800565c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2140      	movs	r1, #64	; 0x40
 800505e:	4618      	mov	r0, r3
 8005060:	f000 fb5b 	bl	800571a <TIM_ITRx_SetConfig>
      break;
 8005064:	e00b      	b.n	800507e <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4619      	mov	r1, r3
 8005070:	4610      	mov	r0, r2
 8005072:	f000 fb52 	bl	800571a <TIM_ITRx_SetConfig>
        break;
 8005076:	e002      	b.n	800507e <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005078:	bf00      	nop
 800507a:	e000      	b.n	800507e <HAL_TIM_ConfigClockSource+0x172>
      break;
 800507c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a2a      	ldr	r2, [pc, #168]	; (8005154 <TIM_Base_SetConfig+0xbc>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d003      	beq.n	80050b8 <TIM_Base_SetConfig+0x20>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b6:	d108      	bne.n	80050ca <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a21      	ldr	r2, [pc, #132]	; (8005154 <TIM_Base_SetConfig+0xbc>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d00b      	beq.n	80050ea <TIM_Base_SetConfig+0x52>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d8:	d007      	beq.n	80050ea <TIM_Base_SetConfig+0x52>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a1e      	ldr	r2, [pc, #120]	; (8005158 <TIM_Base_SetConfig+0xc0>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d003      	beq.n	80050ea <TIM_Base_SetConfig+0x52>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a1d      	ldr	r2, [pc, #116]	; (800515c <TIM_Base_SetConfig+0xc4>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d108      	bne.n	80050fc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	4313      	orrs	r3, r2
 8005108:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	689a      	ldr	r2, [r3, #8]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a0c      	ldr	r2, [pc, #48]	; (8005154 <TIM_Base_SetConfig+0xbc>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d007      	beq.n	8005138 <TIM_Base_SetConfig+0xa0>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a0b      	ldr	r2, [pc, #44]	; (8005158 <TIM_Base_SetConfig+0xc0>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d003      	beq.n	8005138 <TIM_Base_SetConfig+0xa0>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a0a      	ldr	r2, [pc, #40]	; (800515c <TIM_Base_SetConfig+0xc4>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d103      	bne.n	8005140 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	691a      	ldr	r2, [r3, #16]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	615a      	str	r2, [r3, #20]
}
 8005146:	bf00      	nop
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	40012c00 	.word	0x40012c00
 8005158:	40014000 	.word	0x40014000
 800515c:	40014400 	.word	0x40014400

08005160 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005160:	b480      	push	{r7}
 8005162:	b087      	sub	sp, #28
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	f023 0201 	bic.w	r2, r3, #1
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800518e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f023 0303 	bic.w	r3, r3, #3
 800519a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f023 0302 	bic.w	r3, r3, #2
 80051ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a24      	ldr	r2, [pc, #144]	; (800524c <TIM_OC1_SetConfig+0xec>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d007      	beq.n	80051d0 <TIM_OC1_SetConfig+0x70>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a23      	ldr	r2, [pc, #140]	; (8005250 <TIM_OC1_SetConfig+0xf0>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d003      	beq.n	80051d0 <TIM_OC1_SetConfig+0x70>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a22      	ldr	r2, [pc, #136]	; (8005254 <TIM_OC1_SetConfig+0xf4>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d10c      	bne.n	80051ea <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	f023 0308 	bic.w	r3, r3, #8
 80051d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	4313      	orrs	r3, r2
 80051e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f023 0304 	bic.w	r3, r3, #4
 80051e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a17      	ldr	r2, [pc, #92]	; (800524c <TIM_OC1_SetConfig+0xec>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d007      	beq.n	8005202 <TIM_OC1_SetConfig+0xa2>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a16      	ldr	r2, [pc, #88]	; (8005250 <TIM_OC1_SetConfig+0xf0>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d003      	beq.n	8005202 <TIM_OC1_SetConfig+0xa2>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a15      	ldr	r2, [pc, #84]	; (8005254 <TIM_OC1_SetConfig+0xf4>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d111      	bne.n	8005226 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005208:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005210:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	4313      	orrs	r3, r2
 800521a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	4313      	orrs	r3, r2
 8005224:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	685a      	ldr	r2, [r3, #4]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	621a      	str	r2, [r3, #32]
}
 8005240:	bf00      	nop
 8005242:	371c      	adds	r7, #28
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	40012c00 	.word	0x40012c00
 8005250:	40014000 	.word	0x40014000
 8005254:	40014400 	.word	0x40014400

08005258 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	f023 0210 	bic.w	r2, r3, #16
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800528a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005292:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	021b      	lsls	r3, r3, #8
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	4313      	orrs	r3, r2
 800529e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f023 0320 	bic.w	r3, r3, #32
 80052a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	011b      	lsls	r3, r3, #4
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a22      	ldr	r2, [pc, #136]	; (8005340 <TIM_OC2_SetConfig+0xe8>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d10d      	bne.n	80052d8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	011b      	lsls	r3, r3, #4
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a19      	ldr	r2, [pc, #100]	; (8005340 <TIM_OC2_SetConfig+0xe8>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d007      	beq.n	80052f0 <TIM_OC2_SetConfig+0x98>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a18      	ldr	r2, [pc, #96]	; (8005344 <TIM_OC2_SetConfig+0xec>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d003      	beq.n	80052f0 <TIM_OC2_SetConfig+0x98>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a17      	ldr	r2, [pc, #92]	; (8005348 <TIM_OC2_SetConfig+0xf0>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d113      	bne.n	8005318 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	4313      	orrs	r3, r2
 800530a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	4313      	orrs	r3, r2
 8005316:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	621a      	str	r2, [r3, #32]
}
 8005332:	bf00      	nop
 8005334:	371c      	adds	r7, #28
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	40012c00 	.word	0x40012c00
 8005344:	40014000 	.word	0x40014000
 8005348:	40014400 	.word	0x40014400

0800534c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800534c:	b480      	push	{r7}
 800534e:	b087      	sub	sp, #28
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800537a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f023 0303 	bic.w	r3, r3, #3
 8005386:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	4313      	orrs	r3, r2
 8005390:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005398:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	021b      	lsls	r3, r3, #8
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a21      	ldr	r2, [pc, #132]	; (8005430 <TIM_OC3_SetConfig+0xe4>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d10d      	bne.n	80053ca <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	021b      	lsls	r3, r3, #8
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	4313      	orrs	r3, r2
 80053c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a18      	ldr	r2, [pc, #96]	; (8005430 <TIM_OC3_SetConfig+0xe4>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d007      	beq.n	80053e2 <TIM_OC3_SetConfig+0x96>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a17      	ldr	r2, [pc, #92]	; (8005434 <TIM_OC3_SetConfig+0xe8>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d003      	beq.n	80053e2 <TIM_OC3_SetConfig+0x96>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a16      	ldr	r2, [pc, #88]	; (8005438 <TIM_OC3_SetConfig+0xec>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d113      	bne.n	800540a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	011b      	lsls	r3, r3, #4
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	011b      	lsls	r3, r3, #4
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	4313      	orrs	r3, r2
 8005408:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	621a      	str	r2, [r3, #32]
}
 8005424:	bf00      	nop
 8005426:	371c      	adds	r7, #28
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr
 8005430:	40012c00 	.word	0x40012c00
 8005434:	40014000 	.word	0x40014000
 8005438:	40014400 	.word	0x40014400

0800543c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800543c:	b480      	push	{r7}
 800543e:	b087      	sub	sp, #28
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800546a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800546e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005476:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	021b      	lsls	r3, r3, #8
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	4313      	orrs	r3, r2
 8005482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800548a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	031b      	lsls	r3, r3, #12
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	4313      	orrs	r3, r2
 8005496:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a14      	ldr	r2, [pc, #80]	; (80054ec <TIM_OC4_SetConfig+0xb0>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d007      	beq.n	80054b0 <TIM_OC4_SetConfig+0x74>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a13      	ldr	r2, [pc, #76]	; (80054f0 <TIM_OC4_SetConfig+0xb4>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d003      	beq.n	80054b0 <TIM_OC4_SetConfig+0x74>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a12      	ldr	r2, [pc, #72]	; (80054f4 <TIM_OC4_SetConfig+0xb8>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d109      	bne.n	80054c4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	695b      	ldr	r3, [r3, #20]
 80054bc:	019b      	lsls	r3, r3, #6
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	685a      	ldr	r2, [r3, #4]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	621a      	str	r2, [r3, #32]
}
 80054de:	bf00      	nop
 80054e0:	371c      	adds	r7, #28
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	40012c00 	.word	0x40012c00
 80054f0:	40014000 	.word	0x40014000
 80054f4:	40014400 	.word	0x40014400

080054f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b087      	sub	sp, #28
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a1b      	ldr	r3, [r3, #32]
 8005512:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800551e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800552a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	4313      	orrs	r3, r2
 8005534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800553c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	041b      	lsls	r3, r3, #16
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	4313      	orrs	r3, r2
 8005548:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a13      	ldr	r2, [pc, #76]	; (800559c <TIM_OC5_SetConfig+0xa4>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d007      	beq.n	8005562 <TIM_OC5_SetConfig+0x6a>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a12      	ldr	r2, [pc, #72]	; (80055a0 <TIM_OC5_SetConfig+0xa8>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d003      	beq.n	8005562 <TIM_OC5_SetConfig+0x6a>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a11      	ldr	r2, [pc, #68]	; (80055a4 <TIM_OC5_SetConfig+0xac>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d109      	bne.n	8005576 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005568:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	021b      	lsls	r3, r3, #8
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	4313      	orrs	r3, r2
 8005574:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	697a      	ldr	r2, [r7, #20]
 800557a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	685a      	ldr	r2, [r3, #4]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	621a      	str	r2, [r3, #32]
}
 8005590:	bf00      	nop
 8005592:	371c      	adds	r7, #28
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr
 800559c:	40012c00 	.word	0x40012c00
 80055a0:	40014000 	.word	0x40014000
 80055a4:	40014400 	.word	0x40014400

080055a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b087      	sub	sp, #28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	021b      	lsls	r3, r3, #8
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	051b      	lsls	r3, r3, #20
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a14      	ldr	r2, [pc, #80]	; (8005650 <TIM_OC6_SetConfig+0xa8>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d007      	beq.n	8005614 <TIM_OC6_SetConfig+0x6c>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a13      	ldr	r2, [pc, #76]	; (8005654 <TIM_OC6_SetConfig+0xac>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d003      	beq.n	8005614 <TIM_OC6_SetConfig+0x6c>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a12      	ldr	r2, [pc, #72]	; (8005658 <TIM_OC6_SetConfig+0xb0>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d109      	bne.n	8005628 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800561a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	029b      	lsls	r3, r3, #10
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	4313      	orrs	r3, r2
 8005626:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	621a      	str	r2, [r3, #32]
}
 8005642:	bf00      	nop
 8005644:	371c      	adds	r7, #28
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	40012c00 	.word	0x40012c00
 8005654:	40014000 	.word	0x40014000
 8005658:	40014400 	.word	0x40014400

0800565c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800565c:	b480      	push	{r7}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	f023 0201 	bic.w	r2, r3, #1
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005686:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	011b      	lsls	r3, r3, #4
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	4313      	orrs	r3, r2
 8005690:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	f023 030a 	bic.w	r3, r3, #10
 8005698:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	4313      	orrs	r3, r2
 80056a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	621a      	str	r2, [r3, #32]
}
 80056ae:	bf00      	nop
 80056b0:	371c      	adds	r7, #28
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr

080056ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b087      	sub	sp, #28
 80056be:	af00      	add	r7, sp, #0
 80056c0:	60f8      	str	r0, [r7, #12]
 80056c2:	60b9      	str	r1, [r7, #8]
 80056c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	f023 0210 	bic.w	r2, r3, #16
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6a1b      	ldr	r3, [r3, #32]
 80056dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	031b      	lsls	r3, r3, #12
 80056ea:	697a      	ldr	r2, [r7, #20]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	011b      	lsls	r3, r3, #4
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	4313      	orrs	r3, r2
 8005700:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	621a      	str	r2, [r3, #32]
}
 800570e:	bf00      	nop
 8005710:	371c      	adds	r7, #28
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800571a:	b480      	push	{r7}
 800571c:	b085      	sub	sp, #20
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
 8005722:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005730:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005732:	683a      	ldr	r2, [r7, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	4313      	orrs	r3, r2
 8005738:	f043 0307 	orr.w	r3, r3, #7
 800573c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	609a      	str	r2, [r3, #8]
}
 8005744:	bf00      	nop
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005750:	b480      	push	{r7}
 8005752:	b087      	sub	sp, #28
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
 800575c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800576a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	021a      	lsls	r2, r3, #8
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	431a      	orrs	r2, r3
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	4313      	orrs	r3, r2
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	4313      	orrs	r3, r2
 800577c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	609a      	str	r2, [r3, #8]
}
 8005784:	bf00      	nop
 8005786:	371c      	adds	r7, #28
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d109      	bne.n	80057b4 <HAL_TIMEx_PWMN_Start+0x24>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	bf14      	ite	ne
 80057ac:	2301      	movne	r3, #1
 80057ae:	2300      	moveq	r3, #0
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	e022      	b.n	80057fa <HAL_TIMEx_PWMN_Start+0x6a>
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	2b04      	cmp	r3, #4
 80057b8:	d109      	bne.n	80057ce <HAL_TIMEx_PWMN_Start+0x3e>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	bf14      	ite	ne
 80057c6:	2301      	movne	r3, #1
 80057c8:	2300      	moveq	r3, #0
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	e015      	b.n	80057fa <HAL_TIMEx_PWMN_Start+0x6a>
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	2b08      	cmp	r3, #8
 80057d2:	d109      	bne.n	80057e8 <HAL_TIMEx_PWMN_Start+0x58>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	2b01      	cmp	r3, #1
 80057de:	bf14      	ite	ne
 80057e0:	2301      	movne	r3, #1
 80057e2:	2300      	moveq	r3, #0
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	e008      	b.n	80057fa <HAL_TIMEx_PWMN_Start+0x6a>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	bf14      	ite	ne
 80057f4:	2301      	movne	r3, #1
 80057f6:	2300      	moveq	r3, #0
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e05a      	b.n	80058b8 <HAL_TIMEx_PWMN_Start+0x128>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d104      	bne.n	8005812 <HAL_TIMEx_PWMN_Start+0x82>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2202      	movs	r2, #2
 800580c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005810:	e013      	b.n	800583a <HAL_TIMEx_PWMN_Start+0xaa>
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2b04      	cmp	r3, #4
 8005816:	d104      	bne.n	8005822 <HAL_TIMEx_PWMN_Start+0x92>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005820:	e00b      	b.n	800583a <HAL_TIMEx_PWMN_Start+0xaa>
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2b08      	cmp	r3, #8
 8005826:	d104      	bne.n	8005832 <HAL_TIMEx_PWMN_Start+0xa2>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2202      	movs	r2, #2
 800582c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005830:	e003      	b.n	800583a <HAL_TIMEx_PWMN_Start+0xaa>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2202      	movs	r2, #2
 8005836:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2204      	movs	r2, #4
 8005840:	6839      	ldr	r1, [r7, #0]
 8005842:	4618      	mov	r0, r3
 8005844:	f000 f920 	bl	8005a88 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005856:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a18      	ldr	r2, [pc, #96]	; (80058c0 <HAL_TIMEx_PWMN_Start+0x130>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d009      	beq.n	8005876 <HAL_TIMEx_PWMN_Start+0xe6>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800586a:	d004      	beq.n	8005876 <HAL_TIMEx_PWMN_Start+0xe6>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a14      	ldr	r2, [pc, #80]	; (80058c4 <HAL_TIMEx_PWMN_Start+0x134>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d115      	bne.n	80058a2 <HAL_TIMEx_PWMN_Start+0x112>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	689a      	ldr	r2, [r3, #8]
 800587c:	4b12      	ldr	r3, [pc, #72]	; (80058c8 <HAL_TIMEx_PWMN_Start+0x138>)
 800587e:	4013      	ands	r3, r2
 8005880:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2b06      	cmp	r3, #6
 8005886:	d015      	beq.n	80058b4 <HAL_TIMEx_PWMN_Start+0x124>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800588e:	d011      	beq.n	80058b4 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f042 0201 	orr.w	r2, r2, #1
 800589e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a0:	e008      	b.n	80058b4 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f042 0201 	orr.w	r2, r2, #1
 80058b0:	601a      	str	r2, [r3, #0]
 80058b2:	e000      	b.n	80058b6 <HAL_TIMEx_PWMN_Start+0x126>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3710      	adds	r7, #16
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	40012c00 	.word	0x40012c00
 80058c4:	40014000 	.word	0x40014000
 80058c8:	00010007 	.word	0x00010007

080058cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d101      	bne.n	80058e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058e0:	2302      	movs	r3, #2
 80058e2:	e04f      	b.n	8005984 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2202      	movs	r2, #2
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a21      	ldr	r2, [pc, #132]	; (8005990 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d108      	bne.n	8005920 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005914:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	4313      	orrs	r3, r2
 800591e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005926:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	4313      	orrs	r3, r2
 8005930:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a14      	ldr	r2, [pc, #80]	; (8005990 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d009      	beq.n	8005958 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800594c:	d004      	beq.n	8005958 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a10      	ldr	r2, [pc, #64]	; (8005994 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d10c      	bne.n	8005972 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800595e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	4313      	orrs	r3, r2
 8005968:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3714      	adds	r7, #20
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	40012c00 	.word	0x40012c00
 8005994:	40014000 	.word	0x40014000

08005998 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d101      	bne.n	80059b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80059b0:	2302      	movs	r3, #2
 80059b2:	e060      	b.n	8005a76 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	041b      	lsls	r3, r3, #16
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a14      	ldr	r2, [pc, #80]	; (8005a84 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d115      	bne.n	8005a64 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a42:	051b      	lsls	r3, r3, #20
 8005a44:	4313      	orrs	r3, r2
 8005a46:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	69db      	ldr	r3, [r3, #28]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	6a1b      	ldr	r3, [r3, #32]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	40012c00 	.word	0x40012c00

08005a88 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b087      	sub	sp, #28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	f003 031f 	and.w	r3, r3, #31
 8005a9a:	2204      	movs	r2, #4
 8005a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6a1a      	ldr	r2, [r3, #32]
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	43db      	mvns	r3, r3
 8005aaa:	401a      	ands	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6a1a      	ldr	r2, [r3, #32]
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	f003 031f 	and.w	r3, r3, #31
 8005aba:	6879      	ldr	r1, [r7, #4]
 8005abc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ac0:	431a      	orrs	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	621a      	str	r2, [r3, #32]
}
 8005ac6:	bf00      	nop
 8005ac8:	371c      	adds	r7, #28
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b082      	sub	sp, #8
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e040      	b.n	8005b66 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d106      	bne.n	8005afa <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f7fc f891 	bl	8001c1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2224      	movs	r2, #36	; 0x24
 8005afe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f022 0201 	bic.w	r2, r2, #1
 8005b0e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 f8c1 	bl	8005c98 <UART_SetConfig>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d101      	bne.n	8005b20 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e022      	b.n	8005b66 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d002      	beq.n	8005b2e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 fac1 	bl	80060b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	685a      	ldr	r2, [r3, #4]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b3c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689a      	ldr	r2, [r3, #8]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b4c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f042 0201 	orr.w	r2, r2, #1
 8005b5c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 fb48 	bl	80061f4 <UART_CheckIdleState>
 8005b64:	4603      	mov	r3, r0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3708      	adds	r7, #8
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b08a      	sub	sp, #40	; 0x28
 8005b72:	af02      	add	r7, sp, #8
 8005b74:	60f8      	str	r0, [r7, #12]
 8005b76:	60b9      	str	r1, [r7, #8]
 8005b78:	603b      	str	r3, [r7, #0]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b82:	2b20      	cmp	r3, #32
 8005b84:	f040 8082 	bne.w	8005c8c <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d002      	beq.n	8005b94 <HAL_UART_Transmit+0x26>
 8005b8e:	88fb      	ldrh	r3, [r7, #6]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d101      	bne.n	8005b98 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e07a      	b.n	8005c8e <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d101      	bne.n	8005ba6 <HAL_UART_Transmit+0x38>
 8005ba2:	2302      	movs	r3, #2
 8005ba4:	e073      	b.n	8005c8e <HAL_UART_Transmit+0x120>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2221      	movs	r2, #33	; 0x21
 8005bba:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bbc:	f7fc f914 	bl	8001de8 <HAL_GetTick>
 8005bc0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	88fa      	ldrh	r2, [r7, #6]
 8005bc6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	88fa      	ldrh	r2, [r7, #6]
 8005bce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bda:	d108      	bne.n	8005bee <HAL_UART_Transmit+0x80>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d104      	bne.n	8005bee <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005be4:	2300      	movs	r3, #0
 8005be6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	61bb      	str	r3, [r7, #24]
 8005bec:	e003      	b.n	8005bf6 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005bfe:	e02d      	b.n	8005c5c <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	9300      	str	r3, [sp, #0]
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	2200      	movs	r2, #0
 8005c08:	2180      	movs	r1, #128	; 0x80
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f000 fb3b 	bl	8006286 <UART_WaitOnFlagUntilTimeout>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d001      	beq.n	8005c1a <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e039      	b.n	8005c8e <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10b      	bne.n	8005c38 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	881a      	ldrh	r2, [r3, #0]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c2c:	b292      	uxth	r2, r2
 8005c2e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	3302      	adds	r3, #2
 8005c34:	61bb      	str	r3, [r7, #24]
 8005c36:	e008      	b.n	8005c4a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	781a      	ldrb	r2, [r3, #0]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	b292      	uxth	r2, r2
 8005c42:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	3301      	adds	r3, #1
 8005c48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	3b01      	subs	r3, #1
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d1cb      	bne.n	8005c00 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	9300      	str	r3, [sp, #0]
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	2140      	movs	r1, #64	; 0x40
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f000 fb07 	bl	8006286 <UART_WaitOnFlagUntilTimeout>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d001      	beq.n	8005c82 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e005      	b.n	8005c8e <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2220      	movs	r2, #32
 8005c86:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	e000      	b.n	8005c8e <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005c8c:	2302      	movs	r3, #2
  }
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3720      	adds	r7, #32
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
	...

08005c98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c98:	b5b0      	push	{r4, r5, r7, lr}
 8005c9a:	b088      	sub	sp, #32
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689a      	ldr	r2, [r3, #8]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	431a      	orrs	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	69db      	ldr	r3, [r3, #28]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	4baf      	ldr	r3, [pc, #700]	; (8005f80 <UART_SetConfig+0x2e8>)
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	6812      	ldr	r2, [r2, #0]
 8005cca:	69f9      	ldr	r1, [r7, #28]
 8005ccc:	430b      	orrs	r3, r1
 8005cce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68da      	ldr	r2, [r3, #12]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	430a      	orrs	r2, r1
 8005ce4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4aa4      	ldr	r2, [pc, #656]	; (8005f84 <UART_SetConfig+0x2ec>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d004      	beq.n	8005d00 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	69fa      	ldr	r2, [r7, #28]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	69fa      	ldr	r2, [r7, #28]
 8005d10:	430a      	orrs	r2, r1
 8005d12:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a9b      	ldr	r2, [pc, #620]	; (8005f88 <UART_SetConfig+0x2f0>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d121      	bne.n	8005d62 <UART_SetConfig+0xca>
 8005d1e:	4b9b      	ldr	r3, [pc, #620]	; (8005f8c <UART_SetConfig+0x2f4>)
 8005d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d24:	f003 0303 	and.w	r3, r3, #3
 8005d28:	2b03      	cmp	r3, #3
 8005d2a:	d817      	bhi.n	8005d5c <UART_SetConfig+0xc4>
 8005d2c:	a201      	add	r2, pc, #4	; (adr r2, 8005d34 <UART_SetConfig+0x9c>)
 8005d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d32:	bf00      	nop
 8005d34:	08005d45 	.word	0x08005d45
 8005d38:	08005d51 	.word	0x08005d51
 8005d3c:	08005d4b 	.word	0x08005d4b
 8005d40:	08005d57 	.word	0x08005d57
 8005d44:	2301      	movs	r3, #1
 8005d46:	76fb      	strb	r3, [r7, #27]
 8005d48:	e070      	b.n	8005e2c <UART_SetConfig+0x194>
 8005d4a:	2302      	movs	r3, #2
 8005d4c:	76fb      	strb	r3, [r7, #27]
 8005d4e:	e06d      	b.n	8005e2c <UART_SetConfig+0x194>
 8005d50:	2304      	movs	r3, #4
 8005d52:	76fb      	strb	r3, [r7, #27]
 8005d54:	e06a      	b.n	8005e2c <UART_SetConfig+0x194>
 8005d56:	2308      	movs	r3, #8
 8005d58:	76fb      	strb	r3, [r7, #27]
 8005d5a:	e067      	b.n	8005e2c <UART_SetConfig+0x194>
 8005d5c:	2310      	movs	r3, #16
 8005d5e:	76fb      	strb	r3, [r7, #27]
 8005d60:	e064      	b.n	8005e2c <UART_SetConfig+0x194>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a8a      	ldr	r2, [pc, #552]	; (8005f90 <UART_SetConfig+0x2f8>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d132      	bne.n	8005dd2 <UART_SetConfig+0x13a>
 8005d6c:	4b87      	ldr	r3, [pc, #540]	; (8005f8c <UART_SetConfig+0x2f4>)
 8005d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d72:	f003 030c 	and.w	r3, r3, #12
 8005d76:	2b0c      	cmp	r3, #12
 8005d78:	d828      	bhi.n	8005dcc <UART_SetConfig+0x134>
 8005d7a:	a201      	add	r2, pc, #4	; (adr r2, 8005d80 <UART_SetConfig+0xe8>)
 8005d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d80:	08005db5 	.word	0x08005db5
 8005d84:	08005dcd 	.word	0x08005dcd
 8005d88:	08005dcd 	.word	0x08005dcd
 8005d8c:	08005dcd 	.word	0x08005dcd
 8005d90:	08005dc1 	.word	0x08005dc1
 8005d94:	08005dcd 	.word	0x08005dcd
 8005d98:	08005dcd 	.word	0x08005dcd
 8005d9c:	08005dcd 	.word	0x08005dcd
 8005da0:	08005dbb 	.word	0x08005dbb
 8005da4:	08005dcd 	.word	0x08005dcd
 8005da8:	08005dcd 	.word	0x08005dcd
 8005dac:	08005dcd 	.word	0x08005dcd
 8005db0:	08005dc7 	.word	0x08005dc7
 8005db4:	2300      	movs	r3, #0
 8005db6:	76fb      	strb	r3, [r7, #27]
 8005db8:	e038      	b.n	8005e2c <UART_SetConfig+0x194>
 8005dba:	2302      	movs	r3, #2
 8005dbc:	76fb      	strb	r3, [r7, #27]
 8005dbe:	e035      	b.n	8005e2c <UART_SetConfig+0x194>
 8005dc0:	2304      	movs	r3, #4
 8005dc2:	76fb      	strb	r3, [r7, #27]
 8005dc4:	e032      	b.n	8005e2c <UART_SetConfig+0x194>
 8005dc6:	2308      	movs	r3, #8
 8005dc8:	76fb      	strb	r3, [r7, #27]
 8005dca:	e02f      	b.n	8005e2c <UART_SetConfig+0x194>
 8005dcc:	2310      	movs	r3, #16
 8005dce:	76fb      	strb	r3, [r7, #27]
 8005dd0:	e02c      	b.n	8005e2c <UART_SetConfig+0x194>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a6b      	ldr	r2, [pc, #428]	; (8005f84 <UART_SetConfig+0x2ec>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d125      	bne.n	8005e28 <UART_SetConfig+0x190>
 8005ddc:	4b6b      	ldr	r3, [pc, #428]	; (8005f8c <UART_SetConfig+0x2f4>)
 8005dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005de6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005dea:	d017      	beq.n	8005e1c <UART_SetConfig+0x184>
 8005dec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005df0:	d817      	bhi.n	8005e22 <UART_SetConfig+0x18a>
 8005df2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005df6:	d00b      	beq.n	8005e10 <UART_SetConfig+0x178>
 8005df8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dfc:	d811      	bhi.n	8005e22 <UART_SetConfig+0x18a>
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d003      	beq.n	8005e0a <UART_SetConfig+0x172>
 8005e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e06:	d006      	beq.n	8005e16 <UART_SetConfig+0x17e>
 8005e08:	e00b      	b.n	8005e22 <UART_SetConfig+0x18a>
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	76fb      	strb	r3, [r7, #27]
 8005e0e:	e00d      	b.n	8005e2c <UART_SetConfig+0x194>
 8005e10:	2302      	movs	r3, #2
 8005e12:	76fb      	strb	r3, [r7, #27]
 8005e14:	e00a      	b.n	8005e2c <UART_SetConfig+0x194>
 8005e16:	2304      	movs	r3, #4
 8005e18:	76fb      	strb	r3, [r7, #27]
 8005e1a:	e007      	b.n	8005e2c <UART_SetConfig+0x194>
 8005e1c:	2308      	movs	r3, #8
 8005e1e:	76fb      	strb	r3, [r7, #27]
 8005e20:	e004      	b.n	8005e2c <UART_SetConfig+0x194>
 8005e22:	2310      	movs	r3, #16
 8005e24:	76fb      	strb	r3, [r7, #27]
 8005e26:	e001      	b.n	8005e2c <UART_SetConfig+0x194>
 8005e28:	2310      	movs	r3, #16
 8005e2a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a54      	ldr	r2, [pc, #336]	; (8005f84 <UART_SetConfig+0x2ec>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d173      	bne.n	8005f1e <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e36:	7efb      	ldrb	r3, [r7, #27]
 8005e38:	2b08      	cmp	r3, #8
 8005e3a:	d824      	bhi.n	8005e86 <UART_SetConfig+0x1ee>
 8005e3c:	a201      	add	r2, pc, #4	; (adr r2, 8005e44 <UART_SetConfig+0x1ac>)
 8005e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e42:	bf00      	nop
 8005e44:	08005e69 	.word	0x08005e69
 8005e48:	08005e87 	.word	0x08005e87
 8005e4c:	08005e71 	.word	0x08005e71
 8005e50:	08005e87 	.word	0x08005e87
 8005e54:	08005e77 	.word	0x08005e77
 8005e58:	08005e87 	.word	0x08005e87
 8005e5c:	08005e87 	.word	0x08005e87
 8005e60:	08005e87 	.word	0x08005e87
 8005e64:	08005e7f 	.word	0x08005e7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e68:	f7fe fb06 	bl	8004478 <HAL_RCC_GetPCLK1Freq>
 8005e6c:	6178      	str	r0, [r7, #20]
        break;
 8005e6e:	e00f      	b.n	8005e90 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e70:	4b48      	ldr	r3, [pc, #288]	; (8005f94 <UART_SetConfig+0x2fc>)
 8005e72:	617b      	str	r3, [r7, #20]
        break;
 8005e74:	e00c      	b.n	8005e90 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e76:	f7fe fa67 	bl	8004348 <HAL_RCC_GetSysClockFreq>
 8005e7a:	6178      	str	r0, [r7, #20]
        break;
 8005e7c:	e008      	b.n	8005e90 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e82:	617b      	str	r3, [r7, #20]
        break;
 8005e84:	e004      	b.n	8005e90 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8005e86:	2300      	movs	r3, #0
 8005e88:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	76bb      	strb	r3, [r7, #26]
        break;
 8005e8e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f000 80fe 	beq.w	8006094 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	005b      	lsls	r3, r3, #1
 8005ea0:	4413      	add	r3, r2
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d305      	bcc.n	8005eb4 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d902      	bls.n	8005eba <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	76bb      	strb	r3, [r7, #26]
 8005eb8:	e0ec      	b.n	8006094 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f04f 0100 	mov.w	r1, #0
 8005ec2:	f04f 0200 	mov.w	r2, #0
 8005ec6:	f04f 0300 	mov.w	r3, #0
 8005eca:	020b      	lsls	r3, r1, #8
 8005ecc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005ed0:	0202      	lsls	r2, r0, #8
 8005ed2:	6879      	ldr	r1, [r7, #4]
 8005ed4:	6849      	ldr	r1, [r1, #4]
 8005ed6:	0849      	lsrs	r1, r1, #1
 8005ed8:	4608      	mov	r0, r1
 8005eda:	f04f 0100 	mov.w	r1, #0
 8005ede:	1814      	adds	r4, r2, r0
 8005ee0:	eb43 0501 	adc.w	r5, r3, r1
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	461a      	mov	r2, r3
 8005eea:	f04f 0300 	mov.w	r3, #0
 8005eee:	4620      	mov	r0, r4
 8005ef0:	4629      	mov	r1, r5
 8005ef2:	f7fa fe3b 	bl	8000b6c <__aeabi_uldivmod>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	460b      	mov	r3, r1
 8005efa:	4613      	mov	r3, r2
 8005efc:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f04:	d308      	bcc.n	8005f18 <UART_SetConfig+0x280>
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f0c:	d204      	bcs.n	8005f18 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	60da      	str	r2, [r3, #12]
 8005f16:	e0bd      	b.n	8006094 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	76bb      	strb	r3, [r7, #26]
 8005f1c:	e0ba      	b.n	8006094 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f26:	d168      	bne.n	8005ffa <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8005f28:	7efb      	ldrb	r3, [r7, #27]
 8005f2a:	2b08      	cmp	r3, #8
 8005f2c:	d834      	bhi.n	8005f98 <UART_SetConfig+0x300>
 8005f2e:	a201      	add	r2, pc, #4	; (adr r2, 8005f34 <UART_SetConfig+0x29c>)
 8005f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f34:	08005f59 	.word	0x08005f59
 8005f38:	08005f61 	.word	0x08005f61
 8005f3c:	08005f69 	.word	0x08005f69
 8005f40:	08005f99 	.word	0x08005f99
 8005f44:	08005f6f 	.word	0x08005f6f
 8005f48:	08005f99 	.word	0x08005f99
 8005f4c:	08005f99 	.word	0x08005f99
 8005f50:	08005f99 	.word	0x08005f99
 8005f54:	08005f77 	.word	0x08005f77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f58:	f7fe fa8e 	bl	8004478 <HAL_RCC_GetPCLK1Freq>
 8005f5c:	6178      	str	r0, [r7, #20]
        break;
 8005f5e:	e020      	b.n	8005fa2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f60:	f7fe faa0 	bl	80044a4 <HAL_RCC_GetPCLK2Freq>
 8005f64:	6178      	str	r0, [r7, #20]
        break;
 8005f66:	e01c      	b.n	8005fa2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f68:	4b0a      	ldr	r3, [pc, #40]	; (8005f94 <UART_SetConfig+0x2fc>)
 8005f6a:	617b      	str	r3, [r7, #20]
        break;
 8005f6c:	e019      	b.n	8005fa2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f6e:	f7fe f9eb 	bl	8004348 <HAL_RCC_GetSysClockFreq>
 8005f72:	6178      	str	r0, [r7, #20]
        break;
 8005f74:	e015      	b.n	8005fa2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f7a:	617b      	str	r3, [r7, #20]
        break;
 8005f7c:	e011      	b.n	8005fa2 <UART_SetConfig+0x30a>
 8005f7e:	bf00      	nop
 8005f80:	efff69f3 	.word	0xefff69f3
 8005f84:	40008000 	.word	0x40008000
 8005f88:	40013800 	.word	0x40013800
 8005f8c:	40021000 	.word	0x40021000
 8005f90:	40004400 	.word	0x40004400
 8005f94:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	76bb      	strb	r3, [r7, #26]
        break;
 8005fa0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d075      	beq.n	8006094 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	005a      	lsls	r2, r3, #1
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	085b      	lsrs	r3, r3, #1
 8005fb2:	441a      	add	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	2b0f      	cmp	r3, #15
 8005fc4:	d916      	bls.n	8005ff4 <UART_SetConfig+0x35c>
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fcc:	d212      	bcs.n	8005ff4 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	f023 030f 	bic.w	r3, r3, #15
 8005fd6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	085b      	lsrs	r3, r3, #1
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	f003 0307 	and.w	r3, r3, #7
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	89fb      	ldrh	r3, [r7, #14]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	89fa      	ldrh	r2, [r7, #14]
 8005ff0:	60da      	str	r2, [r3, #12]
 8005ff2:	e04f      	b.n	8006094 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	76bb      	strb	r3, [r7, #26]
 8005ff8:	e04c      	b.n	8006094 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ffa:	7efb      	ldrb	r3, [r7, #27]
 8005ffc:	2b08      	cmp	r3, #8
 8005ffe:	d828      	bhi.n	8006052 <UART_SetConfig+0x3ba>
 8006000:	a201      	add	r2, pc, #4	; (adr r2, 8006008 <UART_SetConfig+0x370>)
 8006002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006006:	bf00      	nop
 8006008:	0800602d 	.word	0x0800602d
 800600c:	08006035 	.word	0x08006035
 8006010:	0800603d 	.word	0x0800603d
 8006014:	08006053 	.word	0x08006053
 8006018:	08006043 	.word	0x08006043
 800601c:	08006053 	.word	0x08006053
 8006020:	08006053 	.word	0x08006053
 8006024:	08006053 	.word	0x08006053
 8006028:	0800604b 	.word	0x0800604b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800602c:	f7fe fa24 	bl	8004478 <HAL_RCC_GetPCLK1Freq>
 8006030:	6178      	str	r0, [r7, #20]
        break;
 8006032:	e013      	b.n	800605c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006034:	f7fe fa36 	bl	80044a4 <HAL_RCC_GetPCLK2Freq>
 8006038:	6178      	str	r0, [r7, #20]
        break;
 800603a:	e00f      	b.n	800605c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800603c:	4b1b      	ldr	r3, [pc, #108]	; (80060ac <UART_SetConfig+0x414>)
 800603e:	617b      	str	r3, [r7, #20]
        break;
 8006040:	e00c      	b.n	800605c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006042:	f7fe f981 	bl	8004348 <HAL_RCC_GetSysClockFreq>
 8006046:	6178      	str	r0, [r7, #20]
        break;
 8006048:	e008      	b.n	800605c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800604a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800604e:	617b      	str	r3, [r7, #20]
        break;
 8006050:	e004      	b.n	800605c <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8006052:	2300      	movs	r3, #0
 8006054:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	76bb      	strb	r3, [r7, #26]
        break;
 800605a:	bf00      	nop
    }

    if (pclk != 0U)
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d018      	beq.n	8006094 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	085a      	lsrs	r2, r3, #1
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	441a      	add	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	fbb2 f3f3 	udiv	r3, r2, r3
 8006074:	b29b      	uxth	r3, r3
 8006076:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	2b0f      	cmp	r3, #15
 800607c:	d908      	bls.n	8006090 <UART_SetConfig+0x3f8>
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006084:	d204      	bcs.n	8006090 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	60da      	str	r2, [r3, #12]
 800608e:	e001      	b.n	8006094 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80060a0:	7ebb      	ldrb	r3, [r7, #26]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3720      	adds	r7, #32
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bdb0      	pop	{r4, r5, r7, pc}
 80060aa:	bf00      	nop
 80060ac:	00f42400 	.word	0x00f42400

080060b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00a      	beq.n	80060da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	430a      	orrs	r2, r1
 80060d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00a      	beq.n	80060fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	430a      	orrs	r2, r1
 80060fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006100:	f003 0304 	and.w	r3, r3, #4
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00a      	beq.n	800611e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	430a      	orrs	r2, r1
 800611c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006122:	f003 0308 	and.w	r3, r3, #8
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00a      	beq.n	8006140 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	430a      	orrs	r2, r1
 800613e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006144:	f003 0310 	and.w	r3, r3, #16
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00a      	beq.n	8006162 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	430a      	orrs	r2, r1
 8006160:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006166:	f003 0320 	and.w	r3, r3, #32
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00a      	beq.n	8006184 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	430a      	orrs	r2, r1
 8006182:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800618c:	2b00      	cmp	r3, #0
 800618e:	d01a      	beq.n	80061c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	430a      	orrs	r2, r1
 80061a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061ae:	d10a      	bne.n	80061c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00a      	beq.n	80061e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	430a      	orrs	r2, r1
 80061e6:	605a      	str	r2, [r3, #4]
  }
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b086      	sub	sp, #24
 80061f8:	af02      	add	r7, sp, #8
 80061fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006204:	f7fb fdf0 	bl	8001de8 <HAL_GetTick>
 8006208:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0308 	and.w	r3, r3, #8
 8006214:	2b08      	cmp	r3, #8
 8006216:	d10e      	bne.n	8006236 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006218:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f82d 	bl	8006286 <UART_WaitOnFlagUntilTimeout>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d001      	beq.n	8006236 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e023      	b.n	800627e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0304 	and.w	r3, r3, #4
 8006240:	2b04      	cmp	r3, #4
 8006242:	d10e      	bne.n	8006262 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006244:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f817 	bl	8006286 <UART_WaitOnFlagUntilTimeout>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d001      	beq.n	8006262 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e00d      	b.n	800627e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2220      	movs	r2, #32
 8006266:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2220      	movs	r2, #32
 800626c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006286:	b580      	push	{r7, lr}
 8006288:	b084      	sub	sp, #16
 800628a:	af00      	add	r7, sp, #0
 800628c:	60f8      	str	r0, [r7, #12]
 800628e:	60b9      	str	r1, [r7, #8]
 8006290:	603b      	str	r3, [r7, #0]
 8006292:	4613      	mov	r3, r2
 8006294:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006296:	e05e      	b.n	8006356 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800629e:	d05a      	beq.n	8006356 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062a0:	f7fb fda2 	bl	8001de8 <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	69ba      	ldr	r2, [r7, #24]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d302      	bcc.n	80062b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d11b      	bne.n	80062ee <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80062c4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	689a      	ldr	r2, [r3, #8]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f022 0201 	bic.w	r2, r2, #1
 80062d4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2220      	movs	r2, #32
 80062da:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2220      	movs	r2, #32
 80062e0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e043      	b.n	8006376 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0304 	and.w	r3, r3, #4
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d02c      	beq.n	8006356 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	69db      	ldr	r3, [r3, #28]
 8006302:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006306:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800630a:	d124      	bne.n	8006356 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006314:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006324:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	689a      	ldr	r2, [r3, #8]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f022 0201 	bic.w	r2, r2, #1
 8006334:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2220      	movs	r2, #32
 800633a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2220      	movs	r2, #32
 8006340:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2220      	movs	r2, #32
 8006346:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e00f      	b.n	8006376 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	69da      	ldr	r2, [r3, #28]
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	4013      	ands	r3, r2
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	429a      	cmp	r2, r3
 8006364:	bf0c      	ite	eq
 8006366:	2301      	moveq	r3, #1
 8006368:	2300      	movne	r3, #0
 800636a:	b2db      	uxtb	r3, r3
 800636c:	461a      	mov	r2, r3
 800636e:	79fb      	ldrb	r3, [r7, #7]
 8006370:	429a      	cmp	r2, r3
 8006372:	d091      	beq.n	8006298 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
	...

08006380 <__errno>:
 8006380:	4b01      	ldr	r3, [pc, #4]	; (8006388 <__errno+0x8>)
 8006382:	6818      	ldr	r0, [r3, #0]
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	2000000c 	.word	0x2000000c

0800638c <__libc_init_array>:
 800638c:	b570      	push	{r4, r5, r6, lr}
 800638e:	4d0d      	ldr	r5, [pc, #52]	; (80063c4 <__libc_init_array+0x38>)
 8006390:	4c0d      	ldr	r4, [pc, #52]	; (80063c8 <__libc_init_array+0x3c>)
 8006392:	1b64      	subs	r4, r4, r5
 8006394:	10a4      	asrs	r4, r4, #2
 8006396:	2600      	movs	r6, #0
 8006398:	42a6      	cmp	r6, r4
 800639a:	d109      	bne.n	80063b0 <__libc_init_array+0x24>
 800639c:	4d0b      	ldr	r5, [pc, #44]	; (80063cc <__libc_init_array+0x40>)
 800639e:	4c0c      	ldr	r4, [pc, #48]	; (80063d0 <__libc_init_array+0x44>)
 80063a0:	f000 fc4e 	bl	8006c40 <_init>
 80063a4:	1b64      	subs	r4, r4, r5
 80063a6:	10a4      	asrs	r4, r4, #2
 80063a8:	2600      	movs	r6, #0
 80063aa:	42a6      	cmp	r6, r4
 80063ac:	d105      	bne.n	80063ba <__libc_init_array+0x2e>
 80063ae:	bd70      	pop	{r4, r5, r6, pc}
 80063b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80063b4:	4798      	blx	r3
 80063b6:	3601      	adds	r6, #1
 80063b8:	e7ee      	b.n	8006398 <__libc_init_array+0xc>
 80063ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80063be:	4798      	blx	r3
 80063c0:	3601      	adds	r6, #1
 80063c2:	e7f2      	b.n	80063aa <__libc_init_array+0x1e>
 80063c4:	08006cf4 	.word	0x08006cf4
 80063c8:	08006cf4 	.word	0x08006cf4
 80063cc:	08006cf4 	.word	0x08006cf4
 80063d0:	08006cf8 	.word	0x08006cf8

080063d4 <memset>:
 80063d4:	4402      	add	r2, r0
 80063d6:	4603      	mov	r3, r0
 80063d8:	4293      	cmp	r3, r2
 80063da:	d100      	bne.n	80063de <memset+0xa>
 80063dc:	4770      	bx	lr
 80063de:	f803 1b01 	strb.w	r1, [r3], #1
 80063e2:	e7f9      	b.n	80063d8 <memset+0x4>

080063e4 <siprintf>:
 80063e4:	b40e      	push	{r1, r2, r3}
 80063e6:	b500      	push	{lr}
 80063e8:	b09c      	sub	sp, #112	; 0x70
 80063ea:	ab1d      	add	r3, sp, #116	; 0x74
 80063ec:	9002      	str	r0, [sp, #8]
 80063ee:	9006      	str	r0, [sp, #24]
 80063f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80063f4:	4809      	ldr	r0, [pc, #36]	; (800641c <siprintf+0x38>)
 80063f6:	9107      	str	r1, [sp, #28]
 80063f8:	9104      	str	r1, [sp, #16]
 80063fa:	4909      	ldr	r1, [pc, #36]	; (8006420 <siprintf+0x3c>)
 80063fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006400:	9105      	str	r1, [sp, #20]
 8006402:	6800      	ldr	r0, [r0, #0]
 8006404:	9301      	str	r3, [sp, #4]
 8006406:	a902      	add	r1, sp, #8
 8006408:	f000 f868 	bl	80064dc <_svfiprintf_r>
 800640c:	9b02      	ldr	r3, [sp, #8]
 800640e:	2200      	movs	r2, #0
 8006410:	701a      	strb	r2, [r3, #0]
 8006412:	b01c      	add	sp, #112	; 0x70
 8006414:	f85d eb04 	ldr.w	lr, [sp], #4
 8006418:	b003      	add	sp, #12
 800641a:	4770      	bx	lr
 800641c:	2000000c 	.word	0x2000000c
 8006420:	ffff0208 	.word	0xffff0208

08006424 <__ssputs_r>:
 8006424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006428:	688e      	ldr	r6, [r1, #8]
 800642a:	429e      	cmp	r6, r3
 800642c:	4682      	mov	sl, r0
 800642e:	460c      	mov	r4, r1
 8006430:	4690      	mov	r8, r2
 8006432:	461f      	mov	r7, r3
 8006434:	d838      	bhi.n	80064a8 <__ssputs_r+0x84>
 8006436:	898a      	ldrh	r2, [r1, #12]
 8006438:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800643c:	d032      	beq.n	80064a4 <__ssputs_r+0x80>
 800643e:	6825      	ldr	r5, [r4, #0]
 8006440:	6909      	ldr	r1, [r1, #16]
 8006442:	eba5 0901 	sub.w	r9, r5, r1
 8006446:	6965      	ldr	r5, [r4, #20]
 8006448:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800644c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006450:	3301      	adds	r3, #1
 8006452:	444b      	add	r3, r9
 8006454:	106d      	asrs	r5, r5, #1
 8006456:	429d      	cmp	r5, r3
 8006458:	bf38      	it	cc
 800645a:	461d      	movcc	r5, r3
 800645c:	0553      	lsls	r3, r2, #21
 800645e:	d531      	bpl.n	80064c4 <__ssputs_r+0xa0>
 8006460:	4629      	mov	r1, r5
 8006462:	f000 fb47 	bl	8006af4 <_malloc_r>
 8006466:	4606      	mov	r6, r0
 8006468:	b950      	cbnz	r0, 8006480 <__ssputs_r+0x5c>
 800646a:	230c      	movs	r3, #12
 800646c:	f8ca 3000 	str.w	r3, [sl]
 8006470:	89a3      	ldrh	r3, [r4, #12]
 8006472:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006476:	81a3      	strh	r3, [r4, #12]
 8006478:	f04f 30ff 	mov.w	r0, #4294967295
 800647c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006480:	6921      	ldr	r1, [r4, #16]
 8006482:	464a      	mov	r2, r9
 8006484:	f000 fabe 	bl	8006a04 <memcpy>
 8006488:	89a3      	ldrh	r3, [r4, #12]
 800648a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800648e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006492:	81a3      	strh	r3, [r4, #12]
 8006494:	6126      	str	r6, [r4, #16]
 8006496:	6165      	str	r5, [r4, #20]
 8006498:	444e      	add	r6, r9
 800649a:	eba5 0509 	sub.w	r5, r5, r9
 800649e:	6026      	str	r6, [r4, #0]
 80064a0:	60a5      	str	r5, [r4, #8]
 80064a2:	463e      	mov	r6, r7
 80064a4:	42be      	cmp	r6, r7
 80064a6:	d900      	bls.n	80064aa <__ssputs_r+0x86>
 80064a8:	463e      	mov	r6, r7
 80064aa:	4632      	mov	r2, r6
 80064ac:	6820      	ldr	r0, [r4, #0]
 80064ae:	4641      	mov	r1, r8
 80064b0:	f000 fab6 	bl	8006a20 <memmove>
 80064b4:	68a3      	ldr	r3, [r4, #8]
 80064b6:	6822      	ldr	r2, [r4, #0]
 80064b8:	1b9b      	subs	r3, r3, r6
 80064ba:	4432      	add	r2, r6
 80064bc:	60a3      	str	r3, [r4, #8]
 80064be:	6022      	str	r2, [r4, #0]
 80064c0:	2000      	movs	r0, #0
 80064c2:	e7db      	b.n	800647c <__ssputs_r+0x58>
 80064c4:	462a      	mov	r2, r5
 80064c6:	f000 fb6f 	bl	8006ba8 <_realloc_r>
 80064ca:	4606      	mov	r6, r0
 80064cc:	2800      	cmp	r0, #0
 80064ce:	d1e1      	bne.n	8006494 <__ssputs_r+0x70>
 80064d0:	6921      	ldr	r1, [r4, #16]
 80064d2:	4650      	mov	r0, sl
 80064d4:	f000 fabe 	bl	8006a54 <_free_r>
 80064d8:	e7c7      	b.n	800646a <__ssputs_r+0x46>
	...

080064dc <_svfiprintf_r>:
 80064dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e0:	4698      	mov	r8, r3
 80064e2:	898b      	ldrh	r3, [r1, #12]
 80064e4:	061b      	lsls	r3, r3, #24
 80064e6:	b09d      	sub	sp, #116	; 0x74
 80064e8:	4607      	mov	r7, r0
 80064ea:	460d      	mov	r5, r1
 80064ec:	4614      	mov	r4, r2
 80064ee:	d50e      	bpl.n	800650e <_svfiprintf_r+0x32>
 80064f0:	690b      	ldr	r3, [r1, #16]
 80064f2:	b963      	cbnz	r3, 800650e <_svfiprintf_r+0x32>
 80064f4:	2140      	movs	r1, #64	; 0x40
 80064f6:	f000 fafd 	bl	8006af4 <_malloc_r>
 80064fa:	6028      	str	r0, [r5, #0]
 80064fc:	6128      	str	r0, [r5, #16]
 80064fe:	b920      	cbnz	r0, 800650a <_svfiprintf_r+0x2e>
 8006500:	230c      	movs	r3, #12
 8006502:	603b      	str	r3, [r7, #0]
 8006504:	f04f 30ff 	mov.w	r0, #4294967295
 8006508:	e0d1      	b.n	80066ae <_svfiprintf_r+0x1d2>
 800650a:	2340      	movs	r3, #64	; 0x40
 800650c:	616b      	str	r3, [r5, #20]
 800650e:	2300      	movs	r3, #0
 8006510:	9309      	str	r3, [sp, #36]	; 0x24
 8006512:	2320      	movs	r3, #32
 8006514:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006518:	f8cd 800c 	str.w	r8, [sp, #12]
 800651c:	2330      	movs	r3, #48	; 0x30
 800651e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80066c8 <_svfiprintf_r+0x1ec>
 8006522:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006526:	f04f 0901 	mov.w	r9, #1
 800652a:	4623      	mov	r3, r4
 800652c:	469a      	mov	sl, r3
 800652e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006532:	b10a      	cbz	r2, 8006538 <_svfiprintf_r+0x5c>
 8006534:	2a25      	cmp	r2, #37	; 0x25
 8006536:	d1f9      	bne.n	800652c <_svfiprintf_r+0x50>
 8006538:	ebba 0b04 	subs.w	fp, sl, r4
 800653c:	d00b      	beq.n	8006556 <_svfiprintf_r+0x7a>
 800653e:	465b      	mov	r3, fp
 8006540:	4622      	mov	r2, r4
 8006542:	4629      	mov	r1, r5
 8006544:	4638      	mov	r0, r7
 8006546:	f7ff ff6d 	bl	8006424 <__ssputs_r>
 800654a:	3001      	adds	r0, #1
 800654c:	f000 80aa 	beq.w	80066a4 <_svfiprintf_r+0x1c8>
 8006550:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006552:	445a      	add	r2, fp
 8006554:	9209      	str	r2, [sp, #36]	; 0x24
 8006556:	f89a 3000 	ldrb.w	r3, [sl]
 800655a:	2b00      	cmp	r3, #0
 800655c:	f000 80a2 	beq.w	80066a4 <_svfiprintf_r+0x1c8>
 8006560:	2300      	movs	r3, #0
 8006562:	f04f 32ff 	mov.w	r2, #4294967295
 8006566:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800656a:	f10a 0a01 	add.w	sl, sl, #1
 800656e:	9304      	str	r3, [sp, #16]
 8006570:	9307      	str	r3, [sp, #28]
 8006572:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006576:	931a      	str	r3, [sp, #104]	; 0x68
 8006578:	4654      	mov	r4, sl
 800657a:	2205      	movs	r2, #5
 800657c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006580:	4851      	ldr	r0, [pc, #324]	; (80066c8 <_svfiprintf_r+0x1ec>)
 8006582:	f7f9 fe25 	bl	80001d0 <memchr>
 8006586:	9a04      	ldr	r2, [sp, #16]
 8006588:	b9d8      	cbnz	r0, 80065c2 <_svfiprintf_r+0xe6>
 800658a:	06d0      	lsls	r0, r2, #27
 800658c:	bf44      	itt	mi
 800658e:	2320      	movmi	r3, #32
 8006590:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006594:	0711      	lsls	r1, r2, #28
 8006596:	bf44      	itt	mi
 8006598:	232b      	movmi	r3, #43	; 0x2b
 800659a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800659e:	f89a 3000 	ldrb.w	r3, [sl]
 80065a2:	2b2a      	cmp	r3, #42	; 0x2a
 80065a4:	d015      	beq.n	80065d2 <_svfiprintf_r+0xf6>
 80065a6:	9a07      	ldr	r2, [sp, #28]
 80065a8:	4654      	mov	r4, sl
 80065aa:	2000      	movs	r0, #0
 80065ac:	f04f 0c0a 	mov.w	ip, #10
 80065b0:	4621      	mov	r1, r4
 80065b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065b6:	3b30      	subs	r3, #48	; 0x30
 80065b8:	2b09      	cmp	r3, #9
 80065ba:	d94e      	bls.n	800665a <_svfiprintf_r+0x17e>
 80065bc:	b1b0      	cbz	r0, 80065ec <_svfiprintf_r+0x110>
 80065be:	9207      	str	r2, [sp, #28]
 80065c0:	e014      	b.n	80065ec <_svfiprintf_r+0x110>
 80065c2:	eba0 0308 	sub.w	r3, r0, r8
 80065c6:	fa09 f303 	lsl.w	r3, r9, r3
 80065ca:	4313      	orrs	r3, r2
 80065cc:	9304      	str	r3, [sp, #16]
 80065ce:	46a2      	mov	sl, r4
 80065d0:	e7d2      	b.n	8006578 <_svfiprintf_r+0x9c>
 80065d2:	9b03      	ldr	r3, [sp, #12]
 80065d4:	1d19      	adds	r1, r3, #4
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	9103      	str	r1, [sp, #12]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	bfbb      	ittet	lt
 80065de:	425b      	neglt	r3, r3
 80065e0:	f042 0202 	orrlt.w	r2, r2, #2
 80065e4:	9307      	strge	r3, [sp, #28]
 80065e6:	9307      	strlt	r3, [sp, #28]
 80065e8:	bfb8      	it	lt
 80065ea:	9204      	strlt	r2, [sp, #16]
 80065ec:	7823      	ldrb	r3, [r4, #0]
 80065ee:	2b2e      	cmp	r3, #46	; 0x2e
 80065f0:	d10c      	bne.n	800660c <_svfiprintf_r+0x130>
 80065f2:	7863      	ldrb	r3, [r4, #1]
 80065f4:	2b2a      	cmp	r3, #42	; 0x2a
 80065f6:	d135      	bne.n	8006664 <_svfiprintf_r+0x188>
 80065f8:	9b03      	ldr	r3, [sp, #12]
 80065fa:	1d1a      	adds	r2, r3, #4
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	9203      	str	r2, [sp, #12]
 8006600:	2b00      	cmp	r3, #0
 8006602:	bfb8      	it	lt
 8006604:	f04f 33ff 	movlt.w	r3, #4294967295
 8006608:	3402      	adds	r4, #2
 800660a:	9305      	str	r3, [sp, #20]
 800660c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80066d8 <_svfiprintf_r+0x1fc>
 8006610:	7821      	ldrb	r1, [r4, #0]
 8006612:	2203      	movs	r2, #3
 8006614:	4650      	mov	r0, sl
 8006616:	f7f9 fddb 	bl	80001d0 <memchr>
 800661a:	b140      	cbz	r0, 800662e <_svfiprintf_r+0x152>
 800661c:	2340      	movs	r3, #64	; 0x40
 800661e:	eba0 000a 	sub.w	r0, r0, sl
 8006622:	fa03 f000 	lsl.w	r0, r3, r0
 8006626:	9b04      	ldr	r3, [sp, #16]
 8006628:	4303      	orrs	r3, r0
 800662a:	3401      	adds	r4, #1
 800662c:	9304      	str	r3, [sp, #16]
 800662e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006632:	4826      	ldr	r0, [pc, #152]	; (80066cc <_svfiprintf_r+0x1f0>)
 8006634:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006638:	2206      	movs	r2, #6
 800663a:	f7f9 fdc9 	bl	80001d0 <memchr>
 800663e:	2800      	cmp	r0, #0
 8006640:	d038      	beq.n	80066b4 <_svfiprintf_r+0x1d8>
 8006642:	4b23      	ldr	r3, [pc, #140]	; (80066d0 <_svfiprintf_r+0x1f4>)
 8006644:	bb1b      	cbnz	r3, 800668e <_svfiprintf_r+0x1b2>
 8006646:	9b03      	ldr	r3, [sp, #12]
 8006648:	3307      	adds	r3, #7
 800664a:	f023 0307 	bic.w	r3, r3, #7
 800664e:	3308      	adds	r3, #8
 8006650:	9303      	str	r3, [sp, #12]
 8006652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006654:	4433      	add	r3, r6
 8006656:	9309      	str	r3, [sp, #36]	; 0x24
 8006658:	e767      	b.n	800652a <_svfiprintf_r+0x4e>
 800665a:	fb0c 3202 	mla	r2, ip, r2, r3
 800665e:	460c      	mov	r4, r1
 8006660:	2001      	movs	r0, #1
 8006662:	e7a5      	b.n	80065b0 <_svfiprintf_r+0xd4>
 8006664:	2300      	movs	r3, #0
 8006666:	3401      	adds	r4, #1
 8006668:	9305      	str	r3, [sp, #20]
 800666a:	4619      	mov	r1, r3
 800666c:	f04f 0c0a 	mov.w	ip, #10
 8006670:	4620      	mov	r0, r4
 8006672:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006676:	3a30      	subs	r2, #48	; 0x30
 8006678:	2a09      	cmp	r2, #9
 800667a:	d903      	bls.n	8006684 <_svfiprintf_r+0x1a8>
 800667c:	2b00      	cmp	r3, #0
 800667e:	d0c5      	beq.n	800660c <_svfiprintf_r+0x130>
 8006680:	9105      	str	r1, [sp, #20]
 8006682:	e7c3      	b.n	800660c <_svfiprintf_r+0x130>
 8006684:	fb0c 2101 	mla	r1, ip, r1, r2
 8006688:	4604      	mov	r4, r0
 800668a:	2301      	movs	r3, #1
 800668c:	e7f0      	b.n	8006670 <_svfiprintf_r+0x194>
 800668e:	ab03      	add	r3, sp, #12
 8006690:	9300      	str	r3, [sp, #0]
 8006692:	462a      	mov	r2, r5
 8006694:	4b0f      	ldr	r3, [pc, #60]	; (80066d4 <_svfiprintf_r+0x1f8>)
 8006696:	a904      	add	r1, sp, #16
 8006698:	4638      	mov	r0, r7
 800669a:	f3af 8000 	nop.w
 800669e:	1c42      	adds	r2, r0, #1
 80066a0:	4606      	mov	r6, r0
 80066a2:	d1d6      	bne.n	8006652 <_svfiprintf_r+0x176>
 80066a4:	89ab      	ldrh	r3, [r5, #12]
 80066a6:	065b      	lsls	r3, r3, #25
 80066a8:	f53f af2c 	bmi.w	8006504 <_svfiprintf_r+0x28>
 80066ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066ae:	b01d      	add	sp, #116	; 0x74
 80066b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066b4:	ab03      	add	r3, sp, #12
 80066b6:	9300      	str	r3, [sp, #0]
 80066b8:	462a      	mov	r2, r5
 80066ba:	4b06      	ldr	r3, [pc, #24]	; (80066d4 <_svfiprintf_r+0x1f8>)
 80066bc:	a904      	add	r1, sp, #16
 80066be:	4638      	mov	r0, r7
 80066c0:	f000 f87a 	bl	80067b8 <_printf_i>
 80066c4:	e7eb      	b.n	800669e <_svfiprintf_r+0x1c2>
 80066c6:	bf00      	nop
 80066c8:	08006cb8 	.word	0x08006cb8
 80066cc:	08006cc2 	.word	0x08006cc2
 80066d0:	00000000 	.word	0x00000000
 80066d4:	08006425 	.word	0x08006425
 80066d8:	08006cbe 	.word	0x08006cbe

080066dc <_printf_common>:
 80066dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066e0:	4616      	mov	r6, r2
 80066e2:	4699      	mov	r9, r3
 80066e4:	688a      	ldr	r2, [r1, #8]
 80066e6:	690b      	ldr	r3, [r1, #16]
 80066e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066ec:	4293      	cmp	r3, r2
 80066ee:	bfb8      	it	lt
 80066f0:	4613      	movlt	r3, r2
 80066f2:	6033      	str	r3, [r6, #0]
 80066f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066f8:	4607      	mov	r7, r0
 80066fa:	460c      	mov	r4, r1
 80066fc:	b10a      	cbz	r2, 8006702 <_printf_common+0x26>
 80066fe:	3301      	adds	r3, #1
 8006700:	6033      	str	r3, [r6, #0]
 8006702:	6823      	ldr	r3, [r4, #0]
 8006704:	0699      	lsls	r1, r3, #26
 8006706:	bf42      	ittt	mi
 8006708:	6833      	ldrmi	r3, [r6, #0]
 800670a:	3302      	addmi	r3, #2
 800670c:	6033      	strmi	r3, [r6, #0]
 800670e:	6825      	ldr	r5, [r4, #0]
 8006710:	f015 0506 	ands.w	r5, r5, #6
 8006714:	d106      	bne.n	8006724 <_printf_common+0x48>
 8006716:	f104 0a19 	add.w	sl, r4, #25
 800671a:	68e3      	ldr	r3, [r4, #12]
 800671c:	6832      	ldr	r2, [r6, #0]
 800671e:	1a9b      	subs	r3, r3, r2
 8006720:	42ab      	cmp	r3, r5
 8006722:	dc26      	bgt.n	8006772 <_printf_common+0x96>
 8006724:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006728:	1e13      	subs	r3, r2, #0
 800672a:	6822      	ldr	r2, [r4, #0]
 800672c:	bf18      	it	ne
 800672e:	2301      	movne	r3, #1
 8006730:	0692      	lsls	r2, r2, #26
 8006732:	d42b      	bmi.n	800678c <_printf_common+0xb0>
 8006734:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006738:	4649      	mov	r1, r9
 800673a:	4638      	mov	r0, r7
 800673c:	47c0      	blx	r8
 800673e:	3001      	adds	r0, #1
 8006740:	d01e      	beq.n	8006780 <_printf_common+0xa4>
 8006742:	6823      	ldr	r3, [r4, #0]
 8006744:	68e5      	ldr	r5, [r4, #12]
 8006746:	6832      	ldr	r2, [r6, #0]
 8006748:	f003 0306 	and.w	r3, r3, #6
 800674c:	2b04      	cmp	r3, #4
 800674e:	bf08      	it	eq
 8006750:	1aad      	subeq	r5, r5, r2
 8006752:	68a3      	ldr	r3, [r4, #8]
 8006754:	6922      	ldr	r2, [r4, #16]
 8006756:	bf0c      	ite	eq
 8006758:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800675c:	2500      	movne	r5, #0
 800675e:	4293      	cmp	r3, r2
 8006760:	bfc4      	itt	gt
 8006762:	1a9b      	subgt	r3, r3, r2
 8006764:	18ed      	addgt	r5, r5, r3
 8006766:	2600      	movs	r6, #0
 8006768:	341a      	adds	r4, #26
 800676a:	42b5      	cmp	r5, r6
 800676c:	d11a      	bne.n	80067a4 <_printf_common+0xc8>
 800676e:	2000      	movs	r0, #0
 8006770:	e008      	b.n	8006784 <_printf_common+0xa8>
 8006772:	2301      	movs	r3, #1
 8006774:	4652      	mov	r2, sl
 8006776:	4649      	mov	r1, r9
 8006778:	4638      	mov	r0, r7
 800677a:	47c0      	blx	r8
 800677c:	3001      	adds	r0, #1
 800677e:	d103      	bne.n	8006788 <_printf_common+0xac>
 8006780:	f04f 30ff 	mov.w	r0, #4294967295
 8006784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006788:	3501      	adds	r5, #1
 800678a:	e7c6      	b.n	800671a <_printf_common+0x3e>
 800678c:	18e1      	adds	r1, r4, r3
 800678e:	1c5a      	adds	r2, r3, #1
 8006790:	2030      	movs	r0, #48	; 0x30
 8006792:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006796:	4422      	add	r2, r4
 8006798:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800679c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067a0:	3302      	adds	r3, #2
 80067a2:	e7c7      	b.n	8006734 <_printf_common+0x58>
 80067a4:	2301      	movs	r3, #1
 80067a6:	4622      	mov	r2, r4
 80067a8:	4649      	mov	r1, r9
 80067aa:	4638      	mov	r0, r7
 80067ac:	47c0      	blx	r8
 80067ae:	3001      	adds	r0, #1
 80067b0:	d0e6      	beq.n	8006780 <_printf_common+0xa4>
 80067b2:	3601      	adds	r6, #1
 80067b4:	e7d9      	b.n	800676a <_printf_common+0x8e>
	...

080067b8 <_printf_i>:
 80067b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067bc:	460c      	mov	r4, r1
 80067be:	4691      	mov	r9, r2
 80067c0:	7e27      	ldrb	r7, [r4, #24]
 80067c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80067c4:	2f78      	cmp	r7, #120	; 0x78
 80067c6:	4680      	mov	r8, r0
 80067c8:	469a      	mov	sl, r3
 80067ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067ce:	d807      	bhi.n	80067e0 <_printf_i+0x28>
 80067d0:	2f62      	cmp	r7, #98	; 0x62
 80067d2:	d80a      	bhi.n	80067ea <_printf_i+0x32>
 80067d4:	2f00      	cmp	r7, #0
 80067d6:	f000 80d8 	beq.w	800698a <_printf_i+0x1d2>
 80067da:	2f58      	cmp	r7, #88	; 0x58
 80067dc:	f000 80a3 	beq.w	8006926 <_printf_i+0x16e>
 80067e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80067e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067e8:	e03a      	b.n	8006860 <_printf_i+0xa8>
 80067ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067ee:	2b15      	cmp	r3, #21
 80067f0:	d8f6      	bhi.n	80067e0 <_printf_i+0x28>
 80067f2:	a001      	add	r0, pc, #4	; (adr r0, 80067f8 <_printf_i+0x40>)
 80067f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80067f8:	08006851 	.word	0x08006851
 80067fc:	08006865 	.word	0x08006865
 8006800:	080067e1 	.word	0x080067e1
 8006804:	080067e1 	.word	0x080067e1
 8006808:	080067e1 	.word	0x080067e1
 800680c:	080067e1 	.word	0x080067e1
 8006810:	08006865 	.word	0x08006865
 8006814:	080067e1 	.word	0x080067e1
 8006818:	080067e1 	.word	0x080067e1
 800681c:	080067e1 	.word	0x080067e1
 8006820:	080067e1 	.word	0x080067e1
 8006824:	08006971 	.word	0x08006971
 8006828:	08006895 	.word	0x08006895
 800682c:	08006953 	.word	0x08006953
 8006830:	080067e1 	.word	0x080067e1
 8006834:	080067e1 	.word	0x080067e1
 8006838:	08006993 	.word	0x08006993
 800683c:	080067e1 	.word	0x080067e1
 8006840:	08006895 	.word	0x08006895
 8006844:	080067e1 	.word	0x080067e1
 8006848:	080067e1 	.word	0x080067e1
 800684c:	0800695b 	.word	0x0800695b
 8006850:	680b      	ldr	r3, [r1, #0]
 8006852:	1d1a      	adds	r2, r3, #4
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	600a      	str	r2, [r1, #0]
 8006858:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800685c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006860:	2301      	movs	r3, #1
 8006862:	e0a3      	b.n	80069ac <_printf_i+0x1f4>
 8006864:	6825      	ldr	r5, [r4, #0]
 8006866:	6808      	ldr	r0, [r1, #0]
 8006868:	062e      	lsls	r6, r5, #24
 800686a:	f100 0304 	add.w	r3, r0, #4
 800686e:	d50a      	bpl.n	8006886 <_printf_i+0xce>
 8006870:	6805      	ldr	r5, [r0, #0]
 8006872:	600b      	str	r3, [r1, #0]
 8006874:	2d00      	cmp	r5, #0
 8006876:	da03      	bge.n	8006880 <_printf_i+0xc8>
 8006878:	232d      	movs	r3, #45	; 0x2d
 800687a:	426d      	negs	r5, r5
 800687c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006880:	485e      	ldr	r0, [pc, #376]	; (80069fc <_printf_i+0x244>)
 8006882:	230a      	movs	r3, #10
 8006884:	e019      	b.n	80068ba <_printf_i+0x102>
 8006886:	f015 0f40 	tst.w	r5, #64	; 0x40
 800688a:	6805      	ldr	r5, [r0, #0]
 800688c:	600b      	str	r3, [r1, #0]
 800688e:	bf18      	it	ne
 8006890:	b22d      	sxthne	r5, r5
 8006892:	e7ef      	b.n	8006874 <_printf_i+0xbc>
 8006894:	680b      	ldr	r3, [r1, #0]
 8006896:	6825      	ldr	r5, [r4, #0]
 8006898:	1d18      	adds	r0, r3, #4
 800689a:	6008      	str	r0, [r1, #0]
 800689c:	0628      	lsls	r0, r5, #24
 800689e:	d501      	bpl.n	80068a4 <_printf_i+0xec>
 80068a0:	681d      	ldr	r5, [r3, #0]
 80068a2:	e002      	b.n	80068aa <_printf_i+0xf2>
 80068a4:	0669      	lsls	r1, r5, #25
 80068a6:	d5fb      	bpl.n	80068a0 <_printf_i+0xe8>
 80068a8:	881d      	ldrh	r5, [r3, #0]
 80068aa:	4854      	ldr	r0, [pc, #336]	; (80069fc <_printf_i+0x244>)
 80068ac:	2f6f      	cmp	r7, #111	; 0x6f
 80068ae:	bf0c      	ite	eq
 80068b0:	2308      	moveq	r3, #8
 80068b2:	230a      	movne	r3, #10
 80068b4:	2100      	movs	r1, #0
 80068b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068ba:	6866      	ldr	r6, [r4, #4]
 80068bc:	60a6      	str	r6, [r4, #8]
 80068be:	2e00      	cmp	r6, #0
 80068c0:	bfa2      	ittt	ge
 80068c2:	6821      	ldrge	r1, [r4, #0]
 80068c4:	f021 0104 	bicge.w	r1, r1, #4
 80068c8:	6021      	strge	r1, [r4, #0]
 80068ca:	b90d      	cbnz	r5, 80068d0 <_printf_i+0x118>
 80068cc:	2e00      	cmp	r6, #0
 80068ce:	d04d      	beq.n	800696c <_printf_i+0x1b4>
 80068d0:	4616      	mov	r6, r2
 80068d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80068d6:	fb03 5711 	mls	r7, r3, r1, r5
 80068da:	5dc7      	ldrb	r7, [r0, r7]
 80068dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80068e0:	462f      	mov	r7, r5
 80068e2:	42bb      	cmp	r3, r7
 80068e4:	460d      	mov	r5, r1
 80068e6:	d9f4      	bls.n	80068d2 <_printf_i+0x11a>
 80068e8:	2b08      	cmp	r3, #8
 80068ea:	d10b      	bne.n	8006904 <_printf_i+0x14c>
 80068ec:	6823      	ldr	r3, [r4, #0]
 80068ee:	07df      	lsls	r7, r3, #31
 80068f0:	d508      	bpl.n	8006904 <_printf_i+0x14c>
 80068f2:	6923      	ldr	r3, [r4, #16]
 80068f4:	6861      	ldr	r1, [r4, #4]
 80068f6:	4299      	cmp	r1, r3
 80068f8:	bfde      	ittt	le
 80068fa:	2330      	movle	r3, #48	; 0x30
 80068fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006900:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006904:	1b92      	subs	r2, r2, r6
 8006906:	6122      	str	r2, [r4, #16]
 8006908:	f8cd a000 	str.w	sl, [sp]
 800690c:	464b      	mov	r3, r9
 800690e:	aa03      	add	r2, sp, #12
 8006910:	4621      	mov	r1, r4
 8006912:	4640      	mov	r0, r8
 8006914:	f7ff fee2 	bl	80066dc <_printf_common>
 8006918:	3001      	adds	r0, #1
 800691a:	d14c      	bne.n	80069b6 <_printf_i+0x1fe>
 800691c:	f04f 30ff 	mov.w	r0, #4294967295
 8006920:	b004      	add	sp, #16
 8006922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006926:	4835      	ldr	r0, [pc, #212]	; (80069fc <_printf_i+0x244>)
 8006928:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800692c:	6823      	ldr	r3, [r4, #0]
 800692e:	680e      	ldr	r6, [r1, #0]
 8006930:	061f      	lsls	r7, r3, #24
 8006932:	f856 5b04 	ldr.w	r5, [r6], #4
 8006936:	600e      	str	r6, [r1, #0]
 8006938:	d514      	bpl.n	8006964 <_printf_i+0x1ac>
 800693a:	07d9      	lsls	r1, r3, #31
 800693c:	bf44      	itt	mi
 800693e:	f043 0320 	orrmi.w	r3, r3, #32
 8006942:	6023      	strmi	r3, [r4, #0]
 8006944:	b91d      	cbnz	r5, 800694e <_printf_i+0x196>
 8006946:	6823      	ldr	r3, [r4, #0]
 8006948:	f023 0320 	bic.w	r3, r3, #32
 800694c:	6023      	str	r3, [r4, #0]
 800694e:	2310      	movs	r3, #16
 8006950:	e7b0      	b.n	80068b4 <_printf_i+0xfc>
 8006952:	6823      	ldr	r3, [r4, #0]
 8006954:	f043 0320 	orr.w	r3, r3, #32
 8006958:	6023      	str	r3, [r4, #0]
 800695a:	2378      	movs	r3, #120	; 0x78
 800695c:	4828      	ldr	r0, [pc, #160]	; (8006a00 <_printf_i+0x248>)
 800695e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006962:	e7e3      	b.n	800692c <_printf_i+0x174>
 8006964:	065e      	lsls	r6, r3, #25
 8006966:	bf48      	it	mi
 8006968:	b2ad      	uxthmi	r5, r5
 800696a:	e7e6      	b.n	800693a <_printf_i+0x182>
 800696c:	4616      	mov	r6, r2
 800696e:	e7bb      	b.n	80068e8 <_printf_i+0x130>
 8006970:	680b      	ldr	r3, [r1, #0]
 8006972:	6826      	ldr	r6, [r4, #0]
 8006974:	6960      	ldr	r0, [r4, #20]
 8006976:	1d1d      	adds	r5, r3, #4
 8006978:	600d      	str	r5, [r1, #0]
 800697a:	0635      	lsls	r5, r6, #24
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	d501      	bpl.n	8006984 <_printf_i+0x1cc>
 8006980:	6018      	str	r0, [r3, #0]
 8006982:	e002      	b.n	800698a <_printf_i+0x1d2>
 8006984:	0671      	lsls	r1, r6, #25
 8006986:	d5fb      	bpl.n	8006980 <_printf_i+0x1c8>
 8006988:	8018      	strh	r0, [r3, #0]
 800698a:	2300      	movs	r3, #0
 800698c:	6123      	str	r3, [r4, #16]
 800698e:	4616      	mov	r6, r2
 8006990:	e7ba      	b.n	8006908 <_printf_i+0x150>
 8006992:	680b      	ldr	r3, [r1, #0]
 8006994:	1d1a      	adds	r2, r3, #4
 8006996:	600a      	str	r2, [r1, #0]
 8006998:	681e      	ldr	r6, [r3, #0]
 800699a:	6862      	ldr	r2, [r4, #4]
 800699c:	2100      	movs	r1, #0
 800699e:	4630      	mov	r0, r6
 80069a0:	f7f9 fc16 	bl	80001d0 <memchr>
 80069a4:	b108      	cbz	r0, 80069aa <_printf_i+0x1f2>
 80069a6:	1b80      	subs	r0, r0, r6
 80069a8:	6060      	str	r0, [r4, #4]
 80069aa:	6863      	ldr	r3, [r4, #4]
 80069ac:	6123      	str	r3, [r4, #16]
 80069ae:	2300      	movs	r3, #0
 80069b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069b4:	e7a8      	b.n	8006908 <_printf_i+0x150>
 80069b6:	6923      	ldr	r3, [r4, #16]
 80069b8:	4632      	mov	r2, r6
 80069ba:	4649      	mov	r1, r9
 80069bc:	4640      	mov	r0, r8
 80069be:	47d0      	blx	sl
 80069c0:	3001      	adds	r0, #1
 80069c2:	d0ab      	beq.n	800691c <_printf_i+0x164>
 80069c4:	6823      	ldr	r3, [r4, #0]
 80069c6:	079b      	lsls	r3, r3, #30
 80069c8:	d413      	bmi.n	80069f2 <_printf_i+0x23a>
 80069ca:	68e0      	ldr	r0, [r4, #12]
 80069cc:	9b03      	ldr	r3, [sp, #12]
 80069ce:	4298      	cmp	r0, r3
 80069d0:	bfb8      	it	lt
 80069d2:	4618      	movlt	r0, r3
 80069d4:	e7a4      	b.n	8006920 <_printf_i+0x168>
 80069d6:	2301      	movs	r3, #1
 80069d8:	4632      	mov	r2, r6
 80069da:	4649      	mov	r1, r9
 80069dc:	4640      	mov	r0, r8
 80069de:	47d0      	blx	sl
 80069e0:	3001      	adds	r0, #1
 80069e2:	d09b      	beq.n	800691c <_printf_i+0x164>
 80069e4:	3501      	adds	r5, #1
 80069e6:	68e3      	ldr	r3, [r4, #12]
 80069e8:	9903      	ldr	r1, [sp, #12]
 80069ea:	1a5b      	subs	r3, r3, r1
 80069ec:	42ab      	cmp	r3, r5
 80069ee:	dcf2      	bgt.n	80069d6 <_printf_i+0x21e>
 80069f0:	e7eb      	b.n	80069ca <_printf_i+0x212>
 80069f2:	2500      	movs	r5, #0
 80069f4:	f104 0619 	add.w	r6, r4, #25
 80069f8:	e7f5      	b.n	80069e6 <_printf_i+0x22e>
 80069fa:	bf00      	nop
 80069fc:	08006cc9 	.word	0x08006cc9
 8006a00:	08006cda 	.word	0x08006cda

08006a04 <memcpy>:
 8006a04:	440a      	add	r2, r1
 8006a06:	4291      	cmp	r1, r2
 8006a08:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a0c:	d100      	bne.n	8006a10 <memcpy+0xc>
 8006a0e:	4770      	bx	lr
 8006a10:	b510      	push	{r4, lr}
 8006a12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a1a:	4291      	cmp	r1, r2
 8006a1c:	d1f9      	bne.n	8006a12 <memcpy+0xe>
 8006a1e:	bd10      	pop	{r4, pc}

08006a20 <memmove>:
 8006a20:	4288      	cmp	r0, r1
 8006a22:	b510      	push	{r4, lr}
 8006a24:	eb01 0402 	add.w	r4, r1, r2
 8006a28:	d902      	bls.n	8006a30 <memmove+0x10>
 8006a2a:	4284      	cmp	r4, r0
 8006a2c:	4623      	mov	r3, r4
 8006a2e:	d807      	bhi.n	8006a40 <memmove+0x20>
 8006a30:	1e43      	subs	r3, r0, #1
 8006a32:	42a1      	cmp	r1, r4
 8006a34:	d008      	beq.n	8006a48 <memmove+0x28>
 8006a36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a3e:	e7f8      	b.n	8006a32 <memmove+0x12>
 8006a40:	4402      	add	r2, r0
 8006a42:	4601      	mov	r1, r0
 8006a44:	428a      	cmp	r2, r1
 8006a46:	d100      	bne.n	8006a4a <memmove+0x2a>
 8006a48:	bd10      	pop	{r4, pc}
 8006a4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a52:	e7f7      	b.n	8006a44 <memmove+0x24>

08006a54 <_free_r>:
 8006a54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a56:	2900      	cmp	r1, #0
 8006a58:	d048      	beq.n	8006aec <_free_r+0x98>
 8006a5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a5e:	9001      	str	r0, [sp, #4]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f1a1 0404 	sub.w	r4, r1, #4
 8006a66:	bfb8      	it	lt
 8006a68:	18e4      	addlt	r4, r4, r3
 8006a6a:	f000 f8d3 	bl	8006c14 <__malloc_lock>
 8006a6e:	4a20      	ldr	r2, [pc, #128]	; (8006af0 <_free_r+0x9c>)
 8006a70:	9801      	ldr	r0, [sp, #4]
 8006a72:	6813      	ldr	r3, [r2, #0]
 8006a74:	4615      	mov	r5, r2
 8006a76:	b933      	cbnz	r3, 8006a86 <_free_r+0x32>
 8006a78:	6063      	str	r3, [r4, #4]
 8006a7a:	6014      	str	r4, [r2, #0]
 8006a7c:	b003      	add	sp, #12
 8006a7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a82:	f000 b8cd 	b.w	8006c20 <__malloc_unlock>
 8006a86:	42a3      	cmp	r3, r4
 8006a88:	d90b      	bls.n	8006aa2 <_free_r+0x4e>
 8006a8a:	6821      	ldr	r1, [r4, #0]
 8006a8c:	1862      	adds	r2, r4, r1
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	bf04      	itt	eq
 8006a92:	681a      	ldreq	r2, [r3, #0]
 8006a94:	685b      	ldreq	r3, [r3, #4]
 8006a96:	6063      	str	r3, [r4, #4]
 8006a98:	bf04      	itt	eq
 8006a9a:	1852      	addeq	r2, r2, r1
 8006a9c:	6022      	streq	r2, [r4, #0]
 8006a9e:	602c      	str	r4, [r5, #0]
 8006aa0:	e7ec      	b.n	8006a7c <_free_r+0x28>
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	b10b      	cbz	r3, 8006aac <_free_r+0x58>
 8006aa8:	42a3      	cmp	r3, r4
 8006aaa:	d9fa      	bls.n	8006aa2 <_free_r+0x4e>
 8006aac:	6811      	ldr	r1, [r2, #0]
 8006aae:	1855      	adds	r5, r2, r1
 8006ab0:	42a5      	cmp	r5, r4
 8006ab2:	d10b      	bne.n	8006acc <_free_r+0x78>
 8006ab4:	6824      	ldr	r4, [r4, #0]
 8006ab6:	4421      	add	r1, r4
 8006ab8:	1854      	adds	r4, r2, r1
 8006aba:	42a3      	cmp	r3, r4
 8006abc:	6011      	str	r1, [r2, #0]
 8006abe:	d1dd      	bne.n	8006a7c <_free_r+0x28>
 8006ac0:	681c      	ldr	r4, [r3, #0]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	6053      	str	r3, [r2, #4]
 8006ac6:	4421      	add	r1, r4
 8006ac8:	6011      	str	r1, [r2, #0]
 8006aca:	e7d7      	b.n	8006a7c <_free_r+0x28>
 8006acc:	d902      	bls.n	8006ad4 <_free_r+0x80>
 8006ace:	230c      	movs	r3, #12
 8006ad0:	6003      	str	r3, [r0, #0]
 8006ad2:	e7d3      	b.n	8006a7c <_free_r+0x28>
 8006ad4:	6825      	ldr	r5, [r4, #0]
 8006ad6:	1961      	adds	r1, r4, r5
 8006ad8:	428b      	cmp	r3, r1
 8006ada:	bf04      	itt	eq
 8006adc:	6819      	ldreq	r1, [r3, #0]
 8006ade:	685b      	ldreq	r3, [r3, #4]
 8006ae0:	6063      	str	r3, [r4, #4]
 8006ae2:	bf04      	itt	eq
 8006ae4:	1949      	addeq	r1, r1, r5
 8006ae6:	6021      	streq	r1, [r4, #0]
 8006ae8:	6054      	str	r4, [r2, #4]
 8006aea:	e7c7      	b.n	8006a7c <_free_r+0x28>
 8006aec:	b003      	add	sp, #12
 8006aee:	bd30      	pop	{r4, r5, pc}
 8006af0:	2000009c 	.word	0x2000009c

08006af4 <_malloc_r>:
 8006af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006af6:	1ccd      	adds	r5, r1, #3
 8006af8:	f025 0503 	bic.w	r5, r5, #3
 8006afc:	3508      	adds	r5, #8
 8006afe:	2d0c      	cmp	r5, #12
 8006b00:	bf38      	it	cc
 8006b02:	250c      	movcc	r5, #12
 8006b04:	2d00      	cmp	r5, #0
 8006b06:	4606      	mov	r6, r0
 8006b08:	db01      	blt.n	8006b0e <_malloc_r+0x1a>
 8006b0a:	42a9      	cmp	r1, r5
 8006b0c:	d903      	bls.n	8006b16 <_malloc_r+0x22>
 8006b0e:	230c      	movs	r3, #12
 8006b10:	6033      	str	r3, [r6, #0]
 8006b12:	2000      	movs	r0, #0
 8006b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b16:	f000 f87d 	bl	8006c14 <__malloc_lock>
 8006b1a:	4921      	ldr	r1, [pc, #132]	; (8006ba0 <_malloc_r+0xac>)
 8006b1c:	680a      	ldr	r2, [r1, #0]
 8006b1e:	4614      	mov	r4, r2
 8006b20:	b99c      	cbnz	r4, 8006b4a <_malloc_r+0x56>
 8006b22:	4f20      	ldr	r7, [pc, #128]	; (8006ba4 <_malloc_r+0xb0>)
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	b923      	cbnz	r3, 8006b32 <_malloc_r+0x3e>
 8006b28:	4621      	mov	r1, r4
 8006b2a:	4630      	mov	r0, r6
 8006b2c:	f000 f862 	bl	8006bf4 <_sbrk_r>
 8006b30:	6038      	str	r0, [r7, #0]
 8006b32:	4629      	mov	r1, r5
 8006b34:	4630      	mov	r0, r6
 8006b36:	f000 f85d 	bl	8006bf4 <_sbrk_r>
 8006b3a:	1c43      	adds	r3, r0, #1
 8006b3c:	d123      	bne.n	8006b86 <_malloc_r+0x92>
 8006b3e:	230c      	movs	r3, #12
 8006b40:	6033      	str	r3, [r6, #0]
 8006b42:	4630      	mov	r0, r6
 8006b44:	f000 f86c 	bl	8006c20 <__malloc_unlock>
 8006b48:	e7e3      	b.n	8006b12 <_malloc_r+0x1e>
 8006b4a:	6823      	ldr	r3, [r4, #0]
 8006b4c:	1b5b      	subs	r3, r3, r5
 8006b4e:	d417      	bmi.n	8006b80 <_malloc_r+0x8c>
 8006b50:	2b0b      	cmp	r3, #11
 8006b52:	d903      	bls.n	8006b5c <_malloc_r+0x68>
 8006b54:	6023      	str	r3, [r4, #0]
 8006b56:	441c      	add	r4, r3
 8006b58:	6025      	str	r5, [r4, #0]
 8006b5a:	e004      	b.n	8006b66 <_malloc_r+0x72>
 8006b5c:	6863      	ldr	r3, [r4, #4]
 8006b5e:	42a2      	cmp	r2, r4
 8006b60:	bf0c      	ite	eq
 8006b62:	600b      	streq	r3, [r1, #0]
 8006b64:	6053      	strne	r3, [r2, #4]
 8006b66:	4630      	mov	r0, r6
 8006b68:	f000 f85a 	bl	8006c20 <__malloc_unlock>
 8006b6c:	f104 000b 	add.w	r0, r4, #11
 8006b70:	1d23      	adds	r3, r4, #4
 8006b72:	f020 0007 	bic.w	r0, r0, #7
 8006b76:	1ac2      	subs	r2, r0, r3
 8006b78:	d0cc      	beq.n	8006b14 <_malloc_r+0x20>
 8006b7a:	1a1b      	subs	r3, r3, r0
 8006b7c:	50a3      	str	r3, [r4, r2]
 8006b7e:	e7c9      	b.n	8006b14 <_malloc_r+0x20>
 8006b80:	4622      	mov	r2, r4
 8006b82:	6864      	ldr	r4, [r4, #4]
 8006b84:	e7cc      	b.n	8006b20 <_malloc_r+0x2c>
 8006b86:	1cc4      	adds	r4, r0, #3
 8006b88:	f024 0403 	bic.w	r4, r4, #3
 8006b8c:	42a0      	cmp	r0, r4
 8006b8e:	d0e3      	beq.n	8006b58 <_malloc_r+0x64>
 8006b90:	1a21      	subs	r1, r4, r0
 8006b92:	4630      	mov	r0, r6
 8006b94:	f000 f82e 	bl	8006bf4 <_sbrk_r>
 8006b98:	3001      	adds	r0, #1
 8006b9a:	d1dd      	bne.n	8006b58 <_malloc_r+0x64>
 8006b9c:	e7cf      	b.n	8006b3e <_malloc_r+0x4a>
 8006b9e:	bf00      	nop
 8006ba0:	2000009c 	.word	0x2000009c
 8006ba4:	200000a0 	.word	0x200000a0

08006ba8 <_realloc_r>:
 8006ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006baa:	4607      	mov	r7, r0
 8006bac:	4614      	mov	r4, r2
 8006bae:	460e      	mov	r6, r1
 8006bb0:	b921      	cbnz	r1, 8006bbc <_realloc_r+0x14>
 8006bb2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006bb6:	4611      	mov	r1, r2
 8006bb8:	f7ff bf9c 	b.w	8006af4 <_malloc_r>
 8006bbc:	b922      	cbnz	r2, 8006bc8 <_realloc_r+0x20>
 8006bbe:	f7ff ff49 	bl	8006a54 <_free_r>
 8006bc2:	4625      	mov	r5, r4
 8006bc4:	4628      	mov	r0, r5
 8006bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bc8:	f000 f830 	bl	8006c2c <_malloc_usable_size_r>
 8006bcc:	42a0      	cmp	r0, r4
 8006bce:	d20f      	bcs.n	8006bf0 <_realloc_r+0x48>
 8006bd0:	4621      	mov	r1, r4
 8006bd2:	4638      	mov	r0, r7
 8006bd4:	f7ff ff8e 	bl	8006af4 <_malloc_r>
 8006bd8:	4605      	mov	r5, r0
 8006bda:	2800      	cmp	r0, #0
 8006bdc:	d0f2      	beq.n	8006bc4 <_realloc_r+0x1c>
 8006bde:	4631      	mov	r1, r6
 8006be0:	4622      	mov	r2, r4
 8006be2:	f7ff ff0f 	bl	8006a04 <memcpy>
 8006be6:	4631      	mov	r1, r6
 8006be8:	4638      	mov	r0, r7
 8006bea:	f7ff ff33 	bl	8006a54 <_free_r>
 8006bee:	e7e9      	b.n	8006bc4 <_realloc_r+0x1c>
 8006bf0:	4635      	mov	r5, r6
 8006bf2:	e7e7      	b.n	8006bc4 <_realloc_r+0x1c>

08006bf4 <_sbrk_r>:
 8006bf4:	b538      	push	{r3, r4, r5, lr}
 8006bf6:	4d06      	ldr	r5, [pc, #24]	; (8006c10 <_sbrk_r+0x1c>)
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	4604      	mov	r4, r0
 8006bfc:	4608      	mov	r0, r1
 8006bfe:	602b      	str	r3, [r5, #0]
 8006c00:	f7fa fe64 	bl	80018cc <_sbrk>
 8006c04:	1c43      	adds	r3, r0, #1
 8006c06:	d102      	bne.n	8006c0e <_sbrk_r+0x1a>
 8006c08:	682b      	ldr	r3, [r5, #0]
 8006c0a:	b103      	cbz	r3, 8006c0e <_sbrk_r+0x1a>
 8006c0c:	6023      	str	r3, [r4, #0]
 8006c0e:	bd38      	pop	{r3, r4, r5, pc}
 8006c10:	20000274 	.word	0x20000274

08006c14 <__malloc_lock>:
 8006c14:	4801      	ldr	r0, [pc, #4]	; (8006c1c <__malloc_lock+0x8>)
 8006c16:	f000 b811 	b.w	8006c3c <__retarget_lock_acquire_recursive>
 8006c1a:	bf00      	nop
 8006c1c:	2000027c 	.word	0x2000027c

08006c20 <__malloc_unlock>:
 8006c20:	4801      	ldr	r0, [pc, #4]	; (8006c28 <__malloc_unlock+0x8>)
 8006c22:	f000 b80c 	b.w	8006c3e <__retarget_lock_release_recursive>
 8006c26:	bf00      	nop
 8006c28:	2000027c 	.word	0x2000027c

08006c2c <_malloc_usable_size_r>:
 8006c2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c30:	1f18      	subs	r0, r3, #4
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	bfbc      	itt	lt
 8006c36:	580b      	ldrlt	r3, [r1, r0]
 8006c38:	18c0      	addlt	r0, r0, r3
 8006c3a:	4770      	bx	lr

08006c3c <__retarget_lock_acquire_recursive>:
 8006c3c:	4770      	bx	lr

08006c3e <__retarget_lock_release_recursive>:
 8006c3e:	4770      	bx	lr

08006c40 <_init>:
 8006c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c42:	bf00      	nop
 8006c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c46:	bc08      	pop	{r3}
 8006c48:	469e      	mov	lr, r3
 8006c4a:	4770      	bx	lr

08006c4c <_fini>:
 8006c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4e:	bf00      	nop
 8006c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c52:	bc08      	pop	{r3}
 8006c54:	469e      	mov	lr, r3
 8006c56:	4770      	bx	lr
