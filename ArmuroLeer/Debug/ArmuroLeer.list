
ArmuroLeer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a84  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005c14  08005c14  00015c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c9c  08005c9c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005c9c  08005c9c  00015c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ca4  08005ca4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ca4  08005ca4  00015ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ca8  08005ca8  00015ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005cac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000070  08005d1c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  08005d1c  00020228  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000155f0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ba9  00000000  00000000  00035690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  00038240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  00039410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023846  00000000  00000000  0003a4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000148b6  00000000  00000000  0005dcee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc0d2  00000000  00000000  000725a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014e676  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dd8  00000000  00000000  0014e6cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005bfc 	.word	0x08005bfc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005bfc 	.word	0x08005bfc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800056e:	463b      	mov	r3, r7
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]
 800057c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800057e:	4b4d      	ldr	r3, [pc, #308]	; (80006b4 <MX_ADC1_Init+0x14c>)
 8000580:	4a4d      	ldr	r2, [pc, #308]	; (80006b8 <MX_ADC1_Init+0x150>)
 8000582:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000584:	4b4b      	ldr	r3, [pc, #300]	; (80006b4 <MX_ADC1_Init+0x14c>)
 8000586:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800058a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800058c:	4b49      	ldr	r3, [pc, #292]	; (80006b4 <MX_ADC1_Init+0x14c>)
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000592:	4b48      	ldr	r3, [pc, #288]	; (80006b4 <MX_ADC1_Init+0x14c>)
 8000594:	2200      	movs	r2, #0
 8000596:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000598:	4b46      	ldr	r3, [pc, #280]	; (80006b4 <MX_ADC1_Init+0x14c>)
 800059a:	2201      	movs	r2, #1
 800059c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800059e:	4b45      	ldr	r3, [pc, #276]	; (80006b4 <MX_ADC1_Init+0x14c>)
 80005a0:	2208      	movs	r2, #8
 80005a2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005a4:	4b43      	ldr	r3, [pc, #268]	; (80006b4 <MX_ADC1_Init+0x14c>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005aa:	4b42      	ldr	r3, [pc, #264]	; (80006b4 <MX_ADC1_Init+0x14c>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 6;
 80005b0:	4b40      	ldr	r3, [pc, #256]	; (80006b4 <MX_ADC1_Init+0x14c>)
 80005b2:	2206      	movs	r2, #6
 80005b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005b6:	4b3f      	ldr	r3, [pc, #252]	; (80006b4 <MX_ADC1_Init+0x14c>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005be:	4b3d      	ldr	r3, [pc, #244]	; (80006b4 <MX_ADC1_Init+0x14c>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005c4:	4b3b      	ldr	r3, [pc, #236]	; (80006b4 <MX_ADC1_Init+0x14c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005ca:	4b3a      	ldr	r3, [pc, #232]	; (80006b4 <MX_ADC1_Init+0x14c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005d2:	4b38      	ldr	r3, [pc, #224]	; (80006b4 <MX_ADC1_Init+0x14c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005d8:	4b36      	ldr	r3, [pc, #216]	; (80006b4 <MX_ADC1_Init+0x14c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005e0:	4834      	ldr	r0, [pc, #208]	; (80006b4 <MX_ADC1_Init+0x14c>)
 80005e2:	f000 ff23 	bl	800142c <HAL_ADC_Init>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80005ec:	f000 fa4e 	bl	8000a8c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80005f0:	4b32      	ldr	r3, [pc, #200]	; (80006bc <MX_ADC1_Init+0x154>)
 80005f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005f4:	2306      	movs	r3, #6
 80005f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005fc:	237f      	movs	r3, #127	; 0x7f
 80005fe:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000600:	2304      	movs	r3, #4
 8000602:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000608:	463b      	mov	r3, r7
 800060a:	4619      	mov	r1, r3
 800060c:	4829      	ldr	r0, [pc, #164]	; (80006b4 <MX_ADC1_Init+0x14c>)
 800060e:	f001 f8c5 	bl	800179c <HAL_ADC_ConfigChannel>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000618:	f000 fa38 	bl	8000a8c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800061c:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <MX_ADC1_Init+0x158>)
 800061e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000620:	230c      	movs	r3, #12
 8000622:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000624:	463b      	mov	r3, r7
 8000626:	4619      	mov	r1, r3
 8000628:	4822      	ldr	r0, [pc, #136]	; (80006b4 <MX_ADC1_Init+0x14c>)
 800062a:	f001 f8b7 	bl	800179c <HAL_ADC_ConfigChannel>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8000634:	f000 fa2a 	bl	8000a8c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000638:	4b22      	ldr	r3, [pc, #136]	; (80006c4 <MX_ADC1_Init+0x15c>)
 800063a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800063c:	2312      	movs	r3, #18
 800063e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000640:	463b      	mov	r3, r7
 8000642:	4619      	mov	r1, r3
 8000644:	481b      	ldr	r0, [pc, #108]	; (80006b4 <MX_ADC1_Init+0x14c>)
 8000646:	f001 f8a9 	bl	800179c <HAL_ADC_ConfigChannel>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8000650:	f000 fa1c 	bl	8000a8c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000654:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <MX_ADC1_Init+0x160>)
 8000656:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000658:	2318      	movs	r3, #24
 800065a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800065c:	463b      	mov	r3, r7
 800065e:	4619      	mov	r1, r3
 8000660:	4814      	ldr	r0, [pc, #80]	; (80006b4 <MX_ADC1_Init+0x14c>)
 8000662:	f001 f89b 	bl	800179c <HAL_ADC_ConfigChannel>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 800066c:	f000 fa0e 	bl	8000a8c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000670:	4b16      	ldr	r3, [pc, #88]	; (80006cc <MX_ADC1_Init+0x164>)
 8000672:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000674:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000678:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800067a:	463b      	mov	r3, r7
 800067c:	4619      	mov	r1, r3
 800067e:	480d      	ldr	r0, [pc, #52]	; (80006b4 <MX_ADC1_Init+0x14c>)
 8000680:	f001 f88c 	bl	800179c <HAL_ADC_ConfigChannel>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 800068a:	f000 f9ff 	bl	8000a8c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800068e:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <MX_ADC1_Init+0x168>)
 8000690:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000692:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000696:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000698:	463b      	mov	r3, r7
 800069a:	4619      	mov	r1, r3
 800069c:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_ADC1_Init+0x14c>)
 800069e:	f001 f87d 	bl	800179c <HAL_ADC_ConfigChannel>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_ADC1_Init+0x144>
  {
    Error_Handler();
 80006a8:	f000 f9f0 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ac:	bf00      	nop
 80006ae:	3718      	adds	r7, #24
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000098 	.word	0x20000098
 80006b8:	50040000 	.word	0x50040000
 80006bc:	14f00020 	.word	0x14f00020
 80006c0:	19200040 	.word	0x19200040
 80006c4:	21800100 	.word	0x21800100
 80006c8:	25b00200 	.word	0x25b00200
 80006cc:	2a000400 	.word	0x2a000400
 80006d0:	32601000 	.word	0x32601000

080006d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08a      	sub	sp, #40	; 0x28
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006dc:	f107 0314 	add.w	r3, r7, #20
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a2b      	ldr	r2, [pc, #172]	; (80007a0 <HAL_ADC_MspInit+0xcc>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d14f      	bne.n	8000796 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80006f6:	4b2b      	ldr	r3, [pc, #172]	; (80007a4 <HAL_ADC_MspInit+0xd0>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	4a2a      	ldr	r2, [pc, #168]	; (80007a4 <HAL_ADC_MspInit+0xd0>)
 80006fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000702:	4b28      	ldr	r3, [pc, #160]	; (80007a4 <HAL_ADC_MspInit+0xd0>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	4b25      	ldr	r3, [pc, #148]	; (80007a4 <HAL_ADC_MspInit+0xd0>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	4a24      	ldr	r2, [pc, #144]	; (80007a4 <HAL_ADC_MspInit+0xd0>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071a:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <HAL_ADC_MspInit+0xd0>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = lineSensor_middle_Pin|encoder_left_Pin|lineSensor_right_Pin|battery_Pin
 8000726:	23bb      	movs	r3, #187	; 0xbb
 8000728:	617b      	str	r3, [r7, #20]
                          |encoder_right_Pin|lineSensor_left_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800072a:	230b      	movs	r3, #11
 800072c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	4619      	mov	r1, r3
 8000738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800073c:	f001 feea 	bl	8002514 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000740:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <HAL_ADC_MspInit+0xd4>)
 8000742:	4a1a      	ldr	r2, [pc, #104]	; (80007ac <HAL_ADC_MspInit+0xd8>)
 8000744:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000746:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <HAL_ADC_MspInit+0xd4>)
 8000748:	2200      	movs	r2, #0
 800074a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800074c:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <HAL_ADC_MspInit+0xd4>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <HAL_ADC_MspInit+0xd4>)
 8000754:	2200      	movs	r2, #0
 8000756:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000758:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <HAL_ADC_MspInit+0xd4>)
 800075a:	2280      	movs	r2, #128	; 0x80
 800075c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800075e:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <HAL_ADC_MspInit+0xd4>)
 8000760:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000764:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <HAL_ADC_MspInit+0xd4>)
 8000768:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800076c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <HAL_ADC_MspInit+0xd4>)
 8000770:	2220      	movs	r2, #32
 8000772:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <HAL_ADC_MspInit+0xd4>)
 8000776:	2200      	movs	r2, #0
 8000778:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800077a:	480b      	ldr	r0, [pc, #44]	; (80007a8 <HAL_ADC_MspInit+0xd4>)
 800077c:	f001 fd62 	bl	8002244 <HAL_DMA_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8000786:	f000 f981 	bl	8000a8c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4a06      	ldr	r2, [pc, #24]	; (80007a8 <HAL_ADC_MspInit+0xd4>)
 800078e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000790:	4a05      	ldr	r2, [pc, #20]	; (80007a8 <HAL_ADC_MspInit+0xd4>)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000796:	bf00      	nop
 8000798:	3728      	adds	r7, #40	; 0x28
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	50040000 	.word	0x50040000
 80007a4:	40021000 	.word	0x40021000
 80007a8:	200000fc 	.word	0x200000fc
 80007ac:	40020008 	.word	0x40020008

080007b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_DMA_Init+0x38>)
 80007b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007ba:	4a0b      	ldr	r2, [pc, #44]	; (80007e8 <MX_DMA_Init+0x38>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6493      	str	r3, [r2, #72]	; 0x48
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_DMA_Init+0x38>)
 80007c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2100      	movs	r1, #0
 80007d2:	200b      	movs	r0, #11
 80007d4:	f001 fcff 	bl	80021d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007d8:	200b      	movs	r0, #11
 80007da:	f001 fd18 	bl	800220e <HAL_NVIC_EnableIRQ>

}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40021000 	.word	0x40021000

080007ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b088      	sub	sp, #32
 80007f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	4b30      	ldr	r3, [pc, #192]	; (80008c4 <MX_GPIO_Init+0xd8>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	4a2f      	ldr	r2, [pc, #188]	; (80008c4 <MX_GPIO_Init+0xd8>)
 8000808:	f043 0304 	orr.w	r3, r3, #4
 800080c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080e:	4b2d      	ldr	r3, [pc, #180]	; (80008c4 <MX_GPIO_Init+0xd8>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	f003 0304 	and.w	r3, r3, #4
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	4b2a      	ldr	r3, [pc, #168]	; (80008c4 <MX_GPIO_Init+0xd8>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	4a29      	ldr	r2, [pc, #164]	; (80008c4 <MX_GPIO_Init+0xd8>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000826:	4b27      	ldr	r3, [pc, #156]	; (80008c4 <MX_GPIO_Init+0xd8>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	4b24      	ldr	r3, [pc, #144]	; (80008c4 <MX_GPIO_Init+0xd8>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	4a23      	ldr	r2, [pc, #140]	; (80008c4 <MX_GPIO_Init+0xd8>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083e:	4b21      	ldr	r3, [pc, #132]	; (80008c4 <MX_GPIO_Init+0xd8>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(phase2_L_GPIO_Port, phase2_L_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000850:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000854:	f001 ffc8 	bl	80027e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LED_right_Pin|LED_left_Pin|phase2_R_Pin, GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	21b8      	movs	r1, #184	; 0xb8
 800085c:	481a      	ldr	r0, [pc, #104]	; (80008c8 <MX_GPIO_Init+0xdc>)
 800085e:	f001 ffc3 	bl	80027e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = switch_right_Pin|switch_middle_Pin|switch_left_Pin;
 8000862:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8000866:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000868:	2300      	movs	r3, #0
 800086a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000870:	f107 030c 	add.w	r3, r7, #12
 8000874:	4619      	mov	r1, r3
 8000876:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800087a:	f001 fe4b 	bl	8002514 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = phase2_L_Pin;
 800087e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000882:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000884:	2301      	movs	r3, #1
 8000886:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	2300      	movs	r3, #0
 800088e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(phase2_L_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 030c 	add.w	r3, r7, #12
 8000894:	4619      	mov	r1, r3
 8000896:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089a:	f001 fe3b 	bl	8002514 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LED_right_Pin|LED_left_Pin|phase2_R_Pin;
 800089e:	23b8      	movs	r3, #184	; 0xb8
 80008a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	4619      	mov	r1, r3
 80008b4:	4804      	ldr	r0, [pc, #16]	; (80008c8 <MX_GPIO_Init+0xdc>)
 80008b6:	f001 fe2d 	bl	8002514 <HAL_GPIO_Init>

}
 80008ba:	bf00      	nop
 80008bc:	3720      	adds	r7, #32
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40021000 	.word	0x40021000
 80008c8:	48000400 	.word	0x48000400

080008cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b09e      	sub	sp, #120	; 0x78
 80008d0:	af00      	add	r7, sp, #0
int main(void)
 80008d2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80008d6:	66bb      	str	r3, [r7, #104]	; 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d8:	f000 fb5b 	bl	8000f92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008dc:	f000 f842 	bl	8000964 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e0:	f7ff ff84 	bl	80007ec <MX_GPIO_Init>
  MX_DMA_Init();
 80008e4:	f7ff ff64 	bl	80007b0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80008e8:	f000 faa6 	bl	8000e38 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80008ec:	f7ff fe3c 	bl	8000568 <MX_ADC1_Init>
  MX_TIM1_Init();
 80008f0:	f000 f992 	bl	8000c18 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80008f4:	2104      	movs	r1, #4
 80008f6:	4815      	ldr	r0, [pc, #84]	; (800094c <main+0x80>)
 80008f8:	f003 ff28 	bl	800474c <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80008fc:	2108      	movs	r1, #8
 80008fe:	4813      	ldr	r0, [pc, #76]	; (800094c <main+0x80>)
 8000900:	f003 ff24 	bl	800474c <HAL_TIMEx_PWMN_Start>
  TIM1->CCR2 = 0;
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <main+0x84>)
 8000906:	2200      	movs	r2, #0
 8000908:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 30000;
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <main+0x84>)
 800090c:	f247 5230 	movw	r2, #30000	; 0x7530
 8000910:	63da      	str	r2, [r3, #60]	; 0x3c
  while (1)
  {	  char string_buf[100];
  int len;


	HAL_ADC_Start(&hadc1);
 8000912:	4810      	ldr	r0, [pc, #64]	; (8000954 <main+0x88>)
 8000914:	f000 fed2 	bl	80016bc <HAL_ADC_Start>
	  int left = HAL_ADC_GetValue(&hadc1);
 8000918:	480e      	ldr	r0, [pc, #56]	; (8000954 <main+0x88>)
 800091a:	f000 ff32 	bl	8001782 <HAL_ADC_GetValue>
 800091e:	4603      	mov	r3, r0
 8000920:	677b      	str	r3, [r7, #116]	; 0x74


	  int variable = left;
 8000922:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000924:	673b      	str	r3, [r7, #112]	; 0x70
	  len  =  sprintf((char*)string_buf, "left: %d\n", variable);
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800092a:	490b      	ldr	r1, [pc, #44]	; (8000958 <main+0x8c>)
 800092c:	4618      	mov	r0, r3
 800092e:	f004 fd37 	bl	80053a0 <siprintf>
 8000932:	66f8      	str	r0, [r7, #108]	; 0x6c
	  HAL_UART_Transmit(&huart2,(uint8_t*) string_buf, len, 1000000);
 8000934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000936:	b29a      	uxth	r2, r3
 8000938:	1d39      	adds	r1, r7, #4
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <main+0x90>)
 800093c:	4808      	ldr	r0, [pc, #32]	; (8000960 <main+0x94>)
 800093e:	f004 f8f4 	bl	8004b2a <HAL_UART_Transmit>

	  HAL_Delay (2000);
 8000942:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000946:	f000 fb99 	bl	800107c <HAL_Delay>
  {	  char string_buf[100];
 800094a:	e7e2      	b.n	8000912 <main+0x46>
 800094c:	20000144 	.word	0x20000144
 8000950:	40012c00 	.word	0x40012c00
 8000954:	20000098 	.word	0x20000098
 8000958:	08005c14 	.word	0x08005c14
 800095c:	000f4240 	.word	0x000f4240
 8000960:	20000190 	.word	0x20000190

08000964 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b0ac      	sub	sp, #176	; 0xb0
 8000968:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800096e:	2244      	movs	r2, #68	; 0x44
 8000970:	2100      	movs	r1, #0
 8000972:	4618      	mov	r0, r3
 8000974:	f004 fd0c 	bl	8005390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000978:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	2254      	movs	r2, #84	; 0x54
 800098c:	2100      	movs	r1, #0
 800098e:	4618      	mov	r0, r3
 8000990:	f004 fcfe 	bl	8005390 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000994:	f001 ff40 	bl	8002818 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000998:	4b3b      	ldr	r3, [pc, #236]	; (8000a88 <SystemClock_Config+0x124>)
 800099a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800099e:	4a3a      	ldr	r2, [pc, #232]	; (8000a88 <SystemClock_Config+0x124>)
 80009a0:	f023 0318 	bic.w	r3, r3, #24
 80009a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80009a8:	2314      	movs	r3, #20
 80009aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80009ac:	2301      	movs	r3, #1
 80009ae:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009b0:	2301      	movs	r3, #1
 80009b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009bc:	2360      	movs	r3, #96	; 0x60
 80009be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c2:	2302      	movs	r3, #2
 80009c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80009c8:	2301      	movs	r3, #1
 80009ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009ce:	2301      	movs	r3, #1
 80009d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 80009d4:	2310      	movs	r3, #16
 80009d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009da:	2307      	movs	r3, #7
 80009dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009e0:	2302      	movs	r3, #2
 80009e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009e6:	2302      	movs	r3, #2
 80009e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009f0:	4618      	mov	r0, r3
 80009f2:	f001 ff85 	bl	8002900 <HAL_RCC_OscConfig>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80009fc:	f000 f846 	bl	8000a8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a00:	230f      	movs	r3, #15
 8000a02:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a04:	2303      	movs	r3, #3
 8000a06:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a14:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a18:	2101      	movs	r1, #1
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f002 fb90 	bl	8003140 <HAL_RCC_ClockConfig>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a26:	f000 f831 	bl	8000a8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8000a2a:	f244 0302 	movw	r3, #16386	; 0x4002
 8000a2e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000a34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a38:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000a42:	2310      	movs	r3, #16
 8000a44:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000a46:	2307      	movs	r3, #7
 8000a48:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000a52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a56:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f002 fd76 	bl	800354c <HAL_RCCEx_PeriphCLKConfig>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <SystemClock_Config+0x106>
  {
    Error_Handler();
 8000a66:	f000 f811 	bl	8000a8c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a6a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a6e:	f001 fef1 	bl	8002854 <HAL_PWREx_ControlVoltageScaling>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <SystemClock_Config+0x118>
  {
    Error_Handler();
 8000a78:	f000 f808 	bl	8000a8c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000a7c:	f002 ff5a 	bl	8003934 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000a80:	bf00      	nop
 8000a82:	37b0      	adds	r7, #176	; 0xb0
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40021000 	.word	0x40021000

08000a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a90:	b672      	cpsid	i
}
 8000a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <Error_Handler+0x8>
	...

08000a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <HAL_MspInit+0x44>)
 8000aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aa2:	4a0e      	ldr	r2, [pc, #56]	; (8000adc <HAL_MspInit+0x44>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6613      	str	r3, [r2, #96]	; 0x60
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <HAL_MspInit+0x44>)
 8000aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <HAL_MspInit+0x44>)
 8000ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aba:	4a08      	ldr	r2, [pc, #32]	; (8000adc <HAL_MspInit+0x44>)
 8000abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_MspInit+0x44>)
 8000ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	40021000 	.word	0x40021000

08000ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <NMI_Handler+0x4>

08000ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <HardFault_Handler+0x4>

08000aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <MemManage_Handler+0x4>

08000af2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <BusFault_Handler+0x4>

08000af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <UsageFault_Handler+0x4>

08000afe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b2c:	f000 fa86 	bl	800103c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b38:	4802      	ldr	r0, [pc, #8]	; (8000b44 <DMA1_Channel1_IRQHandler+0x10>)
 8000b3a:	f001 fc3b 	bl	80023b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200000fc 	.word	0x200000fc

08000b48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b50:	4a14      	ldr	r2, [pc, #80]	; (8000ba4 <_sbrk+0x5c>)
 8000b52:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <_sbrk+0x60>)
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b5c:	4b13      	ldr	r3, [pc, #76]	; (8000bac <_sbrk+0x64>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d102      	bne.n	8000b6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <_sbrk+0x64>)
 8000b66:	4a12      	ldr	r2, [pc, #72]	; (8000bb0 <_sbrk+0x68>)
 8000b68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <_sbrk+0x64>)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4413      	add	r3, r2
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d207      	bcs.n	8000b88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b78:	f004 fbe0 	bl	800533c <__errno>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	220c      	movs	r2, #12
 8000b80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b82:	f04f 33ff 	mov.w	r3, #4294967295
 8000b86:	e009      	b.n	8000b9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <_sbrk+0x64>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b8e:	4b07      	ldr	r3, [pc, #28]	; (8000bac <_sbrk+0x64>)
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4413      	add	r3, r2
 8000b96:	4a05      	ldr	r2, [pc, #20]	; (8000bac <_sbrk+0x64>)
 8000b98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3718      	adds	r7, #24
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20010000 	.word	0x20010000
 8000ba8:	00000400 	.word	0x00000400
 8000bac:	2000008c 	.word	0x2000008c
 8000bb0:	20000228 	.word	0x20000228

08000bb4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bb8:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <SystemInit+0x5c>)
 8000bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bbe:	4a14      	ldr	r2, [pc, #80]	; (8000c10 <SystemInit+0x5c>)
 8000bc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <SystemInit+0x60>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a11      	ldr	r2, [pc, #68]	; (8000c14 <SystemInit+0x60>)
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <SystemInit+0x60>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <SystemInit+0x60>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a0d      	ldr	r2, [pc, #52]	; (8000c14 <SystemInit+0x60>)
 8000be0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000be4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000be8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000bea:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <SystemInit+0x60>)
 8000bec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bf0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000bf2:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <SystemInit+0x60>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a07      	ldr	r2, [pc, #28]	; (8000c14 <SystemInit+0x60>)
 8000bf8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bfc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000bfe:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <SystemInit+0x60>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000ed00 	.word	0xe000ed00
 8000c14:	40021000 	.word	0x40021000

08000c18 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b09a      	sub	sp, #104	; 0x68
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c1e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c2c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
 8000c48:	615a      	str	r2, [r3, #20]
 8000c4a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	222c      	movs	r2, #44	; 0x2c
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f004 fb9c 	bl	8005390 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c58:	4b49      	ldr	r3, [pc, #292]	; (8000d80 <MX_TIM1_Init+0x168>)
 8000c5a:	4a4a      	ldr	r2, [pc, #296]	; (8000d84 <MX_TIM1_Init+0x16c>)
 8000c5c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c5e:	4b48      	ldr	r3, [pc, #288]	; (8000d80 <MX_TIM1_Init+0x168>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c64:	4b46      	ldr	r3, [pc, #280]	; (8000d80 <MX_TIM1_Init+0x168>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c6a:	4b45      	ldr	r3, [pc, #276]	; (8000d80 <MX_TIM1_Init+0x168>)
 8000c6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c70:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c72:	4b43      	ldr	r3, [pc, #268]	; (8000d80 <MX_TIM1_Init+0x168>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c78:	4b41      	ldr	r3, [pc, #260]	; (8000d80 <MX_TIM1_Init+0x168>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c7e:	4b40      	ldr	r3, [pc, #256]	; (8000d80 <MX_TIM1_Init+0x168>)
 8000c80:	2280      	movs	r2, #128	; 0x80
 8000c82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c84:	483e      	ldr	r0, [pc, #248]	; (8000d80 <MX_TIM1_Init+0x168>)
 8000c86:	f002 ff57 	bl	8003b38 <HAL_TIM_Base_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000c90:	f7ff fefc 	bl	8000a8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c98:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4837      	ldr	r0, [pc, #220]	; (8000d80 <MX_TIM1_Init+0x168>)
 8000ca2:	f003 f911 	bl	8003ec8 <HAL_TIM_ConfigClockSource>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000cac:	f7ff feee 	bl	8000a8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000cb0:	4833      	ldr	r0, [pc, #204]	; (8000d80 <MX_TIM1_Init+0x168>)
 8000cb2:	f002 ff98 	bl	8003be6 <HAL_TIM_PWM_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000cbc:	f7ff fee6 	bl	8000a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ccc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	482b      	ldr	r0, [pc, #172]	; (8000d80 <MX_TIM1_Init+0x168>)
 8000cd4:	f003 fdd8 	bl	8004888 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000cde:	f7ff fed5 	bl	8000a8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ce2:	2360      	movs	r3, #96	; 0x60
 8000ce4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cea:	2300      	movs	r3, #0
 8000cec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cfe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d02:	2204      	movs	r2, #4
 8000d04:	4619      	mov	r1, r3
 8000d06:	481e      	ldr	r0, [pc, #120]	; (8000d80 <MX_TIM1_Init+0x168>)
 8000d08:	f002 ffce 	bl	8003ca8 <HAL_TIM_PWM_ConfigChannel>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000d12:	f7ff febb 	bl	8000a8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d1a:	2208      	movs	r2, #8
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4818      	ldr	r0, [pc, #96]	; (8000d80 <MX_TIM1_Init+0x168>)
 8000d20:	f002 ffc2 	bl	8003ca8 <HAL_TIM_PWM_ConfigChannel>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000d2a:	f7ff feaf 	bl	8000a8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d32:	2300      	movs	r3, #0
 8000d34:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d46:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	4619      	mov	r1, r3
 8000d62:	4807      	ldr	r0, [pc, #28]	; (8000d80 <MX_TIM1_Init+0x168>)
 8000d64:	f003 fdf6 	bl	8004954 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000d6e:	f7ff fe8d 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d72:	4803      	ldr	r0, [pc, #12]	; (8000d80 <MX_TIM1_Init+0x168>)
 8000d74:	f000 f828 	bl	8000dc8 <HAL_TIM_MspPostInit>

}
 8000d78:	bf00      	nop
 8000d7a:	3768      	adds	r7, #104	; 0x68
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000144 	.word	0x20000144
 8000d84:	40012c00 	.word	0x40012c00

08000d88 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <HAL_TIM_Base_MspInit+0x38>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d10b      	bne.n	8000db2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <HAL_TIM_Base_MspInit+0x3c>)
 8000d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d9e:	4a09      	ldr	r2, [pc, #36]	; (8000dc4 <HAL_TIM_Base_MspInit+0x3c>)
 8000da0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000da4:	6613      	str	r3, [r2, #96]	; 0x60
 8000da6:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <HAL_TIM_Base_MspInit+0x3c>)
 8000da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000daa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000db2:	bf00      	nop
 8000db4:	3714      	adds	r7, #20
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	40012c00 	.word	0x40012c00
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b088      	sub	sp, #32
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 030c 	add.w	r3, r7, #12
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a11      	ldr	r2, [pc, #68]	; (8000e2c <HAL_TIM_MspPostInit+0x64>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d11b      	bne.n	8000e22 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dea:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <HAL_TIM_MspPostInit+0x68>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	4a10      	ldr	r2, [pc, #64]	; (8000e30 <HAL_TIM_MspPostInit+0x68>)
 8000df0:	f043 0302 	orr.w	r3, r3, #2
 8000df4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <HAL_TIM_MspPostInit+0x68>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB0     ------> TIM1_CH2N
    PB1     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = Phase1_L_CH2N_Pin|Phase1_R_CH3N_Pin;
 8000e02:	2303      	movs	r3, #3
 8000e04:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e12:	2301      	movs	r3, #1
 8000e14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e16:	f107 030c 	add.w	r3, r7, #12
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4805      	ldr	r0, [pc, #20]	; (8000e34 <HAL_TIM_MspPostInit+0x6c>)
 8000e1e:	f001 fb79 	bl	8002514 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e22:	bf00      	nop
 8000e24:	3720      	adds	r7, #32
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40012c00 	.word	0x40012c00
 8000e30:	40021000 	.word	0x40021000
 8000e34:	48000400 	.word	0x48000400

08000e38 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e3c:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <MX_USART2_UART_Init+0x58>)
 8000e3e:	4a15      	ldr	r2, [pc, #84]	; (8000e94 <MX_USART2_UART_Init+0x5c>)
 8000e40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e42:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <MX_USART2_UART_Init+0x58>)
 8000e44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e4a:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <MX_USART2_UART_Init+0x58>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e50:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <MX_USART2_UART_Init+0x58>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e56:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <MX_USART2_UART_Init+0x58>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <MX_USART2_UART_Init+0x58>)
 8000e5e:	220c      	movs	r2, #12
 8000e60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e62:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <MX_USART2_UART_Init+0x58>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e68:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <MX_USART2_UART_Init+0x58>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e6e:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <MX_USART2_UART_Init+0x58>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <MX_USART2_UART_Init+0x58>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e7a:	4805      	ldr	r0, [pc, #20]	; (8000e90 <MX_USART2_UART_Init+0x58>)
 8000e7c:	f003 fe07 	bl	8004a8e <HAL_UART_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e86:	f7ff fe01 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000190 	.word	0x20000190
 8000e94:	40004400 	.word	0x40004400

08000e98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	; 0x28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a20      	ldr	r2, [pc, #128]	; (8000f38 <HAL_UART_MspInit+0xa0>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d13a      	bne.n	8000f30 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eba:	4b20      	ldr	r3, [pc, #128]	; (8000f3c <HAL_UART_MspInit+0xa4>)
 8000ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ebe:	4a1f      	ldr	r2, [pc, #124]	; (8000f3c <HAL_UART_MspInit+0xa4>)
 8000ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ec6:	4b1d      	ldr	r3, [pc, #116]	; (8000f3c <HAL_UART_MspInit+0xa4>)
 8000ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <HAL_UART_MspInit+0xa4>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed6:	4a19      	ldr	r2, [pc, #100]	; (8000f3c <HAL_UART_MspInit+0xa4>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ede:	4b17      	ldr	r3, [pc, #92]	; (8000f3c <HAL_UART_MspInit+0xa4>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000eea:	2304      	movs	r3, #4
 8000eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000efa:	2307      	movs	r3, #7
 8000efc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	4619      	mov	r1, r3
 8000f04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f08:	f001 fb04 	bl	8002514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000f0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	4619      	mov	r1, r3
 8000f28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2c:	f001 faf2 	bl	8002514 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f30:	bf00      	nop
 8000f32:	3728      	adds	r7, #40	; 0x28
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40004400 	.word	0x40004400
 8000f3c:	40021000 	.word	0x40021000

08000f40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f78 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f44:	f7ff fe36 	bl	8000bb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f48:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f4a:	e003      	b.n	8000f54 <LoopCopyDataInit>

08000f4c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f4c:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f4e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f50:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f52:	3104      	adds	r1, #4

08000f54 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f54:	480a      	ldr	r0, [pc, #40]	; (8000f80 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f56:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f58:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f5a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f5c:	d3f6      	bcc.n	8000f4c <CopyDataInit>
	ldr	r2, =_sbss
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f60:	e002      	b.n	8000f68 <LoopFillZerobss>

08000f62 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f62:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f64:	f842 3b04 	str.w	r3, [r2], #4

08000f68 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f68:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <LoopForever+0x16>)
	cmp	r2, r3
 8000f6a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f6c:	d3f9      	bcc.n	8000f62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f6e:	f004 f9eb 	bl	8005348 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f72:	f7ff fcab 	bl	80008cc <main>

08000f76 <LoopForever>:

LoopForever:
    b LoopForever
 8000f76:	e7fe      	b.n	8000f76 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f78:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000f7c:	08005cac 	.word	0x08005cac
	ldr	r0, =_sdata
 8000f80:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f84:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000f88:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000f8c:	20000228 	.word	0x20000228

08000f90 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f90:	e7fe      	b.n	8000f90 <ADC1_IRQHandler>

08000f92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f9c:	2003      	movs	r0, #3
 8000f9e:	f001 f90f 	bl	80021c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f000 f80e 	bl	8000fc4 <HAL_InitTick>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d002      	beq.n	8000fb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	71fb      	strb	r3, [r7, #7]
 8000fb2:	e001      	b.n	8000fb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fb4:	f7ff fd70 	bl	8000a98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fd0:	4b17      	ldr	r3, [pc, #92]	; (8001030 <HAL_InitTick+0x6c>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d023      	beq.n	8001020 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fd8:	4b16      	ldr	r3, [pc, #88]	; (8001034 <HAL_InitTick+0x70>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b14      	ldr	r3, [pc, #80]	; (8001030 <HAL_InitTick+0x6c>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f001 f91b 	bl	800222a <HAL_SYSTICK_Config>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d10f      	bne.n	800101a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b0f      	cmp	r3, #15
 8000ffe:	d809      	bhi.n	8001014 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001000:	2200      	movs	r2, #0
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	f04f 30ff 	mov.w	r0, #4294967295
 8001008:	f001 f8e5 	bl	80021d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800100c:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <HAL_InitTick+0x74>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	e007      	b.n	8001024 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	73fb      	strb	r3, [r7, #15]
 8001018:	e004      	b.n	8001024 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	73fb      	strb	r3, [r7, #15]
 800101e:	e001      	b.n	8001024 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001024:	7bfb      	ldrb	r3, [r7, #15]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000008 	.word	0x20000008
 8001034:	20000000 	.word	0x20000000
 8001038:	20000004 	.word	0x20000004

0800103c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_IncTick+0x20>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_IncTick+0x24>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4413      	add	r3, r2
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <HAL_IncTick+0x24>)
 800104e:	6013      	str	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000008 	.word	0x20000008
 8001060:	20000214 	.word	0x20000214

08001064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b03      	ldr	r3, [pc, #12]	; (8001078 <HAL_GetTick+0x14>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	20000214 	.word	0x20000214

0800107c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001084:	f7ff ffee 	bl	8001064 <HAL_GetTick>
 8001088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001094:	d005      	beq.n	80010a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <HAL_Delay+0x44>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	461a      	mov	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4413      	add	r3, r2
 80010a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010a2:	bf00      	nop
 80010a4:	f7ff ffde 	bl	8001064 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d8f7      	bhi.n	80010a4 <HAL_Delay+0x28>
  {
  }
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000008 	.word	0x20000008

080010c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	431a      	orrs	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	609a      	str	r2, [r3, #8]
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b083      	sub	sp, #12
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	431a      	orrs	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	609a      	str	r2, [r3, #8]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800112c:	b480      	push	{r7}
 800112e:	b087      	sub	sp, #28
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	3360      	adds	r3, #96	; 0x60
 800113e:	461a      	mov	r2, r3
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <LL_ADC_SetOffset+0x44>)
 800114e:	4013      	ands	r3, r2
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	430a      	orrs	r2, r1
 800115a:	4313      	orrs	r3, r2
 800115c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001164:	bf00      	nop
 8001166:	371c      	adds	r7, #28
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	03fff000 	.word	0x03fff000

08001174 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3360      	adds	r3, #96	; 0x60
 8001182:	461a      	mov	r2, r3
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	4413      	add	r3, r2
 800118a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001194:	4618      	mov	r0, r3
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b087      	sub	sp, #28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	3360      	adds	r3, #96	; 0x60
 80011b0:	461a      	mov	r2, r3
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	4413      	add	r3, r2
 80011b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	431a      	orrs	r2, r3
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80011ca:	bf00      	nop
 80011cc:	371c      	adds	r7, #28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b087      	sub	sp, #28
 80011da:	af00      	add	r7, sp, #0
 80011dc:	60f8      	str	r0, [r7, #12]
 80011de:	60b9      	str	r1, [r7, #8]
 80011e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	3330      	adds	r3, #48	; 0x30
 80011e6:	461a      	mov	r2, r3
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	0a1b      	lsrs	r3, r3, #8
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	f003 030c 	and.w	r3, r3, #12
 80011f2:	4413      	add	r3, r2
 80011f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	f003 031f 	and.w	r3, r3, #31
 8001200:	211f      	movs	r1, #31
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	401a      	ands	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	0e9b      	lsrs	r3, r3, #26
 800120e:	f003 011f 	and.w	r1, r3, #31
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	f003 031f 	and.w	r3, r3, #31
 8001218:	fa01 f303 	lsl.w	r3, r1, r3
 800121c:	431a      	orrs	r2, r3
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001222:	bf00      	nop
 8001224:	371c      	adds	r7, #28
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800122e:	b480      	push	{r7}
 8001230:	b087      	sub	sp, #28
 8001232:	af00      	add	r7, sp, #0
 8001234:	60f8      	str	r0, [r7, #12]
 8001236:	60b9      	str	r1, [r7, #8]
 8001238:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	3314      	adds	r3, #20
 800123e:	461a      	mov	r2, r3
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	0e5b      	lsrs	r3, r3, #25
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	f003 0304 	and.w	r3, r3, #4
 800124a:	4413      	add	r3, r2
 800124c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	0d1b      	lsrs	r3, r3, #20
 8001256:	f003 031f 	and.w	r3, r3, #31
 800125a:	2107      	movs	r1, #7
 800125c:	fa01 f303 	lsl.w	r3, r1, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	401a      	ands	r2, r3
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	0d1b      	lsrs	r3, r3, #20
 8001268:	f003 031f 	and.w	r3, r3, #31
 800126c:	6879      	ldr	r1, [r7, #4]
 800126e:	fa01 f303 	lsl.w	r3, r1, r3
 8001272:	431a      	orrs	r2, r3
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001278:	bf00      	nop
 800127a:	371c      	adds	r7, #28
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800129c:	43db      	mvns	r3, r3
 800129e:	401a      	ands	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f003 0318 	and.w	r3, r3, #24
 80012a6:	4908      	ldr	r1, [pc, #32]	; (80012c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80012a8:	40d9      	lsrs	r1, r3
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	400b      	ands	r3, r1
 80012ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012b2:	431a      	orrs	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80012ba:	bf00      	nop
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	0007ffff 	.word	0x0007ffff

080012cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80012dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	6093      	str	r3, [r2, #8]
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001300:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001304:	d101      	bne.n	800130a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001306:	2301      	movs	r3, #1
 8001308:	e000      	b.n	800130c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001328:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800132c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001350:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001354:	d101      	bne.n	800135a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001356:	2301      	movs	r3, #1
 8001358:	e000      	b.n	800135c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800135a:	2300      	movs	r3, #0
}
 800135c:	4618      	mov	r0, r3
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001378:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800137c:	f043 0201 	orr.w	r2, r3, #1
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d101      	bne.n	80013a8 <LL_ADC_IsEnabled+0x18>
 80013a4:	2301      	movs	r3, #1
 80013a6:	e000      	b.n	80013aa <LL_ADC_IsEnabled+0x1a>
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b083      	sub	sp, #12
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013c6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013ca:	f043 0204 	orr.w	r2, r3, #4
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f003 0304 	and.w	r3, r3, #4
 80013ee:	2b04      	cmp	r3, #4
 80013f0:	d101      	bne.n	80013f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80013f2:	2301      	movs	r3, #1
 80013f4:	e000      	b.n	80013f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f003 0308 	and.w	r3, r3, #8
 8001414:	2b08      	cmp	r3, #8
 8001416:	d101      	bne.n	800141c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001418:	2301      	movs	r3, #1
 800141a:	e000      	b.n	800141e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001434:	2300      	movs	r3, #0
 8001436:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001438:	2300      	movs	r3, #0
 800143a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e12c      	b.n	80016a0 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001450:	2b00      	cmp	r3, #0
 8001452:	d109      	bne.n	8001468 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff f93d 	bl	80006d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff3f 	bl	80012f0 <LL_ADC_IsDeepPowerDownEnabled>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d004      	beq.n	8001482 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff25 	bl	80012cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff ff5a 	bl	8001340 <LL_ADC_IsInternalRegulatorEnabled>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d115      	bne.n	80014be <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff ff3e 	bl	8001318 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800149c:	4b82      	ldr	r3, [pc, #520]	; (80016a8 <HAL_ADC_Init+0x27c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	099b      	lsrs	r3, r3, #6
 80014a2:	4a82      	ldr	r2, [pc, #520]	; (80016ac <HAL_ADC_Init+0x280>)
 80014a4:	fba2 2303 	umull	r2, r3, r2, r3
 80014a8:	099b      	lsrs	r3, r3, #6
 80014aa:	3301      	adds	r3, #1
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80014b0:	e002      	b.n	80014b8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	3b01      	subs	r3, #1
 80014b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f9      	bne.n	80014b2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff ff3c 	bl	8001340 <LL_ADC_IsInternalRegulatorEnabled>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d10d      	bne.n	80014ea <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014d2:	f043 0210 	orr.w	r2, r3, #16
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014de:	f043 0201 	orr.w	r2, r3, #1
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff ff75 	bl	80013de <LL_ADC_REG_IsConversionOngoing>
 80014f4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014fa:	f003 0310 	and.w	r3, r3, #16
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f040 80c5 	bne.w	800168e <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	2b00      	cmp	r3, #0
 8001508:	f040 80c1 	bne.w	800168e <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001510:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001514:	f043 0202 	orr.w	r2, r3, #2
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff ff35 	bl	8001390 <LL_ADC_IsEnabled>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d10b      	bne.n	8001544 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800152c:	4860      	ldr	r0, [pc, #384]	; (80016b0 <HAL_ADC_Init+0x284>)
 800152e:	f7ff ff2f 	bl	8001390 <LL_ADC_IsEnabled>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d105      	bne.n	8001544 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	4619      	mov	r1, r3
 800153e:	485d      	ldr	r0, [pc, #372]	; (80016b4 <HAL_ADC_Init+0x288>)
 8001540:	f7ff fdc0 	bl	80010c4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	7e5b      	ldrb	r3, [r3, #25]
 8001548:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800154e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001554:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800155a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001562:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001564:	4313      	orrs	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d106      	bne.n	8001580 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001576:	3b01      	subs	r3, #1
 8001578:	045b      	lsls	r3, r3, #17
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4313      	orrs	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001584:	2b00      	cmp	r3, #0
 8001586:	d009      	beq.n	800159c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001594:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4313      	orrs	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	68da      	ldr	r2, [r3, #12]
 80015a2:	4b45      	ldr	r3, [pc, #276]	; (80016b8 <HAL_ADC_Init+0x28c>)
 80015a4:	4013      	ands	r3, r2
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	6812      	ldr	r2, [r2, #0]
 80015aa:	69b9      	ldr	r1, [r7, #24]
 80015ac:	430b      	orrs	r3, r1
 80015ae:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff12 	bl	80013de <LL_ADC_REG_IsConversionOngoing>
 80015ba:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff1f 	bl	8001404 <LL_ADC_INJ_IsConversionOngoing>
 80015c6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d13d      	bne.n	800164a <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d13a      	bne.n	800164a <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80015d8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015e0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015f0:	f023 0302 	bic.w	r3, r3, #2
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	6812      	ldr	r2, [r2, #0]
 80015f8:	69b9      	ldr	r1, [r7, #24]
 80015fa:	430b      	orrs	r3, r1
 80015fc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001604:	2b01      	cmp	r3, #1
 8001606:	d118      	bne.n	800163a <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001612:	f023 0304 	bic.w	r3, r3, #4
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800161e:	4311      	orrs	r1, r2
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001624:	4311      	orrs	r1, r2
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800162a:	430a      	orrs	r2, r1
 800162c:	431a      	orrs	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f042 0201 	orr.w	r2, r2, #1
 8001636:	611a      	str	r2, [r3, #16]
 8001638:	e007      	b.n	800164a <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	691a      	ldr	r2, [r3, #16]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 0201 	bic.w	r2, r2, #1
 8001648:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d10c      	bne.n	800166c <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001658:	f023 010f 	bic.w	r1, r3, #15
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	69db      	ldr	r3, [r3, #28]
 8001660:	1e5a      	subs	r2, r3, #1
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	631a      	str	r2, [r3, #48]	; 0x30
 800166a:	e007      	b.n	800167c <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 020f 	bic.w	r2, r2, #15
 800167a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001680:	f023 0303 	bic.w	r3, r3, #3
 8001684:	f043 0201 	orr.w	r2, r3, #1
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	655a      	str	r2, [r3, #84]	; 0x54
 800168c:	e007      	b.n	800169e <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001692:	f043 0210 	orr.w	r2, r3, #16
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800169e:	7ffb      	ldrb	r3, [r7, #31]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3720      	adds	r7, #32
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000000 	.word	0x20000000
 80016ac:	053e2d63 	.word	0x053e2d63
 80016b0:	50040000 	.word	0x50040000
 80016b4:	50040300 	.word	0x50040300
 80016b8:	fff0c007 	.word	0xfff0c007

080016bc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fe88 	bl	80013de <LL_ADC_REG_IsConversionOngoing>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d14f      	bne.n	8001774 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d101      	bne.n	80016e2 <HAL_ADC_Start+0x26>
 80016de:	2302      	movs	r3, #2
 80016e0:	e04b      	b.n	800177a <HAL_ADC_Start+0xbe>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2201      	movs	r2, #1
 80016e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 fc36 	bl	8001f5c <ADC_Enable>
 80016f0:	4603      	mov	r3, r0
 80016f2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d137      	bne.n	800176a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016fe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001702:	f023 0301 	bic.w	r3, r3, #1
 8001706:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001712:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800171a:	d106      	bne.n	800172a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001720:	f023 0206 	bic.w	r2, r3, #6
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	659a      	str	r2, [r3, #88]	; 0x58
 8001728:	e002      	b.n	8001730 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	221c      	movs	r2, #28
 8001736:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d007      	beq.n	800175e <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001752:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001756:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff fe27 	bl	80013b6 <LL_ADC_REG_StartConversion>
 8001768:	e006      	b.n	8001778 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001772:	e001      	b.n	8001778 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001774:	2302      	movs	r3, #2
 8001776:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001778:	7bfb      	ldrb	r3, [r7, #15]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001790:	4618      	mov	r0, r3
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b0b6      	sub	sp, #216	; 0xd8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017a6:	2300      	movs	r3, #0
 80017a8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d101      	bne.n	80017be <HAL_ADC_ConfigChannel+0x22>
 80017ba:	2302      	movs	r3, #2
 80017bc:	e3b9      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x796>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff fe07 	bl	80013de <LL_ADC_REG_IsConversionOngoing>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f040 839e 	bne.w	8001f14 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b05      	cmp	r3, #5
 80017de:	d824      	bhi.n	800182a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	3b02      	subs	r3, #2
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	d81b      	bhi.n	8001822 <HAL_ADC_ConfigChannel+0x86>
 80017ea:	a201      	add	r2, pc, #4	; (adr r2, 80017f0 <HAL_ADC_ConfigChannel+0x54>)
 80017ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f0:	08001801 	.word	0x08001801
 80017f4:	08001809 	.word	0x08001809
 80017f8:	08001811 	.word	0x08001811
 80017fc:	08001819 	.word	0x08001819
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	220c      	movs	r2, #12
 8001804:	605a      	str	r2, [r3, #4]
          break;
 8001806:	e011      	b.n	800182c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	2212      	movs	r2, #18
 800180c:	605a      	str	r2, [r3, #4]
          break;
 800180e:	e00d      	b.n	800182c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	2218      	movs	r2, #24
 8001814:	605a      	str	r2, [r3, #4]
          break;
 8001816:	e009      	b.n	800182c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800181e:	605a      	str	r2, [r3, #4]
          break;
 8001820:	e004      	b.n	800182c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	2206      	movs	r2, #6
 8001826:	605a      	str	r2, [r3, #4]
          break;
 8001828:	e000      	b.n	800182c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800182a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6818      	ldr	r0, [r3, #0]
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	6859      	ldr	r1, [r3, #4]
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	461a      	mov	r2, r3
 800183a:	f7ff fccc 	bl	80011d6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fdcb 	bl	80013de <LL_ADC_REG_IsConversionOngoing>
 8001848:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fdd7 	bl	8001404 <LL_ADC_INJ_IsConversionOngoing>
 8001856:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800185a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800185e:	2b00      	cmp	r3, #0
 8001860:	f040 81a6 	bne.w	8001bb0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001864:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001868:	2b00      	cmp	r3, #0
 800186a:	f040 81a1 	bne.w	8001bb0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6818      	ldr	r0, [r3, #0]
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	6819      	ldr	r1, [r3, #0]
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	461a      	mov	r2, r3
 800187c:	f7ff fcd7 	bl	800122e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	695a      	ldr	r2, [r3, #20]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	08db      	lsrs	r3, r3, #3
 800188c:	f003 0303 	and.w	r3, r3, #3
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	2b04      	cmp	r3, #4
 80018a0:	d00a      	beq.n	80018b8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6818      	ldr	r0, [r3, #0]
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	6919      	ldr	r1, [r3, #16]
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80018b2:	f7ff fc3b 	bl	800112c <LL_ADC_SetOffset>
 80018b6:	e17b      	b.n	8001bb0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2100      	movs	r1, #0
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff fc58 	bl	8001174 <LL_ADC_GetOffsetChannel>
 80018c4:	4603      	mov	r3, r0
 80018c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d10a      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0x148>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2100      	movs	r1, #0
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fc4d 	bl	8001174 <LL_ADC_GetOffsetChannel>
 80018da:	4603      	mov	r3, r0
 80018dc:	0e9b      	lsrs	r3, r3, #26
 80018de:	f003 021f 	and.w	r2, r3, #31
 80018e2:	e01e      	b.n	8001922 <HAL_ADC_ConfigChannel+0x186>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2100      	movs	r1, #0
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff fc42 	bl	8001174 <LL_ADC_GetOffsetChannel>
 80018f0:	4603      	mov	r3, r0
 80018f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80018fa:	fa93 f3a3 	rbit	r3, r3
 80018fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001902:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001906:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800190a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001912:	2320      	movs	r3, #32
 8001914:	e004      	b.n	8001920 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001916:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800191a:	fab3 f383 	clz	r3, r3
 800191e:	b2db      	uxtb	r3, r3
 8001920:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800192a:	2b00      	cmp	r3, #0
 800192c:	d105      	bne.n	800193a <HAL_ADC_ConfigChannel+0x19e>
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	0e9b      	lsrs	r3, r3, #26
 8001934:	f003 031f 	and.w	r3, r3, #31
 8001938:	e018      	b.n	800196c <HAL_ADC_ConfigChannel+0x1d0>
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001942:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001946:	fa93 f3a3 	rbit	r3, r3
 800194a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800194e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001952:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001956:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800195e:	2320      	movs	r3, #32
 8001960:	e004      	b.n	800196c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001962:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001966:	fab3 f383 	clz	r3, r3
 800196a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800196c:	429a      	cmp	r2, r3
 800196e:	d106      	bne.n	800197e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2200      	movs	r2, #0
 8001976:	2100      	movs	r1, #0
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff fc11 	bl	80011a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2101      	movs	r1, #1
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff fbf5 	bl	8001174 <LL_ADC_GetOffsetChannel>
 800198a:	4603      	mov	r3, r0
 800198c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001990:	2b00      	cmp	r3, #0
 8001992:	d10a      	bne.n	80019aa <HAL_ADC_ConfigChannel+0x20e>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2101      	movs	r1, #1
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fbea 	bl	8001174 <LL_ADC_GetOffsetChannel>
 80019a0:	4603      	mov	r3, r0
 80019a2:	0e9b      	lsrs	r3, r3, #26
 80019a4:	f003 021f 	and.w	r2, r3, #31
 80019a8:	e01e      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x24c>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2101      	movs	r1, #1
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff fbdf 	bl	8001174 <LL_ADC_GetOffsetChannel>
 80019b6:	4603      	mov	r3, r0
 80019b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019c0:	fa93 f3a3 	rbit	r3, r3
 80019c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80019c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80019cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80019d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80019d8:	2320      	movs	r3, #32
 80019da:	e004      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80019dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019e0:	fab3 f383 	clz	r3, r3
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d105      	bne.n	8001a00 <HAL_ADC_ConfigChannel+0x264>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	0e9b      	lsrs	r3, r3, #26
 80019fa:	f003 031f 	and.w	r3, r3, #31
 80019fe:	e018      	b.n	8001a32 <HAL_ADC_ConfigChannel+0x296>
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a0c:	fa93 f3a3 	rbit	r3, r3
 8001a10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001a14:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001a1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d101      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001a24:	2320      	movs	r3, #32
 8001a26:	e004      	b.n	8001a32 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001a28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a2c:	fab3 f383 	clz	r3, r3
 8001a30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d106      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff fbae 	bl	80011a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2102      	movs	r1, #2
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fb92 	bl	8001174 <LL_ADC_GetOffsetChannel>
 8001a50:	4603      	mov	r3, r0
 8001a52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d10a      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x2d4>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2102      	movs	r1, #2
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff fb87 	bl	8001174 <LL_ADC_GetOffsetChannel>
 8001a66:	4603      	mov	r3, r0
 8001a68:	0e9b      	lsrs	r3, r3, #26
 8001a6a:	f003 021f 	and.w	r2, r3, #31
 8001a6e:	e01e      	b.n	8001aae <HAL_ADC_ConfigChannel+0x312>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2102      	movs	r1, #2
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fb7c 	bl	8001174 <LL_ADC_GetOffsetChannel>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a86:	fa93 f3a3 	rbit	r3, r3
 8001a8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001a8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001a96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001a9e:	2320      	movs	r3, #32
 8001aa0:	e004      	b.n	8001aac <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001aa2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001aa6:	fab3 f383 	clz	r3, r3
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d105      	bne.n	8001ac6 <HAL_ADC_ConfigChannel+0x32a>
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	0e9b      	lsrs	r3, r3, #26
 8001ac0:	f003 031f 	and.w	r3, r3, #31
 8001ac4:	e016      	b.n	8001af4 <HAL_ADC_ConfigChannel+0x358>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ace:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ad2:	fa93 f3a3 	rbit	r3, r3
 8001ad6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001ad8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ada:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001ade:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001ae6:	2320      	movs	r3, #32
 8001ae8:	e004      	b.n	8001af4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001aea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001aee:	fab3 f383 	clz	r3, r3
 8001af2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d106      	bne.n	8001b06 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2200      	movs	r2, #0
 8001afe:	2102      	movs	r1, #2
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff fb4d 	bl	80011a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2103      	movs	r1, #3
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff fb31 	bl	8001174 <LL_ADC_GetOffsetChannel>
 8001b12:	4603      	mov	r3, r0
 8001b14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d10a      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x396>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2103      	movs	r1, #3
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff fb26 	bl	8001174 <LL_ADC_GetOffsetChannel>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	0e9b      	lsrs	r3, r3, #26
 8001b2c:	f003 021f 	and.w	r2, r3, #31
 8001b30:	e017      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x3c6>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2103      	movs	r1, #3
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fb1b 	bl	8001174 <LL_ADC_GetOffsetChannel>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b44:	fa93 f3a3 	rbit	r3, r3
 8001b48:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001b4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b4c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001b4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001b54:	2320      	movs	r3, #32
 8001b56:	e003      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001b58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b5a:	fab3 f383 	clz	r3, r3
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d105      	bne.n	8001b7a <HAL_ADC_ConfigChannel+0x3de>
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	0e9b      	lsrs	r3, r3, #26
 8001b74:	f003 031f 	and.w	r3, r3, #31
 8001b78:	e011      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x402>
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b82:	fa93 f3a3 	rbit	r3, r3
 8001b86:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001b88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b8a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001b8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001b92:	2320      	movs	r3, #32
 8001b94:	e003      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b98:	fab3 f383 	clz	r3, r3
 8001b9c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d106      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2103      	movs	r1, #3
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff faf8 	bl	80011a0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fbeb 	bl	8001390 <LL_ADC_IsEnabled>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f040 813f 	bne.w	8001e40 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6818      	ldr	r0, [r3, #0]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	6819      	ldr	r1, [r3, #0]
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	f7ff fb58 	bl	8001284 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	4a8e      	ldr	r2, [pc, #568]	; (8001e14 <HAL_ADC_ConfigChannel+0x678>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	f040 8130 	bne.w	8001e40 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d10b      	bne.n	8001c08 <HAL_ADC_ConfigChannel+0x46c>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	0e9b      	lsrs	r3, r3, #26
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	f003 031f 	and.w	r3, r3, #31
 8001bfc:	2b09      	cmp	r3, #9
 8001bfe:	bf94      	ite	ls
 8001c00:	2301      	movls	r3, #1
 8001c02:	2300      	movhi	r3, #0
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	e019      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x4a0>
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c10:	fa93 f3a3 	rbit	r3, r3
 8001c14:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001c16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c18:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001c1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001c20:	2320      	movs	r3, #32
 8001c22:	e003      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001c24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c26:	fab3 f383 	clz	r3, r3
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	f003 031f 	and.w	r3, r3, #31
 8001c32:	2b09      	cmp	r3, #9
 8001c34:	bf94      	ite	ls
 8001c36:	2301      	movls	r3, #1
 8001c38:	2300      	movhi	r3, #0
 8001c3a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d079      	beq.n	8001d34 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d107      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0x4c0>
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	0e9b      	lsrs	r3, r3, #26
 8001c52:	3301      	adds	r3, #1
 8001c54:	069b      	lsls	r3, r3, #26
 8001c56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c5a:	e015      	b.n	8001c88 <HAL_ADC_ConfigChannel+0x4ec>
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c64:	fa93 f3a3 	rbit	r3, r3
 8001c68:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c6c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001c6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001c74:	2320      	movs	r3, #32
 8001c76:	e003      	b.n	8001c80 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001c78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c7a:	fab3 f383 	clz	r3, r3
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	3301      	adds	r3, #1
 8001c82:	069b      	lsls	r3, r3, #26
 8001c84:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d109      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x50c>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	0e9b      	lsrs	r3, r3, #26
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	f003 031f 	and.w	r3, r3, #31
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca6:	e017      	b.n	8001cd8 <HAL_ADC_ConfigChannel+0x53c>
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cb0:	fa93 f3a3 	rbit	r3, r3
 8001cb4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001cb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cb8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001cba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001cc0:	2320      	movs	r3, #32
 8001cc2:	e003      	b.n	8001ccc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001cc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cc6:	fab3 f383 	clz	r3, r3
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	3301      	adds	r3, #1
 8001cce:	f003 031f 	and.w	r3, r3, #31
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd8:	ea42 0103 	orr.w	r1, r2, r3
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d10a      	bne.n	8001cfe <HAL_ADC_ConfigChannel+0x562>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	0e9b      	lsrs	r3, r3, #26
 8001cee:	3301      	adds	r3, #1
 8001cf0:	f003 021f 	and.w	r2, r3, #31
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	4413      	add	r3, r2
 8001cfa:	051b      	lsls	r3, r3, #20
 8001cfc:	e018      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x594>
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d06:	fa93 f3a3 	rbit	r3, r3
 8001d0a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001d16:	2320      	movs	r3, #32
 8001d18:	e003      	b.n	8001d22 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d1c:	fab3 f383 	clz	r3, r3
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	3301      	adds	r3, #1
 8001d24:	f003 021f 	and.w	r2, r3, #31
 8001d28:	4613      	mov	r3, r2
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	4413      	add	r3, r2
 8001d2e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d30:	430b      	orrs	r3, r1
 8001d32:	e080      	b.n	8001e36 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d107      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x5b4>
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	0e9b      	lsrs	r3, r3, #26
 8001d46:	3301      	adds	r3, #1
 8001d48:	069b      	lsls	r3, r3, #26
 8001d4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d4e:	e015      	b.n	8001d7c <HAL_ADC_ConfigChannel+0x5e0>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d58:	fa93 f3a3 	rbit	r3, r3
 8001d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d60:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001d68:	2320      	movs	r3, #32
 8001d6a:	e003      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d6e:	fab3 f383 	clz	r3, r3
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	3301      	adds	r3, #1
 8001d76:	069b      	lsls	r3, r3, #26
 8001d78:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d109      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x600>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	0e9b      	lsrs	r3, r3, #26
 8001d8e:	3301      	adds	r3, #1
 8001d90:	f003 031f 	and.w	r3, r3, #31
 8001d94:	2101      	movs	r1, #1
 8001d96:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9a:	e017      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x630>
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da2:	6a3b      	ldr	r3, [r7, #32]
 8001da4:	fa93 f3a3 	rbit	r3, r3
 8001da8:	61fb      	str	r3, [r7, #28]
  return result;
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001db4:	2320      	movs	r3, #32
 8001db6:	e003      	b.n	8001dc0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	fab3 f383 	clz	r3, r3
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	f003 031f 	and.w	r3, r3, #31
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dcc:	ea42 0103 	orr.w	r1, r2, r3
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10d      	bne.n	8001df8 <HAL_ADC_ConfigChannel+0x65c>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	0e9b      	lsrs	r3, r3, #26
 8001de2:	3301      	adds	r3, #1
 8001de4:	f003 021f 	and.w	r2, r3, #31
 8001de8:	4613      	mov	r3, r2
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	4413      	add	r3, r2
 8001dee:	3b1e      	subs	r3, #30
 8001df0:	051b      	lsls	r3, r3, #20
 8001df2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001df6:	e01d      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x698>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	fa93 f3a3 	rbit	r3, r3
 8001e04:	613b      	str	r3, [r7, #16]
  return result;
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d103      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001e10:	2320      	movs	r3, #32
 8001e12:	e005      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x684>
 8001e14:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	fab3 f383 	clz	r3, r3
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	3301      	adds	r3, #1
 8001e22:	f003 021f 	and.w	r2, r3, #31
 8001e26:	4613      	mov	r3, r2
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	4413      	add	r3, r2
 8001e2c:	3b1e      	subs	r3, #30
 8001e2e:	051b      	lsls	r3, r3, #20
 8001e30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e34:	430b      	orrs	r3, r1
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	6892      	ldr	r2, [r2, #8]
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	f7ff f9f7 	bl	800122e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4b3d      	ldr	r3, [pc, #244]	; (8001f3c <HAL_ADC_ConfigChannel+0x7a0>)
 8001e46:	4013      	ands	r3, r2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d06c      	beq.n	8001f26 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e4c:	483c      	ldr	r0, [pc, #240]	; (8001f40 <HAL_ADC_ConfigChannel+0x7a4>)
 8001e4e:	f7ff f95f 	bl	8001110 <LL_ADC_GetCommonPathInternalCh>
 8001e52:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a3a      	ldr	r2, [pc, #232]	; (8001f44 <HAL_ADC_ConfigChannel+0x7a8>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d127      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d121      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a35      	ldr	r2, [pc, #212]	; (8001f48 <HAL_ADC_ConfigChannel+0x7ac>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d157      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e7e:	4619      	mov	r1, r3
 8001e80:	482f      	ldr	r0, [pc, #188]	; (8001f40 <HAL_ADC_ConfigChannel+0x7a4>)
 8001e82:	f7ff f932 	bl	80010ea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e86:	4b31      	ldr	r3, [pc, #196]	; (8001f4c <HAL_ADC_ConfigChannel+0x7b0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	099b      	lsrs	r3, r3, #6
 8001e8c:	4a30      	ldr	r2, [pc, #192]	; (8001f50 <HAL_ADC_ConfigChannel+0x7b4>)
 8001e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e92:	099b      	lsrs	r3, r3, #6
 8001e94:	1c5a      	adds	r2, r3, #1
 8001e96:	4613      	mov	r3, r2
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	4413      	add	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ea0:	e002      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1f9      	bne.n	8001ea2 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001eae:	e03a      	b.n	8001f26 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a27      	ldr	r2, [pc, #156]	; (8001f54 <HAL_ADC_ConfigChannel+0x7b8>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d113      	bne.n	8001ee2 <HAL_ADC_ConfigChannel+0x746>
 8001eba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ebe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d10d      	bne.n	8001ee2 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a1f      	ldr	r2, [pc, #124]	; (8001f48 <HAL_ADC_ConfigChannel+0x7ac>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d12a      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ed0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ed4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4819      	ldr	r0, [pc, #100]	; (8001f40 <HAL_ADC_ConfigChannel+0x7a4>)
 8001edc:	f7ff f905 	bl	80010ea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ee0:	e021      	b.n	8001f26 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a1c      	ldr	r2, [pc, #112]	; (8001f58 <HAL_ADC_ConfigChannel+0x7bc>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d11c      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001eec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ef0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d116      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a12      	ldr	r2, [pc, #72]	; (8001f48 <HAL_ADC_ConfigChannel+0x7ac>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d111      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	480c      	ldr	r0, [pc, #48]	; (8001f40 <HAL_ADC_ConfigChannel+0x7a4>)
 8001f0e:	f7ff f8ec 	bl	80010ea <LL_ADC_SetCommonPathInternalCh>
 8001f12:	e008      	b.n	8001f26 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f18:	f043 0220 	orr.w	r2, r3, #32
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001f2e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	37d8      	adds	r7, #216	; 0xd8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	80080000 	.word	0x80080000
 8001f40:	50040300 	.word	0x50040300
 8001f44:	c7520000 	.word	0xc7520000
 8001f48:	50040000 	.word	0x50040000
 8001f4c:	20000000 	.word	0x20000000
 8001f50:	053e2d63 	.word	0x053e2d63
 8001f54:	cb840000 	.word	0xcb840000
 8001f58:	80000001 	.word	0x80000001

08001f5c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff fa11 	bl	8001390 <LL_ADC_IsEnabled>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d14d      	bne.n	8002010 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689a      	ldr	r2, [r3, #8]
 8001f7a:	4b28      	ldr	r3, [pc, #160]	; (800201c <ADC_Enable+0xc0>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00d      	beq.n	8001f9e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f86:	f043 0210 	orr.w	r2, r3, #16
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f92:	f043 0201 	orr.w	r2, r3, #1
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e039      	b.n	8002012 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff f9e0 	bl	8001368 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001fa8:	f7ff f85c 	bl	8001064 <HAL_GetTick>
 8001fac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fae:	e028      	b.n	8002002 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff f9eb 	bl	8001390 <LL_ADC_IsEnabled>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d104      	bne.n	8001fca <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff f9cf 	bl	8001368 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fca:	f7ff f84b 	bl	8001064 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d914      	bls.n	8002002 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d00d      	beq.n	8002002 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fea:	f043 0210 	orr.w	r2, r3, #16
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff6:	f043 0201 	orr.w	r2, r3, #1
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e007      	b.n	8002012 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b01      	cmp	r3, #1
 800200e:	d1cf      	bne.n	8001fb0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	8000003f 	.word	0x8000003f

08002020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002030:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <__NVIC_SetPriorityGrouping+0x44>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800203c:	4013      	ands	r3, r2
 800203e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002048:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800204c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002052:	4a04      	ldr	r2, [pc, #16]	; (8002064 <__NVIC_SetPriorityGrouping+0x44>)
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	60d3      	str	r3, [r2, #12]
}
 8002058:	bf00      	nop
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800206c:	4b04      	ldr	r3, [pc, #16]	; (8002080 <__NVIC_GetPriorityGrouping+0x18>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	0a1b      	lsrs	r3, r3, #8
 8002072:	f003 0307 	and.w	r3, r3, #7
}
 8002076:	4618      	mov	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800208e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002092:	2b00      	cmp	r3, #0
 8002094:	db0b      	blt.n	80020ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	f003 021f 	and.w	r2, r3, #31
 800209c:	4907      	ldr	r1, [pc, #28]	; (80020bc <__NVIC_EnableIRQ+0x38>)
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	095b      	lsrs	r3, r3, #5
 80020a4:	2001      	movs	r0, #1
 80020a6:	fa00 f202 	lsl.w	r2, r0, r2
 80020aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	e000e100 	.word	0xe000e100

080020c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	6039      	str	r1, [r7, #0]
 80020ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	db0a      	blt.n	80020ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	490c      	ldr	r1, [pc, #48]	; (800210c <__NVIC_SetPriority+0x4c>)
 80020da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020de:	0112      	lsls	r2, r2, #4
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	440b      	add	r3, r1
 80020e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020e8:	e00a      	b.n	8002100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	4908      	ldr	r1, [pc, #32]	; (8002110 <__NVIC_SetPriority+0x50>)
 80020f0:	79fb      	ldrb	r3, [r7, #7]
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	3b04      	subs	r3, #4
 80020f8:	0112      	lsls	r2, r2, #4
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	440b      	add	r3, r1
 80020fe:	761a      	strb	r2, [r3, #24]
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	e000e100 	.word	0xe000e100
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002114:	b480      	push	{r7}
 8002116:	b089      	sub	sp, #36	; 0x24
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	f1c3 0307 	rsb	r3, r3, #7
 800212e:	2b04      	cmp	r3, #4
 8002130:	bf28      	it	cs
 8002132:	2304      	movcs	r3, #4
 8002134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3304      	adds	r3, #4
 800213a:	2b06      	cmp	r3, #6
 800213c:	d902      	bls.n	8002144 <NVIC_EncodePriority+0x30>
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3b03      	subs	r3, #3
 8002142:	e000      	b.n	8002146 <NVIC_EncodePriority+0x32>
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002148:	f04f 32ff 	mov.w	r2, #4294967295
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43da      	mvns	r2, r3
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	401a      	ands	r2, r3
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800215c:	f04f 31ff 	mov.w	r1, #4294967295
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	fa01 f303 	lsl.w	r3, r1, r3
 8002166:	43d9      	mvns	r1, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800216c:	4313      	orrs	r3, r2
         );
}
 800216e:	4618      	mov	r0, r3
 8002170:	3724      	adds	r7, #36	; 0x24
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
	...

0800217c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3b01      	subs	r3, #1
 8002188:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800218c:	d301      	bcc.n	8002192 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800218e:	2301      	movs	r3, #1
 8002190:	e00f      	b.n	80021b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002192:	4a0a      	ldr	r2, [pc, #40]	; (80021bc <SysTick_Config+0x40>)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3b01      	subs	r3, #1
 8002198:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800219a:	210f      	movs	r1, #15
 800219c:	f04f 30ff 	mov.w	r0, #4294967295
 80021a0:	f7ff ff8e 	bl	80020c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021a4:	4b05      	ldr	r3, [pc, #20]	; (80021bc <SysTick_Config+0x40>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021aa:	4b04      	ldr	r3, [pc, #16]	; (80021bc <SysTick_Config+0x40>)
 80021ac:	2207      	movs	r2, #7
 80021ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	e000e010 	.word	0xe000e010

080021c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f7ff ff29 	bl	8002020 <__NVIC_SetPriorityGrouping>
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b086      	sub	sp, #24
 80021da:	af00      	add	r7, sp, #0
 80021dc:	4603      	mov	r3, r0
 80021de:	60b9      	str	r1, [r7, #8]
 80021e0:	607a      	str	r2, [r7, #4]
 80021e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021e8:	f7ff ff3e 	bl	8002068 <__NVIC_GetPriorityGrouping>
 80021ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	68b9      	ldr	r1, [r7, #8]
 80021f2:	6978      	ldr	r0, [r7, #20]
 80021f4:	f7ff ff8e 	bl	8002114 <NVIC_EncodePriority>
 80021f8:	4602      	mov	r2, r0
 80021fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021fe:	4611      	mov	r1, r2
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff ff5d 	bl	80020c0 <__NVIC_SetPriority>
}
 8002206:	bf00      	nop
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	4603      	mov	r3, r0
 8002216:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff ff31 	bl	8002084 <__NVIC_EnableIRQ>
}
 8002222:	bf00      	nop
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b082      	sub	sp, #8
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff ffa2 	bl	800217c <SysTick_Config>
 8002238:	4603      	mov	r3, r0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
	...

08002244 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e098      	b.n	8002388 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	461a      	mov	r2, r3
 800225c:	4b4d      	ldr	r3, [pc, #308]	; (8002394 <HAL_DMA_Init+0x150>)
 800225e:	429a      	cmp	r2, r3
 8002260:	d80f      	bhi.n	8002282 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	461a      	mov	r2, r3
 8002268:	4b4b      	ldr	r3, [pc, #300]	; (8002398 <HAL_DMA_Init+0x154>)
 800226a:	4413      	add	r3, r2
 800226c:	4a4b      	ldr	r2, [pc, #300]	; (800239c <HAL_DMA_Init+0x158>)
 800226e:	fba2 2303 	umull	r2, r3, r2, r3
 8002272:	091b      	lsrs	r3, r3, #4
 8002274:	009a      	lsls	r2, r3, #2
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a48      	ldr	r2, [pc, #288]	; (80023a0 <HAL_DMA_Init+0x15c>)
 800227e:	641a      	str	r2, [r3, #64]	; 0x40
 8002280:	e00e      	b.n	80022a0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	461a      	mov	r2, r3
 8002288:	4b46      	ldr	r3, [pc, #280]	; (80023a4 <HAL_DMA_Init+0x160>)
 800228a:	4413      	add	r3, r2
 800228c:	4a43      	ldr	r2, [pc, #268]	; (800239c <HAL_DMA_Init+0x158>)
 800228e:	fba2 2303 	umull	r2, r3, r2, r3
 8002292:	091b      	lsrs	r3, r3, #4
 8002294:	009a      	lsls	r2, r3, #2
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a42      	ldr	r2, [pc, #264]	; (80023a8 <HAL_DMA_Init+0x164>)
 800229e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2202      	movs	r2, #2
 80022a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80022b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80022c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022fa:	d039      	beq.n	8002370 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	4a27      	ldr	r2, [pc, #156]	; (80023a0 <HAL_DMA_Init+0x15c>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d11a      	bne.n	800233c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002306:	4b29      	ldr	r3, [pc, #164]	; (80023ac <HAL_DMA_Init+0x168>)
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230e:	f003 031c 	and.w	r3, r3, #28
 8002312:	210f      	movs	r1, #15
 8002314:	fa01 f303 	lsl.w	r3, r1, r3
 8002318:	43db      	mvns	r3, r3
 800231a:	4924      	ldr	r1, [pc, #144]	; (80023ac <HAL_DMA_Init+0x168>)
 800231c:	4013      	ands	r3, r2
 800231e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002320:	4b22      	ldr	r3, [pc, #136]	; (80023ac <HAL_DMA_Init+0x168>)
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6859      	ldr	r1, [r3, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232c:	f003 031c 	and.w	r3, r3, #28
 8002330:	fa01 f303 	lsl.w	r3, r1, r3
 8002334:	491d      	ldr	r1, [pc, #116]	; (80023ac <HAL_DMA_Init+0x168>)
 8002336:	4313      	orrs	r3, r2
 8002338:	600b      	str	r3, [r1, #0]
 800233a:	e019      	b.n	8002370 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800233c:	4b1c      	ldr	r3, [pc, #112]	; (80023b0 <HAL_DMA_Init+0x16c>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002344:	f003 031c 	and.w	r3, r3, #28
 8002348:	210f      	movs	r1, #15
 800234a:	fa01 f303 	lsl.w	r3, r1, r3
 800234e:	43db      	mvns	r3, r3
 8002350:	4917      	ldr	r1, [pc, #92]	; (80023b0 <HAL_DMA_Init+0x16c>)
 8002352:	4013      	ands	r3, r2
 8002354:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002356:	4b16      	ldr	r3, [pc, #88]	; (80023b0 <HAL_DMA_Init+0x16c>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6859      	ldr	r1, [r3, #4]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002362:	f003 031c 	and.w	r3, r3, #28
 8002366:	fa01 f303 	lsl.w	r3, r1, r3
 800236a:	4911      	ldr	r1, [pc, #68]	; (80023b0 <HAL_DMA_Init+0x16c>)
 800236c:	4313      	orrs	r3, r2
 800236e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	40020407 	.word	0x40020407
 8002398:	bffdfff8 	.word	0xbffdfff8
 800239c:	cccccccd 	.word	0xcccccccd
 80023a0:	40020000 	.word	0x40020000
 80023a4:	bffdfbf8 	.word	0xbffdfbf8
 80023a8:	40020400 	.word	0x40020400
 80023ac:	400200a8 	.word	0x400200a8
 80023b0:	400204a8 	.word	0x400204a8

080023b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d0:	f003 031c 	and.w	r3, r3, #28
 80023d4:	2204      	movs	r2, #4
 80023d6:	409a      	lsls	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	4013      	ands	r3, r2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d026      	beq.n	800242e <HAL_DMA_IRQHandler+0x7a>
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f003 0304 	and.w	r3, r3, #4
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d021      	beq.n	800242e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0320 	and.w	r3, r3, #32
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d107      	bne.n	8002408 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0204 	bic.w	r2, r2, #4
 8002406:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240c:	f003 021c 	and.w	r2, r3, #28
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	2104      	movs	r1, #4
 8002416:	fa01 f202 	lsl.w	r2, r1, r2
 800241a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002420:	2b00      	cmp	r3, #0
 8002422:	d071      	beq.n	8002508 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800242c:	e06c      	b.n	8002508 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002432:	f003 031c 	and.w	r3, r3, #28
 8002436:	2202      	movs	r2, #2
 8002438:	409a      	lsls	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	4013      	ands	r3, r2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d02e      	beq.n	80024a0 <HAL_DMA_IRQHandler+0xec>
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d029      	beq.n	80024a0 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0320 	and.w	r3, r3, #32
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10b      	bne.n	8002472 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 020a 	bic.w	r2, r2, #10
 8002468:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002476:	f003 021c 	and.w	r2, r3, #28
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	2102      	movs	r1, #2
 8002480:	fa01 f202 	lsl.w	r2, r1, r2
 8002484:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002492:	2b00      	cmp	r3, #0
 8002494:	d038      	beq.n	8002508 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800249e:	e033      	b.n	8002508 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a4:	f003 031c 	and.w	r3, r3, #28
 80024a8:	2208      	movs	r2, #8
 80024aa:	409a      	lsls	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	4013      	ands	r3, r2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d02a      	beq.n	800250a <HAL_DMA_IRQHandler+0x156>
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d025      	beq.n	800250a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 020e 	bic.w	r2, r2, #14
 80024cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d2:	f003 021c 	and.w	r2, r3, #28
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	2101      	movs	r1, #1
 80024dc:	fa01 f202 	lsl.w	r2, r1, r2
 80024e0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d004      	beq.n	800250a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002508:	bf00      	nop
 800250a:	bf00      	nop
}
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
	...

08002514 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002514:	b480      	push	{r7}
 8002516:	b087      	sub	sp, #28
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800251e:	2300      	movs	r3, #0
 8002520:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002522:	e148      	b.n	80027b6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	2101      	movs	r1, #1
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	fa01 f303 	lsl.w	r3, r1, r3
 8002530:	4013      	ands	r3, r2
 8002532:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 813a 	beq.w	80027b0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d00b      	beq.n	800255c <HAL_GPIO_Init+0x48>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b02      	cmp	r3, #2
 800254a:	d007      	beq.n	800255c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002550:	2b11      	cmp	r3, #17
 8002552:	d003      	beq.n	800255c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b12      	cmp	r3, #18
 800255a:	d130      	bne.n	80025be <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	2203      	movs	r2, #3
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	4013      	ands	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	4313      	orrs	r3, r2
 8002584:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002592:	2201      	movs	r2, #1
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43db      	mvns	r3, r3
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	4013      	ands	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	091b      	lsrs	r3, r3, #4
 80025a8:	f003 0201 	and.w	r2, r3, #1
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	2203      	movs	r2, #3
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43db      	mvns	r3, r3
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4013      	ands	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d003      	beq.n	80025fe <HAL_GPIO_Init+0xea>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b12      	cmp	r3, #18
 80025fc:	d123      	bne.n	8002646 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	08da      	lsrs	r2, r3, #3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3208      	adds	r2, #8
 8002606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800260a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	220f      	movs	r2, #15
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	43db      	mvns	r3, r3
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	4013      	ands	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	691a      	ldr	r2, [r3, #16]
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	4313      	orrs	r3, r2
 8002636:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	08da      	lsrs	r2, r3, #3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3208      	adds	r2, #8
 8002640:	6939      	ldr	r1, [r7, #16]
 8002642:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	2203      	movs	r2, #3
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	43db      	mvns	r3, r3
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	4013      	ands	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f003 0203 	and.w	r2, r3, #3
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	4313      	orrs	r3, r2
 8002672:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 8094 	beq.w	80027b0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002688:	4b52      	ldr	r3, [pc, #328]	; (80027d4 <HAL_GPIO_Init+0x2c0>)
 800268a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800268c:	4a51      	ldr	r2, [pc, #324]	; (80027d4 <HAL_GPIO_Init+0x2c0>)
 800268e:	f043 0301 	orr.w	r3, r3, #1
 8002692:	6613      	str	r3, [r2, #96]	; 0x60
 8002694:	4b4f      	ldr	r3, [pc, #316]	; (80027d4 <HAL_GPIO_Init+0x2c0>)
 8002696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	60bb      	str	r3, [r7, #8]
 800269e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026a0:	4a4d      	ldr	r2, [pc, #308]	; (80027d8 <HAL_GPIO_Init+0x2c4>)
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	089b      	lsrs	r3, r3, #2
 80026a6:	3302      	adds	r3, #2
 80026a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f003 0303 	and.w	r3, r3, #3
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	220f      	movs	r2, #15
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	43db      	mvns	r3, r3
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	4013      	ands	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80026ca:	d00d      	beq.n	80026e8 <HAL_GPIO_Init+0x1d4>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a43      	ldr	r2, [pc, #268]	; (80027dc <HAL_GPIO_Init+0x2c8>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d007      	beq.n	80026e4 <HAL_GPIO_Init+0x1d0>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a42      	ldr	r2, [pc, #264]	; (80027e0 <HAL_GPIO_Init+0x2cc>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d101      	bne.n	80026e0 <HAL_GPIO_Init+0x1cc>
 80026dc:	2302      	movs	r3, #2
 80026de:	e004      	b.n	80026ea <HAL_GPIO_Init+0x1d6>
 80026e0:	2307      	movs	r3, #7
 80026e2:	e002      	b.n	80026ea <HAL_GPIO_Init+0x1d6>
 80026e4:	2301      	movs	r3, #1
 80026e6:	e000      	b.n	80026ea <HAL_GPIO_Init+0x1d6>
 80026e8:	2300      	movs	r3, #0
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	f002 0203 	and.w	r2, r2, #3
 80026f0:	0092      	lsls	r2, r2, #2
 80026f2:	4093      	lsls	r3, r2
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026fa:	4937      	ldr	r1, [pc, #220]	; (80027d8 <HAL_GPIO_Init+0x2c4>)
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	089b      	lsrs	r3, r3, #2
 8002700:	3302      	adds	r3, #2
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002708:	4b36      	ldr	r3, [pc, #216]	; (80027e4 <HAL_GPIO_Init+0x2d0>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	43db      	mvns	r3, r3
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	4013      	ands	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4313      	orrs	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800272c:	4a2d      	ldr	r2, [pc, #180]	; (80027e4 <HAL_GPIO_Init+0x2d0>)
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002732:	4b2c      	ldr	r3, [pc, #176]	; (80027e4 <HAL_GPIO_Init+0x2d0>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	43db      	mvns	r3, r3
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	4013      	ands	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4313      	orrs	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002756:	4a23      	ldr	r2, [pc, #140]	; (80027e4 <HAL_GPIO_Init+0x2d0>)
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800275c:	4b21      	ldr	r3, [pc, #132]	; (80027e4 <HAL_GPIO_Init+0x2d0>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	43db      	mvns	r3, r3
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	4013      	ands	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	4313      	orrs	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002780:	4a18      	ldr	r2, [pc, #96]	; (80027e4 <HAL_GPIO_Init+0x2d0>)
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002786:	4b17      	ldr	r3, [pc, #92]	; (80027e4 <HAL_GPIO_Init+0x2d0>)
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	43db      	mvns	r3, r3
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	4013      	ands	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027aa:	4a0e      	ldr	r2, [pc, #56]	; (80027e4 <HAL_GPIO_Init+0x2d0>)
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	3301      	adds	r3, #1
 80027b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	fa22 f303 	lsr.w	r3, r2, r3
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f47f aeaf 	bne.w	8002524 <HAL_GPIO_Init+0x10>
  }
}
 80027c6:	bf00      	nop
 80027c8:	bf00      	nop
 80027ca:	371c      	adds	r7, #28
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	40021000 	.word	0x40021000
 80027d8:	40010000 	.word	0x40010000
 80027dc:	48000400 	.word	0x48000400
 80027e0:	48000800 	.word	0x48000800
 80027e4:	40010400 	.word	0x40010400

080027e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	460b      	mov	r3, r1
 80027f2:	807b      	strh	r3, [r7, #2]
 80027f4:	4613      	mov	r3, r2
 80027f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027f8:	787b      	ldrb	r3, [r7, #1]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027fe:	887a      	ldrh	r2, [r7, #2]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002804:	e002      	b.n	800280c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002806:	887a      	ldrh	r2, [r7, #2]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800281c:	4b05      	ldr	r3, [pc, #20]	; (8002834 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a04      	ldr	r2, [pc, #16]	; (8002834 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002826:	6013      	str	r3, [r2, #0]
}
 8002828:	bf00      	nop
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	40007000 	.word	0x40007000

08002838 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800283c:	4b04      	ldr	r3, [pc, #16]	; (8002850 <HAL_PWREx_GetVoltageRange+0x18>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002844:	4618      	mov	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	40007000 	.word	0x40007000

08002854 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002862:	d130      	bne.n	80028c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002864:	4b23      	ldr	r3, [pc, #140]	; (80028f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800286c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002870:	d038      	beq.n	80028e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002872:	4b20      	ldr	r3, [pc, #128]	; (80028f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800287a:	4a1e      	ldr	r2, [pc, #120]	; (80028f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800287c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002880:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002882:	4b1d      	ldr	r3, [pc, #116]	; (80028f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2232      	movs	r2, #50	; 0x32
 8002888:	fb02 f303 	mul.w	r3, r2, r3
 800288c:	4a1b      	ldr	r2, [pc, #108]	; (80028fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800288e:	fba2 2303 	umull	r2, r3, r2, r3
 8002892:	0c9b      	lsrs	r3, r3, #18
 8002894:	3301      	adds	r3, #1
 8002896:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002898:	e002      	b.n	80028a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	3b01      	subs	r3, #1
 800289e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028a0:	4b14      	ldr	r3, [pc, #80]	; (80028f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ac:	d102      	bne.n	80028b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1f2      	bne.n	800289a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028b4:	4b0f      	ldr	r3, [pc, #60]	; (80028f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028c0:	d110      	bne.n	80028e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e00f      	b.n	80028e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80028c6:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028d2:	d007      	beq.n	80028e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80028d4:	4b07      	ldr	r3, [pc, #28]	; (80028f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028dc:	4a05      	ldr	r2, [pc, #20]	; (80028f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	40007000 	.word	0x40007000
 80028f8:	20000000 	.word	0x20000000
 80028fc:	431bde83 	.word	0x431bde83

08002900 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b088      	sub	sp, #32
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d102      	bne.n	8002914 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	f000 bc11 	b.w	8003136 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002914:	4ba0      	ldr	r3, [pc, #640]	; (8002b98 <HAL_RCC_OscConfig+0x298>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 030c 	and.w	r3, r3, #12
 800291c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800291e:	4b9e      	ldr	r3, [pc, #632]	; (8002b98 <HAL_RCC_OscConfig+0x298>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f003 0303 	and.w	r3, r3, #3
 8002926:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0310 	and.w	r3, r3, #16
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 80e4 	beq.w	8002afe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d007      	beq.n	800294c <HAL_RCC_OscConfig+0x4c>
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	2b0c      	cmp	r3, #12
 8002940:	f040 808b 	bne.w	8002a5a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	2b01      	cmp	r3, #1
 8002948:	f040 8087 	bne.w	8002a5a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800294c:	4b92      	ldr	r3, [pc, #584]	; (8002b98 <HAL_RCC_OscConfig+0x298>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d005      	beq.n	8002964 <HAL_RCC_OscConfig+0x64>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e3e8      	b.n	8003136 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a1a      	ldr	r2, [r3, #32]
 8002968:	4b8b      	ldr	r3, [pc, #556]	; (8002b98 <HAL_RCC_OscConfig+0x298>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0308 	and.w	r3, r3, #8
 8002970:	2b00      	cmp	r3, #0
 8002972:	d004      	beq.n	800297e <HAL_RCC_OscConfig+0x7e>
 8002974:	4b88      	ldr	r3, [pc, #544]	; (8002b98 <HAL_RCC_OscConfig+0x298>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800297c:	e005      	b.n	800298a <HAL_RCC_OscConfig+0x8a>
 800297e:	4b86      	ldr	r3, [pc, #536]	; (8002b98 <HAL_RCC_OscConfig+0x298>)
 8002980:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002984:	091b      	lsrs	r3, r3, #4
 8002986:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800298a:	4293      	cmp	r3, r2
 800298c:	d223      	bcs.n	80029d6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	4618      	mov	r0, r3
 8002994:	f000 fd7a 	bl	800348c <RCC_SetFlashLatencyFromMSIRange>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e3c9      	b.n	8003136 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029a2:	4b7d      	ldr	r3, [pc, #500]	; (8002b98 <HAL_RCC_OscConfig+0x298>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a7c      	ldr	r2, [pc, #496]	; (8002b98 <HAL_RCC_OscConfig+0x298>)
 80029a8:	f043 0308 	orr.w	r3, r3, #8
 80029ac:	6013      	str	r3, [r2, #0]
 80029ae:	4b7a      	ldr	r3, [pc, #488]	; (8002b98 <HAL_RCC_OscConfig+0x298>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	4977      	ldr	r1, [pc, #476]	; (8002b98 <HAL_RCC_OscConfig+0x298>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029c0:	4b75      	ldr	r3, [pc, #468]	; (8002b98 <HAL_RCC_OscConfig+0x298>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69db      	ldr	r3, [r3, #28]
 80029cc:	021b      	lsls	r3, r3, #8
 80029ce:	4972      	ldr	r1, [pc, #456]	; (8002b98 <HAL_RCC_OscConfig+0x298>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	604b      	str	r3, [r1, #4]
 80029d4:	e025      	b.n	8002a22 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029d6:	4b70      	ldr	r3, [pc, #448]	; (8002b98 <HAL_RCC_OscConfig+0x298>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a6f      	ldr	r2, [pc, #444]	; (8002b98 <HAL_RCC_OscConfig+0x298>)
 80029dc:	f043 0308 	orr.w	r3, r3, #8
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	4b6d      	ldr	r3, [pc, #436]	; (8002b98 <HAL_RCC_OscConfig+0x298>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	496a      	ldr	r1, [pc, #424]	; (8002b98 <HAL_RCC_OscConfig+0x298>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029f4:	4b68      	ldr	r3, [pc, #416]	; (8002b98 <HAL_RCC_OscConfig+0x298>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	021b      	lsls	r3, r3, #8
 8002a02:	4965      	ldr	r1, [pc, #404]	; (8002b98 <HAL_RCC_OscConfig+0x298>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d109      	bne.n	8002a22 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 fd3a 	bl	800348c <RCC_SetFlashLatencyFromMSIRange>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e389      	b.n	8003136 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a22:	f000 fc6f 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 8002a26:	4602      	mov	r2, r0
 8002a28:	4b5b      	ldr	r3, [pc, #364]	; (8002b98 <HAL_RCC_OscConfig+0x298>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	091b      	lsrs	r3, r3, #4
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	495a      	ldr	r1, [pc, #360]	; (8002b9c <HAL_RCC_OscConfig+0x29c>)
 8002a34:	5ccb      	ldrb	r3, [r1, r3]
 8002a36:	f003 031f 	and.w	r3, r3, #31
 8002a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a3e:	4a58      	ldr	r2, [pc, #352]	; (8002ba0 <HAL_RCC_OscConfig+0x2a0>)
 8002a40:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a42:	4b58      	ldr	r3, [pc, #352]	; (8002ba4 <HAL_RCC_OscConfig+0x2a4>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fe fabc 	bl	8000fc4 <HAL_InitTick>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a50:	7bfb      	ldrb	r3, [r7, #15]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d052      	beq.n	8002afc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
 8002a58:	e36d      	b.n	8003136 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d032      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a62:	4b4d      	ldr	r3, [pc, #308]	; (8002b98 <HAL_RCC_OscConfig+0x298>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a4c      	ldr	r2, [pc, #304]	; (8002b98 <HAL_RCC_OscConfig+0x298>)
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a6e:	f7fe faf9 	bl	8001064 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a76:	f7fe faf5 	bl	8001064 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e356      	b.n	8003136 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a88:	4b43      	ldr	r3, [pc, #268]	; (8002b98 <HAL_RCC_OscConfig+0x298>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0f0      	beq.n	8002a76 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a94:	4b40      	ldr	r3, [pc, #256]	; (8002b98 <HAL_RCC_OscConfig+0x298>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a3f      	ldr	r2, [pc, #252]	; (8002b98 <HAL_RCC_OscConfig+0x298>)
 8002a9a:	f043 0308 	orr.w	r3, r3, #8
 8002a9e:	6013      	str	r3, [r2, #0]
 8002aa0:	4b3d      	ldr	r3, [pc, #244]	; (8002b98 <HAL_RCC_OscConfig+0x298>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	493a      	ldr	r1, [pc, #232]	; (8002b98 <HAL_RCC_OscConfig+0x298>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ab2:	4b39      	ldr	r3, [pc, #228]	; (8002b98 <HAL_RCC_OscConfig+0x298>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	021b      	lsls	r3, r3, #8
 8002ac0:	4935      	ldr	r1, [pc, #212]	; (8002b98 <HAL_RCC_OscConfig+0x298>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	604b      	str	r3, [r1, #4]
 8002ac6:	e01a      	b.n	8002afe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ac8:	4b33      	ldr	r3, [pc, #204]	; (8002b98 <HAL_RCC_OscConfig+0x298>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a32      	ldr	r2, [pc, #200]	; (8002b98 <HAL_RCC_OscConfig+0x298>)
 8002ace:	f023 0301 	bic.w	r3, r3, #1
 8002ad2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ad4:	f7fe fac6 	bl	8001064 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002adc:	f7fe fac2 	bl	8001064 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e323      	b.n	8003136 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002aee:	4b2a      	ldr	r3, [pc, #168]	; (8002b98 <HAL_RCC_OscConfig+0x298>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f0      	bne.n	8002adc <HAL_RCC_OscConfig+0x1dc>
 8002afa:	e000      	b.n	8002afe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002afc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d073      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	2b08      	cmp	r3, #8
 8002b0e:	d005      	beq.n	8002b1c <HAL_RCC_OscConfig+0x21c>
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	2b0c      	cmp	r3, #12
 8002b14:	d10e      	bne.n	8002b34 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	d10b      	bne.n	8002b34 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b1c:	4b1e      	ldr	r3, [pc, #120]	; (8002b98 <HAL_RCC_OscConfig+0x298>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d063      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x2f0>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d15f      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e300      	b.n	8003136 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b3c:	d106      	bne.n	8002b4c <HAL_RCC_OscConfig+0x24c>
 8002b3e:	4b16      	ldr	r3, [pc, #88]	; (8002b98 <HAL_RCC_OscConfig+0x298>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a15      	ldr	r2, [pc, #84]	; (8002b98 <HAL_RCC_OscConfig+0x298>)
 8002b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	e01d      	b.n	8002b88 <HAL_RCC_OscConfig+0x288>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b54:	d10c      	bne.n	8002b70 <HAL_RCC_OscConfig+0x270>
 8002b56:	4b10      	ldr	r3, [pc, #64]	; (8002b98 <HAL_RCC_OscConfig+0x298>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a0f      	ldr	r2, [pc, #60]	; (8002b98 <HAL_RCC_OscConfig+0x298>)
 8002b5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <HAL_RCC_OscConfig+0x298>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a0c      	ldr	r2, [pc, #48]	; (8002b98 <HAL_RCC_OscConfig+0x298>)
 8002b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b6c:	6013      	str	r3, [r2, #0]
 8002b6e:	e00b      	b.n	8002b88 <HAL_RCC_OscConfig+0x288>
 8002b70:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <HAL_RCC_OscConfig+0x298>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a08      	ldr	r2, [pc, #32]	; (8002b98 <HAL_RCC_OscConfig+0x298>)
 8002b76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b7a:	6013      	str	r3, [r2, #0]
 8002b7c:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <HAL_RCC_OscConfig+0x298>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a05      	ldr	r2, [pc, #20]	; (8002b98 <HAL_RCC_OscConfig+0x298>)
 8002b82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d01b      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b90:	f7fe fa68 	bl	8001064 <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b96:	e010      	b.n	8002bba <HAL_RCC_OscConfig+0x2ba>
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	08005c20 	.word	0x08005c20
 8002ba0:	20000000 	.word	0x20000000
 8002ba4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ba8:	f7fe fa5c 	bl	8001064 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b64      	cmp	r3, #100	; 0x64
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e2bd      	b.n	8003136 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bba:	4baf      	ldr	r3, [pc, #700]	; (8002e78 <HAL_RCC_OscConfig+0x578>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0f0      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x2a8>
 8002bc6:	e014      	b.n	8002bf2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc8:	f7fe fa4c 	bl	8001064 <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bd0:	f7fe fa48 	bl	8001064 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b64      	cmp	r3, #100	; 0x64
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e2a9      	b.n	8003136 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002be2:	4ba5      	ldr	r3, [pc, #660]	; (8002e78 <HAL_RCC_OscConfig+0x578>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1f0      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x2d0>
 8002bee:	e000      	b.n	8002bf2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d060      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	d005      	beq.n	8002c10 <HAL_RCC_OscConfig+0x310>
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	2b0c      	cmp	r3, #12
 8002c08:	d119      	bne.n	8002c3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d116      	bne.n	8002c3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c10:	4b99      	ldr	r3, [pc, #612]	; (8002e78 <HAL_RCC_OscConfig+0x578>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d005      	beq.n	8002c28 <HAL_RCC_OscConfig+0x328>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e286      	b.n	8003136 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c28:	4b93      	ldr	r3, [pc, #588]	; (8002e78 <HAL_RCC_OscConfig+0x578>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	061b      	lsls	r3, r3, #24
 8002c36:	4990      	ldr	r1, [pc, #576]	; (8002e78 <HAL_RCC_OscConfig+0x578>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c3c:	e040      	b.n	8002cc0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d023      	beq.n	8002c8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c46:	4b8c      	ldr	r3, [pc, #560]	; (8002e78 <HAL_RCC_OscConfig+0x578>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a8b      	ldr	r2, [pc, #556]	; (8002e78 <HAL_RCC_OscConfig+0x578>)
 8002c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c52:	f7fe fa07 	bl	8001064 <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c58:	e008      	b.n	8002c6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c5a:	f7fe fa03 	bl	8001064 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e264      	b.n	8003136 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c6c:	4b82      	ldr	r3, [pc, #520]	; (8002e78 <HAL_RCC_OscConfig+0x578>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0f0      	beq.n	8002c5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c78:	4b7f      	ldr	r3, [pc, #508]	; (8002e78 <HAL_RCC_OscConfig+0x578>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	061b      	lsls	r3, r3, #24
 8002c86:	497c      	ldr	r1, [pc, #496]	; (8002e78 <HAL_RCC_OscConfig+0x578>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	604b      	str	r3, [r1, #4]
 8002c8c:	e018      	b.n	8002cc0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c8e:	4b7a      	ldr	r3, [pc, #488]	; (8002e78 <HAL_RCC_OscConfig+0x578>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a79      	ldr	r2, [pc, #484]	; (8002e78 <HAL_RCC_OscConfig+0x578>)
 8002c94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9a:	f7fe f9e3 	bl	8001064 <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ca2:	f7fe f9df 	bl	8001064 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e240      	b.n	8003136 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cb4:	4b70      	ldr	r3, [pc, #448]	; (8002e78 <HAL_RCC_OscConfig+0x578>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1f0      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0308 	and.w	r3, r3, #8
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d03c      	beq.n	8002d46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d01c      	beq.n	8002d0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cd4:	4b68      	ldr	r3, [pc, #416]	; (8002e78 <HAL_RCC_OscConfig+0x578>)
 8002cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cda:	4a67      	ldr	r2, [pc, #412]	; (8002e78 <HAL_RCC_OscConfig+0x578>)
 8002cdc:	f043 0301 	orr.w	r3, r3, #1
 8002ce0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce4:	f7fe f9be 	bl	8001064 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cec:	f7fe f9ba 	bl	8001064 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e21b      	b.n	8003136 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cfe:	4b5e      	ldr	r3, [pc, #376]	; (8002e78 <HAL_RCC_OscConfig+0x578>)
 8002d00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0ef      	beq.n	8002cec <HAL_RCC_OscConfig+0x3ec>
 8002d0c:	e01b      	b.n	8002d46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d0e:	4b5a      	ldr	r3, [pc, #360]	; (8002e78 <HAL_RCC_OscConfig+0x578>)
 8002d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d14:	4a58      	ldr	r2, [pc, #352]	; (8002e78 <HAL_RCC_OscConfig+0x578>)
 8002d16:	f023 0301 	bic.w	r3, r3, #1
 8002d1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d1e:	f7fe f9a1 	bl	8001064 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d26:	f7fe f99d 	bl	8001064 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e1fe      	b.n	8003136 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d38:	4b4f      	ldr	r3, [pc, #316]	; (8002e78 <HAL_RCC_OscConfig+0x578>)
 8002d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1ef      	bne.n	8002d26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0304 	and.w	r3, r3, #4
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 80a6 	beq.w	8002ea0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d54:	2300      	movs	r3, #0
 8002d56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d58:	4b47      	ldr	r3, [pc, #284]	; (8002e78 <HAL_RCC_OscConfig+0x578>)
 8002d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10d      	bne.n	8002d80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d64:	4b44      	ldr	r3, [pc, #272]	; (8002e78 <HAL_RCC_OscConfig+0x578>)
 8002d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d68:	4a43      	ldr	r2, [pc, #268]	; (8002e78 <HAL_RCC_OscConfig+0x578>)
 8002d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d6e:	6593      	str	r3, [r2, #88]	; 0x58
 8002d70:	4b41      	ldr	r3, [pc, #260]	; (8002e78 <HAL_RCC_OscConfig+0x578>)
 8002d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d78:	60bb      	str	r3, [r7, #8]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d80:	4b3e      	ldr	r3, [pc, #248]	; (8002e7c <HAL_RCC_OscConfig+0x57c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d118      	bne.n	8002dbe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d8c:	4b3b      	ldr	r3, [pc, #236]	; (8002e7c <HAL_RCC_OscConfig+0x57c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a3a      	ldr	r2, [pc, #232]	; (8002e7c <HAL_RCC_OscConfig+0x57c>)
 8002d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d98:	f7fe f964 	bl	8001064 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da0:	f7fe f960 	bl	8001064 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e1c1      	b.n	8003136 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002db2:	4b32      	ldr	r3, [pc, #200]	; (8002e7c <HAL_RCC_OscConfig+0x57c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0f0      	beq.n	8002da0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d108      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x4d8>
 8002dc6:	4b2c      	ldr	r3, [pc, #176]	; (8002e78 <HAL_RCC_OscConfig+0x578>)
 8002dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dcc:	4a2a      	ldr	r2, [pc, #168]	; (8002e78 <HAL_RCC_OscConfig+0x578>)
 8002dce:	f043 0301 	orr.w	r3, r3, #1
 8002dd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dd6:	e024      	b.n	8002e22 <HAL_RCC_OscConfig+0x522>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	2b05      	cmp	r3, #5
 8002dde:	d110      	bne.n	8002e02 <HAL_RCC_OscConfig+0x502>
 8002de0:	4b25      	ldr	r3, [pc, #148]	; (8002e78 <HAL_RCC_OscConfig+0x578>)
 8002de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de6:	4a24      	ldr	r2, [pc, #144]	; (8002e78 <HAL_RCC_OscConfig+0x578>)
 8002de8:	f043 0304 	orr.w	r3, r3, #4
 8002dec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002df0:	4b21      	ldr	r3, [pc, #132]	; (8002e78 <HAL_RCC_OscConfig+0x578>)
 8002df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df6:	4a20      	ldr	r2, [pc, #128]	; (8002e78 <HAL_RCC_OscConfig+0x578>)
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e00:	e00f      	b.n	8002e22 <HAL_RCC_OscConfig+0x522>
 8002e02:	4b1d      	ldr	r3, [pc, #116]	; (8002e78 <HAL_RCC_OscConfig+0x578>)
 8002e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e08:	4a1b      	ldr	r2, [pc, #108]	; (8002e78 <HAL_RCC_OscConfig+0x578>)
 8002e0a:	f023 0301 	bic.w	r3, r3, #1
 8002e0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e12:	4b19      	ldr	r3, [pc, #100]	; (8002e78 <HAL_RCC_OscConfig+0x578>)
 8002e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e18:	4a17      	ldr	r2, [pc, #92]	; (8002e78 <HAL_RCC_OscConfig+0x578>)
 8002e1a:	f023 0304 	bic.w	r3, r3, #4
 8002e1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d016      	beq.n	8002e58 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e2a:	f7fe f91b 	bl	8001064 <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e30:	e00a      	b.n	8002e48 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e32:	f7fe f917 	bl	8001064 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e176      	b.n	8003136 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e48:	4b0b      	ldr	r3, [pc, #44]	; (8002e78 <HAL_RCC_OscConfig+0x578>)
 8002e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0ed      	beq.n	8002e32 <HAL_RCC_OscConfig+0x532>
 8002e56:	e01a      	b.n	8002e8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e58:	f7fe f904 	bl	8001064 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e5e:	e00f      	b.n	8002e80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e60:	f7fe f900 	bl	8001064 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d906      	bls.n	8002e80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e15f      	b.n	8003136 <HAL_RCC_OscConfig+0x836>
 8002e76:	bf00      	nop
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e80:	4baa      	ldr	r3, [pc, #680]	; (800312c <HAL_RCC_OscConfig+0x82c>)
 8002e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1e8      	bne.n	8002e60 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e8e:	7ffb      	ldrb	r3, [r7, #31]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d105      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e94:	4ba5      	ldr	r3, [pc, #660]	; (800312c <HAL_RCC_OscConfig+0x82c>)
 8002e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e98:	4aa4      	ldr	r2, [pc, #656]	; (800312c <HAL_RCC_OscConfig+0x82c>)
 8002e9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e9e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0320 	and.w	r3, r3, #32
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d03c      	beq.n	8002f26 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d01c      	beq.n	8002eee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002eb4:	4b9d      	ldr	r3, [pc, #628]	; (800312c <HAL_RCC_OscConfig+0x82c>)
 8002eb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002eba:	4a9c      	ldr	r2, [pc, #624]	; (800312c <HAL_RCC_OscConfig+0x82c>)
 8002ebc:	f043 0301 	orr.w	r3, r3, #1
 8002ec0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec4:	f7fe f8ce 	bl	8001064 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ecc:	f7fe f8ca 	bl	8001064 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e12b      	b.n	8003136 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ede:	4b93      	ldr	r3, [pc, #588]	; (800312c <HAL_RCC_OscConfig+0x82c>)
 8002ee0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d0ef      	beq.n	8002ecc <HAL_RCC_OscConfig+0x5cc>
 8002eec:	e01b      	b.n	8002f26 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002eee:	4b8f      	ldr	r3, [pc, #572]	; (800312c <HAL_RCC_OscConfig+0x82c>)
 8002ef0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ef4:	4a8d      	ldr	r2, [pc, #564]	; (800312c <HAL_RCC_OscConfig+0x82c>)
 8002ef6:	f023 0301 	bic.w	r3, r3, #1
 8002efa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efe:	f7fe f8b1 	bl	8001064 <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f04:	e008      	b.n	8002f18 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f06:	f7fe f8ad 	bl	8001064 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e10e      	b.n	8003136 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f18:	4b84      	ldr	r3, [pc, #528]	; (800312c <HAL_RCC_OscConfig+0x82c>)
 8002f1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1ef      	bne.n	8002f06 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 8102 	beq.w	8003134 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	f040 80c5 	bne.w	80030c4 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f3a:	4b7c      	ldr	r3, [pc, #496]	; (800312c <HAL_RCC_OscConfig+0x82c>)
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	f003 0203 	and.w	r2, r3, #3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d12c      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d123      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f6a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d11b      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d113      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8a:	085b      	lsrs	r3, r3, #1
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d109      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	085b      	lsrs	r3, r3, #1
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d067      	beq.n	8003078 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	2b0c      	cmp	r3, #12
 8002fac:	d062      	beq.n	8003074 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002fae:	4b5f      	ldr	r3, [pc, #380]	; (800312c <HAL_RCC_OscConfig+0x82c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e0bb      	b.n	8003136 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002fbe:	4b5b      	ldr	r3, [pc, #364]	; (800312c <HAL_RCC_OscConfig+0x82c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a5a      	ldr	r2, [pc, #360]	; (800312c <HAL_RCC_OscConfig+0x82c>)
 8002fc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fc8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fca:	f7fe f84b 	bl	8001064 <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd2:	f7fe f847 	bl	8001064 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e0a8      	b.n	8003136 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fe4:	4b51      	ldr	r3, [pc, #324]	; (800312c <HAL_RCC_OscConfig+0x82c>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1f0      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ff0:	4b4e      	ldr	r3, [pc, #312]	; (800312c <HAL_RCC_OscConfig+0x82c>)
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	4b4e      	ldr	r3, [pc, #312]	; (8003130 <HAL_RCC_OscConfig+0x830>)
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003000:	3a01      	subs	r2, #1
 8003002:	0112      	lsls	r2, r2, #4
 8003004:	4311      	orrs	r1, r2
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800300a:	0212      	lsls	r2, r2, #8
 800300c:	4311      	orrs	r1, r2
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003012:	0852      	lsrs	r2, r2, #1
 8003014:	3a01      	subs	r2, #1
 8003016:	0552      	lsls	r2, r2, #21
 8003018:	4311      	orrs	r1, r2
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800301e:	0852      	lsrs	r2, r2, #1
 8003020:	3a01      	subs	r2, #1
 8003022:	0652      	lsls	r2, r2, #25
 8003024:	4311      	orrs	r1, r2
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800302a:	06d2      	lsls	r2, r2, #27
 800302c:	430a      	orrs	r2, r1
 800302e:	493f      	ldr	r1, [pc, #252]	; (800312c <HAL_RCC_OscConfig+0x82c>)
 8003030:	4313      	orrs	r3, r2
 8003032:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003034:	4b3d      	ldr	r3, [pc, #244]	; (800312c <HAL_RCC_OscConfig+0x82c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a3c      	ldr	r2, [pc, #240]	; (800312c <HAL_RCC_OscConfig+0x82c>)
 800303a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800303e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003040:	4b3a      	ldr	r3, [pc, #232]	; (800312c <HAL_RCC_OscConfig+0x82c>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	4a39      	ldr	r2, [pc, #228]	; (800312c <HAL_RCC_OscConfig+0x82c>)
 8003046:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800304a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800304c:	f7fe f80a 	bl	8001064 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003054:	f7fe f806 	bl	8001064 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e067      	b.n	8003136 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003066:	4b31      	ldr	r3, [pc, #196]	; (800312c <HAL_RCC_OscConfig+0x82c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0f0      	beq.n	8003054 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003072:	e05f      	b.n	8003134 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e05e      	b.n	8003136 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003078:	4b2c      	ldr	r3, [pc, #176]	; (800312c <HAL_RCC_OscConfig+0x82c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d157      	bne.n	8003134 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003084:	4b29      	ldr	r3, [pc, #164]	; (800312c <HAL_RCC_OscConfig+0x82c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a28      	ldr	r2, [pc, #160]	; (800312c <HAL_RCC_OscConfig+0x82c>)
 800308a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800308e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003090:	4b26      	ldr	r3, [pc, #152]	; (800312c <HAL_RCC_OscConfig+0x82c>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	4a25      	ldr	r2, [pc, #148]	; (800312c <HAL_RCC_OscConfig+0x82c>)
 8003096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800309a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800309c:	f7fd ffe2 	bl	8001064 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a4:	f7fd ffde 	bl	8001064 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e03f      	b.n	8003136 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030b6:	4b1d      	ldr	r3, [pc, #116]	; (800312c <HAL_RCC_OscConfig+0x82c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0f0      	beq.n	80030a4 <HAL_RCC_OscConfig+0x7a4>
 80030c2:	e037      	b.n	8003134 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	2b0c      	cmp	r3, #12
 80030c8:	d02d      	beq.n	8003126 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ca:	4b18      	ldr	r3, [pc, #96]	; (800312c <HAL_RCC_OscConfig+0x82c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a17      	ldr	r2, [pc, #92]	; (800312c <HAL_RCC_OscConfig+0x82c>)
 80030d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030d4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030d6:	4b15      	ldr	r3, [pc, #84]	; (800312c <HAL_RCC_OscConfig+0x82c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d105      	bne.n	80030ee <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80030e2:	4b12      	ldr	r3, [pc, #72]	; (800312c <HAL_RCC_OscConfig+0x82c>)
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	4a11      	ldr	r2, [pc, #68]	; (800312c <HAL_RCC_OscConfig+0x82c>)
 80030e8:	f023 0303 	bic.w	r3, r3, #3
 80030ec:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80030ee:	4b0f      	ldr	r3, [pc, #60]	; (800312c <HAL_RCC_OscConfig+0x82c>)
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	4a0e      	ldr	r2, [pc, #56]	; (800312c <HAL_RCC_OscConfig+0x82c>)
 80030f4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80030f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030fc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fe:	f7fd ffb1 	bl	8001064 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003106:	f7fd ffad 	bl	8001064 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e00e      	b.n	8003136 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003118:	4b04      	ldr	r3, [pc, #16]	; (800312c <HAL_RCC_OscConfig+0x82c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1f0      	bne.n	8003106 <HAL_RCC_OscConfig+0x806>
 8003124:	e006      	b.n	8003134 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e005      	b.n	8003136 <HAL_RCC_OscConfig+0x836>
 800312a:	bf00      	nop
 800312c:	40021000 	.word	0x40021000
 8003130:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3720      	adds	r7, #32
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop

08003140 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e0c8      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003154:	4b66      	ldr	r3, [pc, #408]	; (80032f0 <HAL_RCC_ClockConfig+0x1b0>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	429a      	cmp	r2, r3
 8003160:	d910      	bls.n	8003184 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003162:	4b63      	ldr	r3, [pc, #396]	; (80032f0 <HAL_RCC_ClockConfig+0x1b0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f023 0207 	bic.w	r2, r3, #7
 800316a:	4961      	ldr	r1, [pc, #388]	; (80032f0 <HAL_RCC_ClockConfig+0x1b0>)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	4313      	orrs	r3, r2
 8003170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003172:	4b5f      	ldr	r3, [pc, #380]	; (80032f0 <HAL_RCC_ClockConfig+0x1b0>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	429a      	cmp	r2, r3
 800317e:	d001      	beq.n	8003184 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e0b0      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	d04c      	beq.n	800322a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b03      	cmp	r3, #3
 8003196:	d107      	bne.n	80031a8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003198:	4b56      	ldr	r3, [pc, #344]	; (80032f4 <HAL_RCC_ClockConfig+0x1b4>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d121      	bne.n	80031e8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e09e      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d107      	bne.n	80031c0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031b0:	4b50      	ldr	r3, [pc, #320]	; (80032f4 <HAL_RCC_ClockConfig+0x1b4>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d115      	bne.n	80031e8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e092      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d107      	bne.n	80031d8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031c8:	4b4a      	ldr	r3, [pc, #296]	; (80032f4 <HAL_RCC_ClockConfig+0x1b4>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d109      	bne.n	80031e8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e086      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031d8:	4b46      	ldr	r3, [pc, #280]	; (80032f4 <HAL_RCC_ClockConfig+0x1b4>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e07e      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031e8:	4b42      	ldr	r3, [pc, #264]	; (80032f4 <HAL_RCC_ClockConfig+0x1b4>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f023 0203 	bic.w	r2, r3, #3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	493f      	ldr	r1, [pc, #252]	; (80032f4 <HAL_RCC_ClockConfig+0x1b4>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031fa:	f7fd ff33 	bl	8001064 <HAL_GetTick>
 80031fe:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003200:	e00a      	b.n	8003218 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003202:	f7fd ff2f 	bl	8001064 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003210:	4293      	cmp	r3, r2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e066      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003218:	4b36      	ldr	r3, [pc, #216]	; (80032f4 <HAL_RCC_ClockConfig+0x1b4>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f003 020c 	and.w	r2, r3, #12
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	429a      	cmp	r2, r3
 8003228:	d1eb      	bne.n	8003202 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d008      	beq.n	8003248 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003236:	4b2f      	ldr	r3, [pc, #188]	; (80032f4 <HAL_RCC_ClockConfig+0x1b4>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	492c      	ldr	r1, [pc, #176]	; (80032f4 <HAL_RCC_ClockConfig+0x1b4>)
 8003244:	4313      	orrs	r3, r2
 8003246:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003248:	4b29      	ldr	r3, [pc, #164]	; (80032f0 <HAL_RCC_ClockConfig+0x1b0>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	429a      	cmp	r2, r3
 8003254:	d210      	bcs.n	8003278 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003256:	4b26      	ldr	r3, [pc, #152]	; (80032f0 <HAL_RCC_ClockConfig+0x1b0>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f023 0207 	bic.w	r2, r3, #7
 800325e:	4924      	ldr	r1, [pc, #144]	; (80032f0 <HAL_RCC_ClockConfig+0x1b0>)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	4313      	orrs	r3, r2
 8003264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003266:	4b22      	ldr	r3, [pc, #136]	; (80032f0 <HAL_RCC_ClockConfig+0x1b0>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	429a      	cmp	r2, r3
 8003272:	d001      	beq.n	8003278 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e036      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	2b00      	cmp	r3, #0
 8003282:	d008      	beq.n	8003296 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003284:	4b1b      	ldr	r3, [pc, #108]	; (80032f4 <HAL_RCC_ClockConfig+0x1b4>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	4918      	ldr	r1, [pc, #96]	; (80032f4 <HAL_RCC_ClockConfig+0x1b4>)
 8003292:	4313      	orrs	r3, r2
 8003294:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d009      	beq.n	80032b6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032a2:	4b14      	ldr	r3, [pc, #80]	; (80032f4 <HAL_RCC_ClockConfig+0x1b4>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	4910      	ldr	r1, [pc, #64]	; (80032f4 <HAL_RCC_ClockConfig+0x1b4>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032b6:	f000 f825 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 80032ba:	4602      	mov	r2, r0
 80032bc:	4b0d      	ldr	r3, [pc, #52]	; (80032f4 <HAL_RCC_ClockConfig+0x1b4>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	091b      	lsrs	r3, r3, #4
 80032c2:	f003 030f 	and.w	r3, r3, #15
 80032c6:	490c      	ldr	r1, [pc, #48]	; (80032f8 <HAL_RCC_ClockConfig+0x1b8>)
 80032c8:	5ccb      	ldrb	r3, [r1, r3]
 80032ca:	f003 031f 	and.w	r3, r3, #31
 80032ce:	fa22 f303 	lsr.w	r3, r2, r3
 80032d2:	4a0a      	ldr	r2, [pc, #40]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80032d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032d6:	4b0a      	ldr	r3, [pc, #40]	; (8003300 <HAL_RCC_ClockConfig+0x1c0>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fd fe72 	bl	8000fc4 <HAL_InitTick>
 80032e0:	4603      	mov	r3, r0
 80032e2:	72fb      	strb	r3, [r7, #11]

  return status;
 80032e4:	7afb      	ldrb	r3, [r7, #11]
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	40022000 	.word	0x40022000
 80032f4:	40021000 	.word	0x40021000
 80032f8:	08005c20 	.word	0x08005c20
 80032fc:	20000000 	.word	0x20000000
 8003300:	20000004 	.word	0x20000004

08003304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003304:	b480      	push	{r7}
 8003306:	b089      	sub	sp, #36	; 0x24
 8003308:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800330a:	2300      	movs	r3, #0
 800330c:	61fb      	str	r3, [r7, #28]
 800330e:	2300      	movs	r3, #0
 8003310:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003312:	4b3e      	ldr	r3, [pc, #248]	; (800340c <HAL_RCC_GetSysClockFreq+0x108>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 030c 	and.w	r3, r3, #12
 800331a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800331c:	4b3b      	ldr	r3, [pc, #236]	; (800340c <HAL_RCC_GetSysClockFreq+0x108>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f003 0303 	and.w	r3, r3, #3
 8003324:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d005      	beq.n	8003338 <HAL_RCC_GetSysClockFreq+0x34>
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	2b0c      	cmp	r3, #12
 8003330:	d121      	bne.n	8003376 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d11e      	bne.n	8003376 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003338:	4b34      	ldr	r3, [pc, #208]	; (800340c <HAL_RCC_GetSysClockFreq+0x108>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0308 	and.w	r3, r3, #8
 8003340:	2b00      	cmp	r3, #0
 8003342:	d107      	bne.n	8003354 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003344:	4b31      	ldr	r3, [pc, #196]	; (800340c <HAL_RCC_GetSysClockFreq+0x108>)
 8003346:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800334a:	0a1b      	lsrs	r3, r3, #8
 800334c:	f003 030f 	and.w	r3, r3, #15
 8003350:	61fb      	str	r3, [r7, #28]
 8003352:	e005      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003354:	4b2d      	ldr	r3, [pc, #180]	; (800340c <HAL_RCC_GetSysClockFreq+0x108>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	091b      	lsrs	r3, r3, #4
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003360:	4a2b      	ldr	r2, [pc, #172]	; (8003410 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003368:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d10d      	bne.n	800338c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003374:	e00a      	b.n	800338c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	2b04      	cmp	r3, #4
 800337a:	d102      	bne.n	8003382 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800337c:	4b25      	ldr	r3, [pc, #148]	; (8003414 <HAL_RCC_GetSysClockFreq+0x110>)
 800337e:	61bb      	str	r3, [r7, #24]
 8003380:	e004      	b.n	800338c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	2b08      	cmp	r3, #8
 8003386:	d101      	bne.n	800338c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003388:	4b23      	ldr	r3, [pc, #140]	; (8003418 <HAL_RCC_GetSysClockFreq+0x114>)
 800338a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	2b0c      	cmp	r3, #12
 8003390:	d134      	bne.n	80033fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003392:	4b1e      	ldr	r3, [pc, #120]	; (800340c <HAL_RCC_GetSysClockFreq+0x108>)
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d003      	beq.n	80033aa <HAL_RCC_GetSysClockFreq+0xa6>
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	2b03      	cmp	r3, #3
 80033a6:	d003      	beq.n	80033b0 <HAL_RCC_GetSysClockFreq+0xac>
 80033a8:	e005      	b.n	80033b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80033aa:	4b1a      	ldr	r3, [pc, #104]	; (8003414 <HAL_RCC_GetSysClockFreq+0x110>)
 80033ac:	617b      	str	r3, [r7, #20]
      break;
 80033ae:	e005      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80033b0:	4b19      	ldr	r3, [pc, #100]	; (8003418 <HAL_RCC_GetSysClockFreq+0x114>)
 80033b2:	617b      	str	r3, [r7, #20]
      break;
 80033b4:	e002      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	617b      	str	r3, [r7, #20]
      break;
 80033ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033bc:	4b13      	ldr	r3, [pc, #76]	; (800340c <HAL_RCC_GetSysClockFreq+0x108>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	091b      	lsrs	r3, r3, #4
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	3301      	adds	r3, #1
 80033c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80033ca:	4b10      	ldr	r3, [pc, #64]	; (800340c <HAL_RCC_GetSysClockFreq+0x108>)
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	0a1b      	lsrs	r3, r3, #8
 80033d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	fb02 f203 	mul.w	r2, r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033e2:	4b0a      	ldr	r3, [pc, #40]	; (800340c <HAL_RCC_GetSysClockFreq+0x108>)
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	0e5b      	lsrs	r3, r3, #25
 80033e8:	f003 0303 	and.w	r3, r3, #3
 80033ec:	3301      	adds	r3, #1
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80033fc:	69bb      	ldr	r3, [r7, #24]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3724      	adds	r7, #36	; 0x24
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	40021000 	.word	0x40021000
 8003410:	08005c38 	.word	0x08005c38
 8003414:	00f42400 	.word	0x00f42400
 8003418:	007a1200 	.word	0x007a1200

0800341c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003420:	4b03      	ldr	r3, [pc, #12]	; (8003430 <HAL_RCC_GetHCLKFreq+0x14>)
 8003422:	681b      	ldr	r3, [r3, #0]
}
 8003424:	4618      	mov	r0, r3
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	20000000 	.word	0x20000000

08003434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003438:	f7ff fff0 	bl	800341c <HAL_RCC_GetHCLKFreq>
 800343c:	4602      	mov	r2, r0
 800343e:	4b06      	ldr	r3, [pc, #24]	; (8003458 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	0a1b      	lsrs	r3, r3, #8
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	4904      	ldr	r1, [pc, #16]	; (800345c <HAL_RCC_GetPCLK1Freq+0x28>)
 800344a:	5ccb      	ldrb	r3, [r1, r3]
 800344c:	f003 031f 	and.w	r3, r3, #31
 8003450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003454:	4618      	mov	r0, r3
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40021000 	.word	0x40021000
 800345c:	08005c30 	.word	0x08005c30

08003460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003464:	f7ff ffda 	bl	800341c <HAL_RCC_GetHCLKFreq>
 8003468:	4602      	mov	r2, r0
 800346a:	4b06      	ldr	r3, [pc, #24]	; (8003484 <HAL_RCC_GetPCLK2Freq+0x24>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	0adb      	lsrs	r3, r3, #11
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	4904      	ldr	r1, [pc, #16]	; (8003488 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003476:	5ccb      	ldrb	r3, [r1, r3]
 8003478:	f003 031f 	and.w	r3, r3, #31
 800347c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003480:	4618      	mov	r0, r3
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40021000 	.word	0x40021000
 8003488:	08005c30 	.word	0x08005c30

0800348c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003494:	2300      	movs	r3, #0
 8003496:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003498:	4b2a      	ldr	r3, [pc, #168]	; (8003544 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800349a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800349c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80034a4:	f7ff f9c8 	bl	8002838 <HAL_PWREx_GetVoltageRange>
 80034a8:	6178      	str	r0, [r7, #20]
 80034aa:	e014      	b.n	80034d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80034ac:	4b25      	ldr	r3, [pc, #148]	; (8003544 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b0:	4a24      	ldr	r2, [pc, #144]	; (8003544 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034b6:	6593      	str	r3, [r2, #88]	; 0x58
 80034b8:	4b22      	ldr	r3, [pc, #136]	; (8003544 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80034c4:	f7ff f9b8 	bl	8002838 <HAL_PWREx_GetVoltageRange>
 80034c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80034ca:	4b1e      	ldr	r3, [pc, #120]	; (8003544 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ce:	4a1d      	ldr	r2, [pc, #116]	; (8003544 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034dc:	d10b      	bne.n	80034f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2b80      	cmp	r3, #128	; 0x80
 80034e2:	d919      	bls.n	8003518 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2ba0      	cmp	r3, #160	; 0xa0
 80034e8:	d902      	bls.n	80034f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034ea:	2302      	movs	r3, #2
 80034ec:	613b      	str	r3, [r7, #16]
 80034ee:	e013      	b.n	8003518 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034f0:	2301      	movs	r3, #1
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	e010      	b.n	8003518 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b80      	cmp	r3, #128	; 0x80
 80034fa:	d902      	bls.n	8003502 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80034fc:	2303      	movs	r3, #3
 80034fe:	613b      	str	r3, [r7, #16]
 8003500:	e00a      	b.n	8003518 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2b80      	cmp	r3, #128	; 0x80
 8003506:	d102      	bne.n	800350e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003508:	2302      	movs	r3, #2
 800350a:	613b      	str	r3, [r7, #16]
 800350c:	e004      	b.n	8003518 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2b70      	cmp	r3, #112	; 0x70
 8003512:	d101      	bne.n	8003518 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003514:	2301      	movs	r3, #1
 8003516:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003518:	4b0b      	ldr	r3, [pc, #44]	; (8003548 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f023 0207 	bic.w	r2, r3, #7
 8003520:	4909      	ldr	r1, [pc, #36]	; (8003548 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	4313      	orrs	r3, r2
 8003526:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003528:	4b07      	ldr	r3, [pc, #28]	; (8003548 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	429a      	cmp	r2, r3
 8003534:	d001      	beq.n	800353a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e000      	b.n	800353c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40021000 	.word	0x40021000
 8003548:	40022000 	.word	0x40022000

0800354c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003554:	2300      	movs	r3, #0
 8003556:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003558:	2300      	movs	r3, #0
 800355a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003564:	2b00      	cmp	r3, #0
 8003566:	d031      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003570:	d01a      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003572:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003576:	d814      	bhi.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003578:	2b00      	cmp	r3, #0
 800357a:	d009      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800357c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003580:	d10f      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003582:	4bac      	ldr	r3, [pc, #688]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	4aab      	ldr	r2, [pc, #684]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800358c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800358e:	e00c      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3304      	adds	r3, #4
 8003594:	2100      	movs	r1, #0
 8003596:	4618      	mov	r0, r3
 8003598:	f000 f9dc 	bl	8003954 <RCCEx_PLLSAI1_Config>
 800359c:	4603      	mov	r3, r0
 800359e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035a0:	e003      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	74fb      	strb	r3, [r7, #19]
      break;
 80035a6:	e000      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80035a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035aa:	7cfb      	ldrb	r3, [r7, #19]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10b      	bne.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035b0:	4ba0      	ldr	r3, [pc, #640]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80035b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035be:	499d      	ldr	r1, [pc, #628]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80035c6:	e001      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c8:	7cfb      	ldrb	r3, [r7, #19]
 80035ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 8099 	beq.w	800370c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035da:	2300      	movs	r3, #0
 80035dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035de:	4b95      	ldr	r3, [pc, #596]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80035e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80035ea:	2301      	movs	r3, #1
 80035ec:	e000      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80035ee:	2300      	movs	r3, #0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00d      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035f4:	4b8f      	ldr	r3, [pc, #572]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80035f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f8:	4a8e      	ldr	r2, [pc, #568]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80035fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035fe:	6593      	str	r3, [r2, #88]	; 0x58
 8003600:	4b8c      	ldr	r3, [pc, #560]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003608:	60bb      	str	r3, [r7, #8]
 800360a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800360c:	2301      	movs	r3, #1
 800360e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003610:	4b89      	ldr	r3, [pc, #548]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a88      	ldr	r2, [pc, #544]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800361a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800361c:	f7fd fd22 	bl	8001064 <HAL_GetTick>
 8003620:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003622:	e009      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003624:	f7fd fd1e 	bl	8001064 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d902      	bls.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	74fb      	strb	r3, [r7, #19]
        break;
 8003636:	e005      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003638:	4b7f      	ldr	r3, [pc, #508]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003640:	2b00      	cmp	r3, #0
 8003642:	d0ef      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003644:	7cfb      	ldrb	r3, [r7, #19]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d155      	bne.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800364a:	4b7a      	ldr	r3, [pc, #488]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800364c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003650:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003654:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d01e      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	429a      	cmp	r2, r3
 8003664:	d019      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003666:	4b73      	ldr	r3, [pc, #460]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003670:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003672:	4b70      	ldr	r3, [pc, #448]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003678:	4a6e      	ldr	r2, [pc, #440]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800367a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800367e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003682:	4b6c      	ldr	r3, [pc, #432]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003688:	4a6a      	ldr	r2, [pc, #424]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800368a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800368e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003692:	4a68      	ldr	r2, [pc, #416]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d016      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a4:	f7fd fcde 	bl	8001064 <HAL_GetTick>
 80036a8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036aa:	e00b      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ac:	f7fd fcda 	bl	8001064 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d902      	bls.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	74fb      	strb	r3, [r7, #19]
            break;
 80036c2:	e006      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036c4:	4b5b      	ldr	r3, [pc, #364]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80036c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d0ec      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80036d2:	7cfb      	ldrb	r3, [r7, #19]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10b      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036d8:	4b56      	ldr	r3, [pc, #344]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80036da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e6:	4953      	ldr	r1, [pc, #332]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80036ee:	e004      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036f0:	7cfb      	ldrb	r3, [r7, #19]
 80036f2:	74bb      	strb	r3, [r7, #18]
 80036f4:	e001      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f6:	7cfb      	ldrb	r3, [r7, #19]
 80036f8:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036fa:	7c7b      	ldrb	r3, [r7, #17]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d105      	bne.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003700:	4b4c      	ldr	r3, [pc, #304]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003704:	4a4b      	ldr	r2, [pc, #300]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003706:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800370a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00a      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003718:	4b46      	ldr	r3, [pc, #280]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800371a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371e:	f023 0203 	bic.w	r2, r3, #3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	4943      	ldr	r1, [pc, #268]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003728:	4313      	orrs	r3, r2
 800372a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00a      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800373a:	4b3e      	ldr	r3, [pc, #248]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800373c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003740:	f023 020c 	bic.w	r2, r3, #12
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	493a      	ldr	r1, [pc, #232]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800374a:	4313      	orrs	r3, r2
 800374c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0320 	and.w	r3, r3, #32
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00a      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800375c:	4b35      	ldr	r3, [pc, #212]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800375e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003762:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376a:	4932      	ldr	r1, [pc, #200]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800376c:	4313      	orrs	r3, r2
 800376e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00a      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800377e:	4b2d      	ldr	r3, [pc, #180]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003784:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800378c:	4929      	ldr	r1, [pc, #164]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800378e:	4313      	orrs	r3, r2
 8003790:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00a      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037a0:	4b24      	ldr	r3, [pc, #144]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ae:	4921      	ldr	r1, [pc, #132]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00a      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037c2:	4b1c      	ldr	r3, [pc, #112]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d0:	4918      	ldr	r1, [pc, #96]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00a      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037e4:	4b13      	ldr	r3, [pc, #76]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	4910      	ldr	r1, [pc, #64]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d02c      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003806:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003814:	4907      	ldr	r1, [pc, #28]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003816:	4313      	orrs	r3, r2
 8003818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003820:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003824:	d10a      	bne.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003826:	4b03      	ldr	r3, [pc, #12]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	4a02      	ldr	r2, [pc, #8]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800382c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003830:	60d3      	str	r3, [r2, #12]
 8003832:	e015      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003834:	40021000 	.word	0x40021000
 8003838:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003840:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003844:	d10c      	bne.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	3304      	adds	r3, #4
 800384a:	2101      	movs	r1, #1
 800384c:	4618      	mov	r0, r3
 800384e:	f000 f881 	bl	8003954 <RCCEx_PLLSAI1_Config>
 8003852:	4603      	mov	r3, r0
 8003854:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003856:	7cfb      	ldrb	r3, [r7, #19]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 800385c:	7cfb      	ldrb	r3, [r7, #19]
 800385e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d028      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800386c:	4b30      	ldr	r3, [pc, #192]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800386e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003872:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	492d      	ldr	r1, [pc, #180]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800387c:	4313      	orrs	r3, r2
 800387e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003886:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800388a:	d106      	bne.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800388c:	4b28      	ldr	r3, [pc, #160]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	4a27      	ldr	r2, [pc, #156]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003892:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003896:	60d3      	str	r3, [r2, #12]
 8003898:	e011      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038a2:	d10c      	bne.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	3304      	adds	r3, #4
 80038a8:	2101      	movs	r1, #1
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 f852 	bl	8003954 <RCCEx_PLLSAI1_Config>
 80038b0:	4603      	mov	r3, r0
 80038b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038b4:	7cfb      	ldrb	r3, [r7, #19]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 80038ba:	7cfb      	ldrb	r3, [r7, #19]
 80038bc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d01c      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038ca:	4b19      	ldr	r3, [pc, #100]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038d8:	4915      	ldr	r1, [pc, #84]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038e8:	d10c      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	3304      	adds	r3, #4
 80038ee:	2102      	movs	r1, #2
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 f82f 	bl	8003954 <RCCEx_PLLSAI1_Config>
 80038f6:	4603      	mov	r3, r0
 80038f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038fa:	7cfb      	ldrb	r3, [r7, #19]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003900:	7cfb      	ldrb	r3, [r7, #19]
 8003902:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00a      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003910:	4b07      	ldr	r3, [pc, #28]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003916:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391e:	4904      	ldr	r1, [pc, #16]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003920:	4313      	orrs	r3, r2
 8003922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003926:	7cbb      	ldrb	r3, [r7, #18]
}
 8003928:	4618      	mov	r0, r3
 800392a:	3718      	adds	r7, #24
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40021000 	.word	0x40021000

08003934 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003938:	4b05      	ldr	r3, [pc, #20]	; (8003950 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a04      	ldr	r2, [pc, #16]	; (8003950 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800393e:	f043 0304 	orr.w	r3, r3, #4
 8003942:	6013      	str	r3, [r2, #0]
}
 8003944:	bf00      	nop
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	40021000 	.word	0x40021000

08003954 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800395e:	2300      	movs	r3, #0
 8003960:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003962:	4b74      	ldr	r3, [pc, #464]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d018      	beq.n	80039a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800396e:	4b71      	ldr	r3, [pc, #452]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	f003 0203 	and.w	r2, r3, #3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	429a      	cmp	r2, r3
 800397c:	d10d      	bne.n	800399a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
       ||
 8003982:	2b00      	cmp	r3, #0
 8003984:	d009      	beq.n	800399a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003986:	4b6b      	ldr	r3, [pc, #428]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	091b      	lsrs	r3, r3, #4
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	1c5a      	adds	r2, r3, #1
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
       ||
 8003996:	429a      	cmp	r2, r3
 8003998:	d047      	beq.n	8003a2a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	73fb      	strb	r3, [r7, #15]
 800399e:	e044      	b.n	8003a2a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2b03      	cmp	r3, #3
 80039a6:	d018      	beq.n	80039da <RCCEx_PLLSAI1_Config+0x86>
 80039a8:	2b03      	cmp	r3, #3
 80039aa:	d825      	bhi.n	80039f8 <RCCEx_PLLSAI1_Config+0xa4>
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d002      	beq.n	80039b6 <RCCEx_PLLSAI1_Config+0x62>
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d009      	beq.n	80039c8 <RCCEx_PLLSAI1_Config+0x74>
 80039b4:	e020      	b.n	80039f8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039b6:	4b5f      	ldr	r3, [pc, #380]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d11d      	bne.n	80039fe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039c6:	e01a      	b.n	80039fe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039c8:	4b5a      	ldr	r3, [pc, #360]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d116      	bne.n	8003a02 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039d8:	e013      	b.n	8003a02 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039da:	4b56      	ldr	r3, [pc, #344]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10f      	bne.n	8003a06 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039e6:	4b53      	ldr	r3, [pc, #332]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d109      	bne.n	8003a06 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039f6:	e006      	b.n	8003a06 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	73fb      	strb	r3, [r7, #15]
      break;
 80039fc:	e004      	b.n	8003a08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039fe:	bf00      	nop
 8003a00:	e002      	b.n	8003a08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a02:	bf00      	nop
 8003a04:	e000      	b.n	8003a08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a06:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a08:	7bfb      	ldrb	r3, [r7, #15]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10d      	bne.n	8003a2a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a0e:	4b49      	ldr	r3, [pc, #292]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6819      	ldr	r1, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	011b      	lsls	r3, r3, #4
 8003a22:	430b      	orrs	r3, r1
 8003a24:	4943      	ldr	r1, [pc, #268]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a2a:	7bfb      	ldrb	r3, [r7, #15]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d17c      	bne.n	8003b2a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a30:	4b40      	ldr	r3, [pc, #256]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a3f      	ldr	r2, [pc, #252]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a36:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a3c:	f7fd fb12 	bl	8001064 <HAL_GetTick>
 8003a40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a42:	e009      	b.n	8003a58 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a44:	f7fd fb0e 	bl	8001064 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d902      	bls.n	8003a58 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	73fb      	strb	r3, [r7, #15]
        break;
 8003a56:	e005      	b.n	8003a64 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a58:	4b36      	ldr	r3, [pc, #216]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1ef      	bne.n	8003a44 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d15f      	bne.n	8003b2a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d110      	bne.n	8003a92 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a70:	4b30      	ldr	r3, [pc, #192]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003a78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6892      	ldr	r2, [r2, #8]
 8003a80:	0211      	lsls	r1, r2, #8
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	68d2      	ldr	r2, [r2, #12]
 8003a86:	06d2      	lsls	r2, r2, #27
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	492a      	ldr	r1, [pc, #168]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	610b      	str	r3, [r1, #16]
 8003a90:	e027      	b.n	8003ae2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d112      	bne.n	8003abe <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a98:	4b26      	ldr	r3, [pc, #152]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003aa0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6892      	ldr	r2, [r2, #8]
 8003aa8:	0211      	lsls	r1, r2, #8
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	6912      	ldr	r2, [r2, #16]
 8003aae:	0852      	lsrs	r2, r2, #1
 8003ab0:	3a01      	subs	r2, #1
 8003ab2:	0552      	lsls	r2, r2, #21
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	491f      	ldr	r1, [pc, #124]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	610b      	str	r3, [r1, #16]
 8003abc:	e011      	b.n	8003ae2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003abe:	4b1d      	ldr	r3, [pc, #116]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ac6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6892      	ldr	r2, [r2, #8]
 8003ace:	0211      	lsls	r1, r2, #8
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6952      	ldr	r2, [r2, #20]
 8003ad4:	0852      	lsrs	r2, r2, #1
 8003ad6:	3a01      	subs	r2, #1
 8003ad8:	0652      	lsls	r2, r2, #25
 8003ada:	430a      	orrs	r2, r1
 8003adc:	4915      	ldr	r1, [pc, #84]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ae2:	4b14      	ldr	r3, [pc, #80]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a13      	ldr	r2, [pc, #76]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ae8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003aec:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aee:	f7fd fab9 	bl	8001064 <HAL_GetTick>
 8003af2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003af4:	e009      	b.n	8003b0a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003af6:	f7fd fab5 	bl	8001064 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d902      	bls.n	8003b0a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	73fb      	strb	r3, [r7, #15]
          break;
 8003b08:	e005      	b.n	8003b16 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b0a:	4b0a      	ldr	r3, [pc, #40]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0ef      	beq.n	8003af6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003b16:	7bfb      	ldrb	r3, [r7, #15]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d106      	bne.n	8003b2a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b1c:	4b05      	ldr	r3, [pc, #20]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b1e:	691a      	ldr	r2, [r3, #16]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	4903      	ldr	r1, [pc, #12]	; (8003b34 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	40021000 	.word	0x40021000

08003b38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e049      	b.n	8003bde <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d106      	bne.n	8003b64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7fd f912 	bl	8000d88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2202      	movs	r2, #2
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3304      	adds	r3, #4
 8003b74:	4619      	mov	r1, r3
 8003b76:	4610      	mov	r0, r2
 8003b78:	f000 fa6c 	bl	8004054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b082      	sub	sp, #8
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d101      	bne.n	8003bf8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e049      	b.n	8003c8c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d106      	bne.n	8003c12 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f841 	bl	8003c94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2202      	movs	r2, #2
 8003c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	3304      	adds	r3, #4
 8003c22:	4619      	mov	r1, r3
 8003c24:	4610      	mov	r0, r2
 8003c26:	f000 fa15 	bl	8004054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d101      	bne.n	8003cc2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	e0fd      	b.n	8003ebe <HAL_TIM_PWM_ConfigChannel+0x216>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b14      	cmp	r3, #20
 8003cce:	f200 80f0 	bhi.w	8003eb2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8003cd2:	a201      	add	r2, pc, #4	; (adr r2, 8003cd8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd8:	08003d2d 	.word	0x08003d2d
 8003cdc:	08003eb3 	.word	0x08003eb3
 8003ce0:	08003eb3 	.word	0x08003eb3
 8003ce4:	08003eb3 	.word	0x08003eb3
 8003ce8:	08003d6d 	.word	0x08003d6d
 8003cec:	08003eb3 	.word	0x08003eb3
 8003cf0:	08003eb3 	.word	0x08003eb3
 8003cf4:	08003eb3 	.word	0x08003eb3
 8003cf8:	08003daf 	.word	0x08003daf
 8003cfc:	08003eb3 	.word	0x08003eb3
 8003d00:	08003eb3 	.word	0x08003eb3
 8003d04:	08003eb3 	.word	0x08003eb3
 8003d08:	08003def 	.word	0x08003def
 8003d0c:	08003eb3 	.word	0x08003eb3
 8003d10:	08003eb3 	.word	0x08003eb3
 8003d14:	08003eb3 	.word	0x08003eb3
 8003d18:	08003e31 	.word	0x08003e31
 8003d1c:	08003eb3 	.word	0x08003eb3
 8003d20:	08003eb3 	.word	0x08003eb3
 8003d24:	08003eb3 	.word	0x08003eb3
 8003d28:	08003e71 	.word	0x08003e71
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68b9      	ldr	r1, [r7, #8]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 f9f2 	bl	800411c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699a      	ldr	r2, [r3, #24]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0208 	orr.w	r2, r2, #8
 8003d46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699a      	ldr	r2, [r3, #24]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 0204 	bic.w	r2, r2, #4
 8003d56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6999      	ldr	r1, [r3, #24]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	691a      	ldr	r2, [r3, #16]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	619a      	str	r2, [r3, #24]
      break;
 8003d6a:	e0a3      	b.n	8003eb4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68b9      	ldr	r1, [r7, #8]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 fa4e 	bl	8004214 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699a      	ldr	r2, [r3, #24]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699a      	ldr	r2, [r3, #24]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6999      	ldr	r1, [r3, #24]
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	021a      	lsls	r2, r3, #8
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	619a      	str	r2, [r3, #24]
      break;
 8003dac:	e082      	b.n	8003eb4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68b9      	ldr	r1, [r7, #8]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f000 faa7 	bl	8004308 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	69da      	ldr	r2, [r3, #28]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f042 0208 	orr.w	r2, r2, #8
 8003dc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	69da      	ldr	r2, [r3, #28]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0204 	bic.w	r2, r2, #4
 8003dd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	69d9      	ldr	r1, [r3, #28]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	691a      	ldr	r2, [r3, #16]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	61da      	str	r2, [r3, #28]
      break;
 8003dec:	e062      	b.n	8003eb4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68b9      	ldr	r1, [r7, #8]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 faff 	bl	80043f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	69da      	ldr	r2, [r3, #28]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	69da      	ldr	r2, [r3, #28]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	69d9      	ldr	r1, [r3, #28]
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	021a      	lsls	r2, r3, #8
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	61da      	str	r2, [r3, #28]
      break;
 8003e2e:	e041      	b.n	8003eb4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68b9      	ldr	r1, [r7, #8]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 fb3c 	bl	80044b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0208 	orr.w	r2, r2, #8
 8003e4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 0204 	bic.w	r2, r2, #4
 8003e5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	691a      	ldr	r2, [r3, #16]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003e6e:	e021      	b.n	8003eb4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68b9      	ldr	r1, [r7, #8]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 fb74 	bl	8004564 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e9a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	021a      	lsls	r2, r3, #8
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	430a      	orrs	r2, r1
 8003eae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003eb0:	e000      	b.n	8003eb4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8003eb2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop

08003ec8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d101      	bne.n	8003ee0 <HAL_TIM_ConfigClockSource+0x18>
 8003edc:	2302      	movs	r3, #2
 8003ede:	e0b5      	b.n	800404c <HAL_TIM_ConfigClockSource+0x184>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2202      	movs	r2, #2
 8003eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003efe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f0a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f1c:	d03e      	beq.n	8003f9c <HAL_TIM_ConfigClockSource+0xd4>
 8003f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f22:	f200 8087 	bhi.w	8004034 <HAL_TIM_ConfigClockSource+0x16c>
 8003f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f2a:	f000 8085 	beq.w	8004038 <HAL_TIM_ConfigClockSource+0x170>
 8003f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f32:	d87f      	bhi.n	8004034 <HAL_TIM_ConfigClockSource+0x16c>
 8003f34:	2b70      	cmp	r3, #112	; 0x70
 8003f36:	d01a      	beq.n	8003f6e <HAL_TIM_ConfigClockSource+0xa6>
 8003f38:	2b70      	cmp	r3, #112	; 0x70
 8003f3a:	d87b      	bhi.n	8004034 <HAL_TIM_ConfigClockSource+0x16c>
 8003f3c:	2b60      	cmp	r3, #96	; 0x60
 8003f3e:	d050      	beq.n	8003fe2 <HAL_TIM_ConfigClockSource+0x11a>
 8003f40:	2b60      	cmp	r3, #96	; 0x60
 8003f42:	d877      	bhi.n	8004034 <HAL_TIM_ConfigClockSource+0x16c>
 8003f44:	2b50      	cmp	r3, #80	; 0x50
 8003f46:	d03c      	beq.n	8003fc2 <HAL_TIM_ConfigClockSource+0xfa>
 8003f48:	2b50      	cmp	r3, #80	; 0x50
 8003f4a:	d873      	bhi.n	8004034 <HAL_TIM_ConfigClockSource+0x16c>
 8003f4c:	2b40      	cmp	r3, #64	; 0x40
 8003f4e:	d058      	beq.n	8004002 <HAL_TIM_ConfigClockSource+0x13a>
 8003f50:	2b40      	cmp	r3, #64	; 0x40
 8003f52:	d86f      	bhi.n	8004034 <HAL_TIM_ConfigClockSource+0x16c>
 8003f54:	2b30      	cmp	r3, #48	; 0x30
 8003f56:	d064      	beq.n	8004022 <HAL_TIM_ConfigClockSource+0x15a>
 8003f58:	2b30      	cmp	r3, #48	; 0x30
 8003f5a:	d86b      	bhi.n	8004034 <HAL_TIM_ConfigClockSource+0x16c>
 8003f5c:	2b20      	cmp	r3, #32
 8003f5e:	d060      	beq.n	8004022 <HAL_TIM_ConfigClockSource+0x15a>
 8003f60:	2b20      	cmp	r3, #32
 8003f62:	d867      	bhi.n	8004034 <HAL_TIM_ConfigClockSource+0x16c>
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d05c      	beq.n	8004022 <HAL_TIM_ConfigClockSource+0x15a>
 8003f68:	2b10      	cmp	r3, #16
 8003f6a:	d05a      	beq.n	8004022 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003f6c:	e062      	b.n	8004034 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6818      	ldr	r0, [r3, #0]
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	6899      	ldr	r1, [r3, #8]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	f000 fbc5 	bl	800470c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f90:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	609a      	str	r2, [r3, #8]
      break;
 8003f9a:	e04e      	b.n	800403a <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6818      	ldr	r0, [r3, #0]
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	6899      	ldr	r1, [r3, #8]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	f000 fbae 	bl	800470c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689a      	ldr	r2, [r3, #8]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fbe:	609a      	str	r2, [r3, #8]
      break;
 8003fc0:	e03b      	b.n	800403a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6818      	ldr	r0, [r3, #0]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	6859      	ldr	r1, [r3, #4]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	f000 fb22 	bl	8004618 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2150      	movs	r1, #80	; 0x50
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 fb7b 	bl	80046d6 <TIM_ITRx_SetConfig>
      break;
 8003fe0:	e02b      	b.n	800403a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6818      	ldr	r0, [r3, #0]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	6859      	ldr	r1, [r3, #4]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	f000 fb41 	bl	8004676 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2160      	movs	r1, #96	; 0x60
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 fb6b 	bl	80046d6 <TIM_ITRx_SetConfig>
      break;
 8004000:	e01b      	b.n	800403a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6818      	ldr	r0, [r3, #0]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	6859      	ldr	r1, [r3, #4]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	461a      	mov	r2, r3
 8004010:	f000 fb02 	bl	8004618 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2140      	movs	r1, #64	; 0x40
 800401a:	4618      	mov	r0, r3
 800401c:	f000 fb5b 	bl	80046d6 <TIM_ITRx_SetConfig>
      break;
 8004020:	e00b      	b.n	800403a <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4619      	mov	r1, r3
 800402c:	4610      	mov	r0, r2
 800402e:	f000 fb52 	bl	80046d6 <TIM_ITRx_SetConfig>
        break;
 8004032:	e002      	b.n	800403a <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004034:	bf00      	nop
 8004036:	e000      	b.n	800403a <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004038:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a2a      	ldr	r2, [pc, #168]	; (8004110 <TIM_Base_SetConfig+0xbc>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d003      	beq.n	8004074 <TIM_Base_SetConfig+0x20>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004072:	d108      	bne.n	8004086 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800407a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	4313      	orrs	r3, r2
 8004084:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a21      	ldr	r2, [pc, #132]	; (8004110 <TIM_Base_SetConfig+0xbc>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d00b      	beq.n	80040a6 <TIM_Base_SetConfig+0x52>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004094:	d007      	beq.n	80040a6 <TIM_Base_SetConfig+0x52>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a1e      	ldr	r2, [pc, #120]	; (8004114 <TIM_Base_SetConfig+0xc0>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d003      	beq.n	80040a6 <TIM_Base_SetConfig+0x52>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a1d      	ldr	r2, [pc, #116]	; (8004118 <TIM_Base_SetConfig+0xc4>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d108      	bne.n	80040b8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a0c      	ldr	r2, [pc, #48]	; (8004110 <TIM_Base_SetConfig+0xbc>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d007      	beq.n	80040f4 <TIM_Base_SetConfig+0xa0>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a0b      	ldr	r2, [pc, #44]	; (8004114 <TIM_Base_SetConfig+0xc0>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d003      	beq.n	80040f4 <TIM_Base_SetConfig+0xa0>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a0a      	ldr	r2, [pc, #40]	; (8004118 <TIM_Base_SetConfig+0xc4>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d103      	bne.n	80040fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	691a      	ldr	r2, [r3, #16]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	615a      	str	r2, [r3, #20]
}
 8004102:	bf00      	nop
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	40012c00 	.word	0x40012c00
 8004114:	40014000 	.word	0x40014000
 8004118:	40014400 	.word	0x40014400

0800411c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800411c:	b480      	push	{r7}
 800411e:	b087      	sub	sp, #28
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	f023 0201 	bic.w	r2, r3, #1
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800414a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800414e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f023 0303 	bic.w	r3, r3, #3
 8004156:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	4313      	orrs	r3, r2
 8004160:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f023 0302 	bic.w	r3, r3, #2
 8004168:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	4313      	orrs	r3, r2
 8004172:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a24      	ldr	r2, [pc, #144]	; (8004208 <TIM_OC1_SetConfig+0xec>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d007      	beq.n	800418c <TIM_OC1_SetConfig+0x70>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a23      	ldr	r2, [pc, #140]	; (800420c <TIM_OC1_SetConfig+0xf0>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d003      	beq.n	800418c <TIM_OC1_SetConfig+0x70>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a22      	ldr	r2, [pc, #136]	; (8004210 <TIM_OC1_SetConfig+0xf4>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d10c      	bne.n	80041a6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f023 0308 	bic.w	r3, r3, #8
 8004192:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	4313      	orrs	r3, r2
 800419c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f023 0304 	bic.w	r3, r3, #4
 80041a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a17      	ldr	r2, [pc, #92]	; (8004208 <TIM_OC1_SetConfig+0xec>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d007      	beq.n	80041be <TIM_OC1_SetConfig+0xa2>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a16      	ldr	r2, [pc, #88]	; (800420c <TIM_OC1_SetConfig+0xf0>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d003      	beq.n	80041be <TIM_OC1_SetConfig+0xa2>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a15      	ldr	r2, [pc, #84]	; (8004210 <TIM_OC1_SetConfig+0xf4>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d111      	bne.n	80041e2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	4313      	orrs	r3, r2
 80041e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	621a      	str	r2, [r3, #32]
}
 80041fc:	bf00      	nop
 80041fe:	371c      	adds	r7, #28
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	40012c00 	.word	0x40012c00
 800420c:	40014000 	.word	0x40014000
 8004210:	40014400 	.word	0x40014400

08004214 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004214:	b480      	push	{r7}
 8004216:	b087      	sub	sp, #28
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	f023 0210 	bic.w	r2, r3, #16
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800424e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	021b      	lsls	r3, r3, #8
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	4313      	orrs	r3, r2
 800425a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f023 0320 	bic.w	r3, r3, #32
 8004262:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	011b      	lsls	r3, r3, #4
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	4313      	orrs	r3, r2
 800426e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a22      	ldr	r2, [pc, #136]	; (80042fc <TIM_OC2_SetConfig+0xe8>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d10d      	bne.n	8004294 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800427e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	4313      	orrs	r3, r2
 800428a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004292:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a19      	ldr	r2, [pc, #100]	; (80042fc <TIM_OC2_SetConfig+0xe8>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d007      	beq.n	80042ac <TIM_OC2_SetConfig+0x98>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a18      	ldr	r2, [pc, #96]	; (8004300 <TIM_OC2_SetConfig+0xec>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d003      	beq.n	80042ac <TIM_OC2_SetConfig+0x98>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a17      	ldr	r2, [pc, #92]	; (8004304 <TIM_OC2_SetConfig+0xf0>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d113      	bne.n	80042d4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	621a      	str	r2, [r3, #32]
}
 80042ee:	bf00      	nop
 80042f0:	371c      	adds	r7, #28
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	40012c00 	.word	0x40012c00
 8004300:	40014000 	.word	0x40014000
 8004304:	40014400 	.word	0x40014400

08004308 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004308:	b480      	push	{r7}
 800430a:	b087      	sub	sp, #28
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800433a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f023 0303 	bic.w	r3, r3, #3
 8004342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	4313      	orrs	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004354:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	021b      	lsls	r3, r3, #8
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	4313      	orrs	r3, r2
 8004360:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a21      	ldr	r2, [pc, #132]	; (80043ec <TIM_OC3_SetConfig+0xe4>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d10d      	bne.n	8004386 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004370:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	021b      	lsls	r3, r3, #8
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	4313      	orrs	r3, r2
 800437c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004384:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a18      	ldr	r2, [pc, #96]	; (80043ec <TIM_OC3_SetConfig+0xe4>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d007      	beq.n	800439e <TIM_OC3_SetConfig+0x96>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a17      	ldr	r2, [pc, #92]	; (80043f0 <TIM_OC3_SetConfig+0xe8>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d003      	beq.n	800439e <TIM_OC3_SetConfig+0x96>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a16      	ldr	r2, [pc, #88]	; (80043f4 <TIM_OC3_SetConfig+0xec>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d113      	bne.n	80043c6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	011b      	lsls	r3, r3, #4
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	621a      	str	r2, [r3, #32]
}
 80043e0:	bf00      	nop
 80043e2:	371c      	adds	r7, #28
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	40012c00 	.word	0x40012c00
 80043f0:	40014000 	.word	0x40014000
 80043f4:	40014400 	.word	0x40014400

080043f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b087      	sub	sp, #28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800442a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004432:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	021b      	lsls	r3, r3, #8
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	4313      	orrs	r3, r2
 800443e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004446:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	031b      	lsls	r3, r3, #12
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	4313      	orrs	r3, r2
 8004452:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a14      	ldr	r2, [pc, #80]	; (80044a8 <TIM_OC4_SetConfig+0xb0>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d007      	beq.n	800446c <TIM_OC4_SetConfig+0x74>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a13      	ldr	r2, [pc, #76]	; (80044ac <TIM_OC4_SetConfig+0xb4>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d003      	beq.n	800446c <TIM_OC4_SetConfig+0x74>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a12      	ldr	r2, [pc, #72]	; (80044b0 <TIM_OC4_SetConfig+0xb8>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d109      	bne.n	8004480 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004472:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	019b      	lsls	r3, r3, #6
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	4313      	orrs	r3, r2
 800447e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	621a      	str	r2, [r3, #32]
}
 800449a:	bf00      	nop
 800449c:	371c      	adds	r7, #28
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	40012c00 	.word	0x40012c00
 80044ac:	40014000 	.word	0x40014000
 80044b0:	40014400 	.word	0x40014400

080044b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b087      	sub	sp, #28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80044f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	041b      	lsls	r3, r3, #16
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	4313      	orrs	r3, r2
 8004504:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a13      	ldr	r2, [pc, #76]	; (8004558 <TIM_OC5_SetConfig+0xa4>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d007      	beq.n	800451e <TIM_OC5_SetConfig+0x6a>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a12      	ldr	r2, [pc, #72]	; (800455c <TIM_OC5_SetConfig+0xa8>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d003      	beq.n	800451e <TIM_OC5_SetConfig+0x6a>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a11      	ldr	r2, [pc, #68]	; (8004560 <TIM_OC5_SetConfig+0xac>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d109      	bne.n	8004532 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004524:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	021b      	lsls	r3, r3, #8
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	4313      	orrs	r3, r2
 8004530:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	621a      	str	r2, [r3, #32]
}
 800454c:	bf00      	nop
 800454e:	371c      	adds	r7, #28
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	40012c00 	.word	0x40012c00
 800455c:	40014000 	.word	0x40014000
 8004560:	40014400 	.word	0x40014400

08004564 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004564:	b480      	push	{r7}
 8004566:	b087      	sub	sp, #28
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	021b      	lsls	r3, r3, #8
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80045aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	051b      	lsls	r3, r3, #20
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a14      	ldr	r2, [pc, #80]	; (800460c <TIM_OC6_SetConfig+0xa8>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d007      	beq.n	80045d0 <TIM_OC6_SetConfig+0x6c>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a13      	ldr	r2, [pc, #76]	; (8004610 <TIM_OC6_SetConfig+0xac>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d003      	beq.n	80045d0 <TIM_OC6_SetConfig+0x6c>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a12      	ldr	r2, [pc, #72]	; (8004614 <TIM_OC6_SetConfig+0xb0>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d109      	bne.n	80045e4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	029b      	lsls	r3, r3, #10
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685a      	ldr	r2, [r3, #4]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	621a      	str	r2, [r3, #32]
}
 80045fe:	bf00      	nop
 8004600:	371c      	adds	r7, #28
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	40012c00 	.word	0x40012c00
 8004610:	40014000 	.word	0x40014000
 8004614:	40014400 	.word	0x40014400

08004618 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004618:	b480      	push	{r7}
 800461a:	b087      	sub	sp, #28
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	f023 0201 	bic.w	r2, r3, #1
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004642:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	011b      	lsls	r3, r3, #4
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	4313      	orrs	r3, r2
 800464c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f023 030a 	bic.w	r3, r3, #10
 8004654:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	4313      	orrs	r3, r2
 800465c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	621a      	str	r2, [r3, #32]
}
 800466a:	bf00      	nop
 800466c:	371c      	adds	r7, #28
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004676:	b480      	push	{r7}
 8004678:	b087      	sub	sp, #28
 800467a:	af00      	add	r7, sp, #0
 800467c:	60f8      	str	r0, [r7, #12]
 800467e:	60b9      	str	r1, [r7, #8]
 8004680:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	f023 0210 	bic.w	r2, r3, #16
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	031b      	lsls	r3, r3, #12
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	011b      	lsls	r3, r3, #4
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	621a      	str	r2, [r3, #32]
}
 80046ca:	bf00      	nop
 80046cc:	371c      	adds	r7, #28
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr

080046d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b085      	sub	sp, #20
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
 80046de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	f043 0307 	orr.w	r3, r3, #7
 80046f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	609a      	str	r2, [r3, #8]
}
 8004700:	bf00      	nop
 8004702:	3714      	adds	r7, #20
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800470c:	b480      	push	{r7}
 800470e:	b087      	sub	sp, #28
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
 8004718:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004726:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	021a      	lsls	r2, r3, #8
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	431a      	orrs	r2, r3
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	4313      	orrs	r3, r2
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	4313      	orrs	r3, r2
 8004738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	609a      	str	r2, [r3, #8]
}
 8004740:	bf00      	nop
 8004742:	371c      	adds	r7, #28
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d109      	bne.n	8004770 <HAL_TIMEx_PWMN_Start+0x24>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b01      	cmp	r3, #1
 8004766:	bf14      	ite	ne
 8004768:	2301      	movne	r3, #1
 800476a:	2300      	moveq	r3, #0
 800476c:	b2db      	uxtb	r3, r3
 800476e:	e022      	b.n	80047b6 <HAL_TIMEx_PWMN_Start+0x6a>
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	2b04      	cmp	r3, #4
 8004774:	d109      	bne.n	800478a <HAL_TIMEx_PWMN_Start+0x3e>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b01      	cmp	r3, #1
 8004780:	bf14      	ite	ne
 8004782:	2301      	movne	r3, #1
 8004784:	2300      	moveq	r3, #0
 8004786:	b2db      	uxtb	r3, r3
 8004788:	e015      	b.n	80047b6 <HAL_TIMEx_PWMN_Start+0x6a>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b08      	cmp	r3, #8
 800478e:	d109      	bne.n	80047a4 <HAL_TIMEx_PWMN_Start+0x58>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b01      	cmp	r3, #1
 800479a:	bf14      	ite	ne
 800479c:	2301      	movne	r3, #1
 800479e:	2300      	moveq	r3, #0
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	e008      	b.n	80047b6 <HAL_TIMEx_PWMN_Start+0x6a>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	bf14      	ite	ne
 80047b0:	2301      	movne	r3, #1
 80047b2:	2300      	moveq	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e05a      	b.n	8004874 <HAL_TIMEx_PWMN_Start+0x128>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d104      	bne.n	80047ce <HAL_TIMEx_PWMN_Start+0x82>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2202      	movs	r2, #2
 80047c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047cc:	e013      	b.n	80047f6 <HAL_TIMEx_PWMN_Start+0xaa>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b04      	cmp	r3, #4
 80047d2:	d104      	bne.n	80047de <HAL_TIMEx_PWMN_Start+0x92>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2202      	movs	r2, #2
 80047d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047dc:	e00b      	b.n	80047f6 <HAL_TIMEx_PWMN_Start+0xaa>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d104      	bne.n	80047ee <HAL_TIMEx_PWMN_Start+0xa2>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047ec:	e003      	b.n	80047f6 <HAL_TIMEx_PWMN_Start+0xaa>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2202      	movs	r2, #2
 80047f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2204      	movs	r2, #4
 80047fc:	6839      	ldr	r1, [r7, #0]
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 f920 	bl	8004a44 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004812:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a18      	ldr	r2, [pc, #96]	; (800487c <HAL_TIMEx_PWMN_Start+0x130>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d009      	beq.n	8004832 <HAL_TIMEx_PWMN_Start+0xe6>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004826:	d004      	beq.n	8004832 <HAL_TIMEx_PWMN_Start+0xe6>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a14      	ldr	r2, [pc, #80]	; (8004880 <HAL_TIMEx_PWMN_Start+0x134>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d115      	bne.n	800485e <HAL_TIMEx_PWMN_Start+0x112>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689a      	ldr	r2, [r3, #8]
 8004838:	4b12      	ldr	r3, [pc, #72]	; (8004884 <HAL_TIMEx_PWMN_Start+0x138>)
 800483a:	4013      	ands	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2b06      	cmp	r3, #6
 8004842:	d015      	beq.n	8004870 <HAL_TIMEx_PWMN_Start+0x124>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800484a:	d011      	beq.n	8004870 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0201 	orr.w	r2, r2, #1
 800485a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800485c:	e008      	b.n	8004870 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f042 0201 	orr.w	r2, r2, #1
 800486c:	601a      	str	r2, [r3, #0]
 800486e:	e000      	b.n	8004872 <HAL_TIMEx_PWMN_Start+0x126>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004870:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	40012c00 	.word	0x40012c00
 8004880:	40014000 	.word	0x40014000
 8004884:	00010007 	.word	0x00010007

08004888 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004898:	2b01      	cmp	r3, #1
 800489a:	d101      	bne.n	80048a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800489c:	2302      	movs	r3, #2
 800489e:	e04f      	b.n	8004940 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2202      	movs	r2, #2
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a21      	ldr	r2, [pc, #132]	; (800494c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d108      	bne.n	80048dc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80048d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	4313      	orrs	r3, r2
 80048da:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a14      	ldr	r2, [pc, #80]	; (800494c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d009      	beq.n	8004914 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004908:	d004      	beq.n	8004914 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a10      	ldr	r2, [pc, #64]	; (8004950 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d10c      	bne.n	800492e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800491a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	4313      	orrs	r3, r2
 8004924:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68ba      	ldr	r2, [r7, #8]
 800492c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3714      	adds	r7, #20
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr
 800494c:	40012c00 	.word	0x40012c00
 8004950:	40014000 	.word	0x40014000

08004954 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800495e:	2300      	movs	r3, #0
 8004960:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004968:	2b01      	cmp	r3, #1
 800496a:	d101      	bne.n	8004970 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800496c:	2302      	movs	r3, #2
 800496e:	e060      	b.n	8004a32 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	4313      	orrs	r3, r2
 8004984:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	4313      	orrs	r3, r2
 8004992:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	4313      	orrs	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	041b      	lsls	r3, r3, #16
 80049e6:	4313      	orrs	r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a14      	ldr	r2, [pc, #80]	; (8004a40 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d115      	bne.n	8004a20 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fe:	051b      	lsls	r3, r3, #20
 8004a00:	4313      	orrs	r3, r2
 8004a02:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	40012c00 	.word	0x40012c00

08004a44 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b087      	sub	sp, #28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	f003 031f 	and.w	r3, r3, #31
 8004a56:	2204      	movs	r2, #4
 8004a58:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6a1a      	ldr	r2, [r3, #32]
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	43db      	mvns	r3, r3
 8004a66:	401a      	ands	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6a1a      	ldr	r2, [r3, #32]
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	f003 031f 	and.w	r3, r3, #31
 8004a76:	6879      	ldr	r1, [r7, #4]
 8004a78:	fa01 f303 	lsl.w	r3, r1, r3
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	621a      	str	r2, [r3, #32]
}
 8004a82:	bf00      	nop
 8004a84:	371c      	adds	r7, #28
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b082      	sub	sp, #8
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d101      	bne.n	8004aa0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e040      	b.n	8004b22 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d106      	bne.n	8004ab6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f7fc f9f1 	bl	8000e98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2224      	movs	r2, #36	; 0x24
 8004aba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f022 0201 	bic.w	r2, r2, #1
 8004aca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f8c1 	bl	8004c54 <UART_SetConfig>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d101      	bne.n	8004adc <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e022      	b.n	8004b22 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d002      	beq.n	8004aea <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 fac1 	bl	800506c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004af8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	689a      	ldr	r2, [r3, #8]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b08:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f042 0201 	orr.w	r2, r2, #1
 8004b18:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 fb48 	bl	80051b0 <UART_CheckIdleState>
 8004b20:	4603      	mov	r3, r0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b08a      	sub	sp, #40	; 0x28
 8004b2e:	af02      	add	r7, sp, #8
 8004b30:	60f8      	str	r0, [r7, #12]
 8004b32:	60b9      	str	r1, [r7, #8]
 8004b34:	603b      	str	r3, [r7, #0]
 8004b36:	4613      	mov	r3, r2
 8004b38:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b3e:	2b20      	cmp	r3, #32
 8004b40:	f040 8082 	bne.w	8004c48 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d002      	beq.n	8004b50 <HAL_UART_Transmit+0x26>
 8004b4a:	88fb      	ldrh	r3, [r7, #6]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e07a      	b.n	8004c4a <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d101      	bne.n	8004b62 <HAL_UART_Transmit+0x38>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	e073      	b.n	8004c4a <HAL_UART_Transmit+0x120>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2221      	movs	r2, #33	; 0x21
 8004b76:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b78:	f7fc fa74 	bl	8001064 <HAL_GetTick>
 8004b7c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	88fa      	ldrh	r2, [r7, #6]
 8004b82:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	88fa      	ldrh	r2, [r7, #6]
 8004b8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b96:	d108      	bne.n	8004baa <HAL_UART_Transmit+0x80>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d104      	bne.n	8004baa <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	61bb      	str	r3, [r7, #24]
 8004ba8:	e003      	b.n	8004bb2 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004bba:	e02d      	b.n	8004c18 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	9300      	str	r3, [sp, #0]
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	2180      	movs	r1, #128	; 0x80
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f000 fb3b 	bl	8005242 <UART_WaitOnFlagUntilTimeout>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e039      	b.n	8004c4a <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10b      	bne.n	8004bf4 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	881a      	ldrh	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004be8:	b292      	uxth	r2, r2
 8004bea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	3302      	adds	r3, #2
 8004bf0:	61bb      	str	r3, [r7, #24]
 8004bf2:	e008      	b.n	8004c06 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	781a      	ldrb	r2, [r3, #0]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	b292      	uxth	r2, r2
 8004bfe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	3301      	adds	r3, #1
 8004c04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1cb      	bne.n	8004bbc <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	9300      	str	r3, [sp, #0]
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	2140      	movs	r1, #64	; 0x40
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 fb07 	bl	8005242 <UART_WaitOnFlagUntilTimeout>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e005      	b.n	8004c4a <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2220      	movs	r2, #32
 8004c42:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004c44:	2300      	movs	r3, #0
 8004c46:	e000      	b.n	8004c4a <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004c48:	2302      	movs	r3, #2
  }
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3720      	adds	r7, #32
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
	...

08004c54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c54:	b5b0      	push	{r4, r5, r7, lr}
 8004c56:	b088      	sub	sp, #32
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689a      	ldr	r2, [r3, #8]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	4baf      	ldr	r3, [pc, #700]	; (8004f3c <UART_SetConfig+0x2e8>)
 8004c80:	4013      	ands	r3, r2
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	6812      	ldr	r2, [r2, #0]
 8004c86:	69f9      	ldr	r1, [r7, #28]
 8004c88:	430b      	orrs	r3, r1
 8004c8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68da      	ldr	r2, [r3, #12]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4aa4      	ldr	r2, [pc, #656]	; (8004f40 <UART_SetConfig+0x2ec>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d004      	beq.n	8004cbc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	69fa      	ldr	r2, [r7, #28]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	69fa      	ldr	r2, [r7, #28]
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a9b      	ldr	r2, [pc, #620]	; (8004f44 <UART_SetConfig+0x2f0>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d121      	bne.n	8004d1e <UART_SetConfig+0xca>
 8004cda:	4b9b      	ldr	r3, [pc, #620]	; (8004f48 <UART_SetConfig+0x2f4>)
 8004cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce0:	f003 0303 	and.w	r3, r3, #3
 8004ce4:	2b03      	cmp	r3, #3
 8004ce6:	d817      	bhi.n	8004d18 <UART_SetConfig+0xc4>
 8004ce8:	a201      	add	r2, pc, #4	; (adr r2, 8004cf0 <UART_SetConfig+0x9c>)
 8004cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cee:	bf00      	nop
 8004cf0:	08004d01 	.word	0x08004d01
 8004cf4:	08004d0d 	.word	0x08004d0d
 8004cf8:	08004d07 	.word	0x08004d07
 8004cfc:	08004d13 	.word	0x08004d13
 8004d00:	2301      	movs	r3, #1
 8004d02:	76fb      	strb	r3, [r7, #27]
 8004d04:	e070      	b.n	8004de8 <UART_SetConfig+0x194>
 8004d06:	2302      	movs	r3, #2
 8004d08:	76fb      	strb	r3, [r7, #27]
 8004d0a:	e06d      	b.n	8004de8 <UART_SetConfig+0x194>
 8004d0c:	2304      	movs	r3, #4
 8004d0e:	76fb      	strb	r3, [r7, #27]
 8004d10:	e06a      	b.n	8004de8 <UART_SetConfig+0x194>
 8004d12:	2308      	movs	r3, #8
 8004d14:	76fb      	strb	r3, [r7, #27]
 8004d16:	e067      	b.n	8004de8 <UART_SetConfig+0x194>
 8004d18:	2310      	movs	r3, #16
 8004d1a:	76fb      	strb	r3, [r7, #27]
 8004d1c:	e064      	b.n	8004de8 <UART_SetConfig+0x194>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a8a      	ldr	r2, [pc, #552]	; (8004f4c <UART_SetConfig+0x2f8>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d132      	bne.n	8004d8e <UART_SetConfig+0x13a>
 8004d28:	4b87      	ldr	r3, [pc, #540]	; (8004f48 <UART_SetConfig+0x2f4>)
 8004d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2e:	f003 030c 	and.w	r3, r3, #12
 8004d32:	2b0c      	cmp	r3, #12
 8004d34:	d828      	bhi.n	8004d88 <UART_SetConfig+0x134>
 8004d36:	a201      	add	r2, pc, #4	; (adr r2, 8004d3c <UART_SetConfig+0xe8>)
 8004d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3c:	08004d71 	.word	0x08004d71
 8004d40:	08004d89 	.word	0x08004d89
 8004d44:	08004d89 	.word	0x08004d89
 8004d48:	08004d89 	.word	0x08004d89
 8004d4c:	08004d7d 	.word	0x08004d7d
 8004d50:	08004d89 	.word	0x08004d89
 8004d54:	08004d89 	.word	0x08004d89
 8004d58:	08004d89 	.word	0x08004d89
 8004d5c:	08004d77 	.word	0x08004d77
 8004d60:	08004d89 	.word	0x08004d89
 8004d64:	08004d89 	.word	0x08004d89
 8004d68:	08004d89 	.word	0x08004d89
 8004d6c:	08004d83 	.word	0x08004d83
 8004d70:	2300      	movs	r3, #0
 8004d72:	76fb      	strb	r3, [r7, #27]
 8004d74:	e038      	b.n	8004de8 <UART_SetConfig+0x194>
 8004d76:	2302      	movs	r3, #2
 8004d78:	76fb      	strb	r3, [r7, #27]
 8004d7a:	e035      	b.n	8004de8 <UART_SetConfig+0x194>
 8004d7c:	2304      	movs	r3, #4
 8004d7e:	76fb      	strb	r3, [r7, #27]
 8004d80:	e032      	b.n	8004de8 <UART_SetConfig+0x194>
 8004d82:	2308      	movs	r3, #8
 8004d84:	76fb      	strb	r3, [r7, #27]
 8004d86:	e02f      	b.n	8004de8 <UART_SetConfig+0x194>
 8004d88:	2310      	movs	r3, #16
 8004d8a:	76fb      	strb	r3, [r7, #27]
 8004d8c:	e02c      	b.n	8004de8 <UART_SetConfig+0x194>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a6b      	ldr	r2, [pc, #428]	; (8004f40 <UART_SetConfig+0x2ec>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d125      	bne.n	8004de4 <UART_SetConfig+0x190>
 8004d98:	4b6b      	ldr	r3, [pc, #428]	; (8004f48 <UART_SetConfig+0x2f4>)
 8004d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004da2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004da6:	d017      	beq.n	8004dd8 <UART_SetConfig+0x184>
 8004da8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004dac:	d817      	bhi.n	8004dde <UART_SetConfig+0x18a>
 8004dae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004db2:	d00b      	beq.n	8004dcc <UART_SetConfig+0x178>
 8004db4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004db8:	d811      	bhi.n	8004dde <UART_SetConfig+0x18a>
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <UART_SetConfig+0x172>
 8004dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dc2:	d006      	beq.n	8004dd2 <UART_SetConfig+0x17e>
 8004dc4:	e00b      	b.n	8004dde <UART_SetConfig+0x18a>
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	76fb      	strb	r3, [r7, #27]
 8004dca:	e00d      	b.n	8004de8 <UART_SetConfig+0x194>
 8004dcc:	2302      	movs	r3, #2
 8004dce:	76fb      	strb	r3, [r7, #27]
 8004dd0:	e00a      	b.n	8004de8 <UART_SetConfig+0x194>
 8004dd2:	2304      	movs	r3, #4
 8004dd4:	76fb      	strb	r3, [r7, #27]
 8004dd6:	e007      	b.n	8004de8 <UART_SetConfig+0x194>
 8004dd8:	2308      	movs	r3, #8
 8004dda:	76fb      	strb	r3, [r7, #27]
 8004ddc:	e004      	b.n	8004de8 <UART_SetConfig+0x194>
 8004dde:	2310      	movs	r3, #16
 8004de0:	76fb      	strb	r3, [r7, #27]
 8004de2:	e001      	b.n	8004de8 <UART_SetConfig+0x194>
 8004de4:	2310      	movs	r3, #16
 8004de6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a54      	ldr	r2, [pc, #336]	; (8004f40 <UART_SetConfig+0x2ec>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d173      	bne.n	8004eda <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004df2:	7efb      	ldrb	r3, [r7, #27]
 8004df4:	2b08      	cmp	r3, #8
 8004df6:	d824      	bhi.n	8004e42 <UART_SetConfig+0x1ee>
 8004df8:	a201      	add	r2, pc, #4	; (adr r2, 8004e00 <UART_SetConfig+0x1ac>)
 8004dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfe:	bf00      	nop
 8004e00:	08004e25 	.word	0x08004e25
 8004e04:	08004e43 	.word	0x08004e43
 8004e08:	08004e2d 	.word	0x08004e2d
 8004e0c:	08004e43 	.word	0x08004e43
 8004e10:	08004e33 	.word	0x08004e33
 8004e14:	08004e43 	.word	0x08004e43
 8004e18:	08004e43 	.word	0x08004e43
 8004e1c:	08004e43 	.word	0x08004e43
 8004e20:	08004e3b 	.word	0x08004e3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e24:	f7fe fb06 	bl	8003434 <HAL_RCC_GetPCLK1Freq>
 8004e28:	6178      	str	r0, [r7, #20]
        break;
 8004e2a:	e00f      	b.n	8004e4c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e2c:	4b48      	ldr	r3, [pc, #288]	; (8004f50 <UART_SetConfig+0x2fc>)
 8004e2e:	617b      	str	r3, [r7, #20]
        break;
 8004e30:	e00c      	b.n	8004e4c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e32:	f7fe fa67 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 8004e36:	6178      	str	r0, [r7, #20]
        break;
 8004e38:	e008      	b.n	8004e4c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e3e:	617b      	str	r3, [r7, #20]
        break;
 8004e40:	e004      	b.n	8004e4c <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8004e42:	2300      	movs	r3, #0
 8004e44:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	76bb      	strb	r3, [r7, #26]
        break;
 8004e4a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f000 80fe 	beq.w	8005050 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	4413      	add	r3, r2
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d305      	bcc.n	8004e70 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d902      	bls.n	8004e76 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	76bb      	strb	r3, [r7, #26]
 8004e74:	e0ec      	b.n	8005050 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f04f 0100 	mov.w	r1, #0
 8004e7e:	f04f 0200 	mov.w	r2, #0
 8004e82:	f04f 0300 	mov.w	r3, #0
 8004e86:	020b      	lsls	r3, r1, #8
 8004e88:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004e8c:	0202      	lsls	r2, r0, #8
 8004e8e:	6879      	ldr	r1, [r7, #4]
 8004e90:	6849      	ldr	r1, [r1, #4]
 8004e92:	0849      	lsrs	r1, r1, #1
 8004e94:	4608      	mov	r0, r1
 8004e96:	f04f 0100 	mov.w	r1, #0
 8004e9a:	1814      	adds	r4, r2, r0
 8004e9c:	eb43 0501 	adc.w	r5, r3, r1
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	f04f 0300 	mov.w	r3, #0
 8004eaa:	4620      	mov	r0, r4
 8004eac:	4629      	mov	r1, r5
 8004eae:	f7fb f9df 	bl	8000270 <__aeabi_uldivmod>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ec0:	d308      	bcc.n	8004ed4 <UART_SetConfig+0x280>
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ec8:	d204      	bcs.n	8004ed4 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	60da      	str	r2, [r3, #12]
 8004ed2:	e0bd      	b.n	8005050 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	76bb      	strb	r3, [r7, #26]
 8004ed8:	e0ba      	b.n	8005050 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ee2:	d168      	bne.n	8004fb6 <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8004ee4:	7efb      	ldrb	r3, [r7, #27]
 8004ee6:	2b08      	cmp	r3, #8
 8004ee8:	d834      	bhi.n	8004f54 <UART_SetConfig+0x300>
 8004eea:	a201      	add	r2, pc, #4	; (adr r2, 8004ef0 <UART_SetConfig+0x29c>)
 8004eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef0:	08004f15 	.word	0x08004f15
 8004ef4:	08004f1d 	.word	0x08004f1d
 8004ef8:	08004f25 	.word	0x08004f25
 8004efc:	08004f55 	.word	0x08004f55
 8004f00:	08004f2b 	.word	0x08004f2b
 8004f04:	08004f55 	.word	0x08004f55
 8004f08:	08004f55 	.word	0x08004f55
 8004f0c:	08004f55 	.word	0x08004f55
 8004f10:	08004f33 	.word	0x08004f33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f14:	f7fe fa8e 	bl	8003434 <HAL_RCC_GetPCLK1Freq>
 8004f18:	6178      	str	r0, [r7, #20]
        break;
 8004f1a:	e020      	b.n	8004f5e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f1c:	f7fe faa0 	bl	8003460 <HAL_RCC_GetPCLK2Freq>
 8004f20:	6178      	str	r0, [r7, #20]
        break;
 8004f22:	e01c      	b.n	8004f5e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f24:	4b0a      	ldr	r3, [pc, #40]	; (8004f50 <UART_SetConfig+0x2fc>)
 8004f26:	617b      	str	r3, [r7, #20]
        break;
 8004f28:	e019      	b.n	8004f5e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f2a:	f7fe f9eb 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 8004f2e:	6178      	str	r0, [r7, #20]
        break;
 8004f30:	e015      	b.n	8004f5e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f36:	617b      	str	r3, [r7, #20]
        break;
 8004f38:	e011      	b.n	8004f5e <UART_SetConfig+0x30a>
 8004f3a:	bf00      	nop
 8004f3c:	efff69f3 	.word	0xefff69f3
 8004f40:	40008000 	.word	0x40008000
 8004f44:	40013800 	.word	0x40013800
 8004f48:	40021000 	.word	0x40021000
 8004f4c:	40004400 	.word	0x40004400
 8004f50:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004f54:	2300      	movs	r3, #0
 8004f56:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	76bb      	strb	r3, [r7, #26]
        break;
 8004f5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d075      	beq.n	8005050 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	005a      	lsls	r2, r3, #1
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	085b      	lsrs	r3, r3, #1
 8004f6e:	441a      	add	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	2b0f      	cmp	r3, #15
 8004f80:	d916      	bls.n	8004fb0 <UART_SetConfig+0x35c>
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f88:	d212      	bcs.n	8004fb0 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	f023 030f 	bic.w	r3, r3, #15
 8004f92:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	085b      	lsrs	r3, r3, #1
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	f003 0307 	and.w	r3, r3, #7
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	89fb      	ldrh	r3, [r7, #14]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	89fa      	ldrh	r2, [r7, #14]
 8004fac:	60da      	str	r2, [r3, #12]
 8004fae:	e04f      	b.n	8005050 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	76bb      	strb	r3, [r7, #26]
 8004fb4:	e04c      	b.n	8005050 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fb6:	7efb      	ldrb	r3, [r7, #27]
 8004fb8:	2b08      	cmp	r3, #8
 8004fba:	d828      	bhi.n	800500e <UART_SetConfig+0x3ba>
 8004fbc:	a201      	add	r2, pc, #4	; (adr r2, 8004fc4 <UART_SetConfig+0x370>)
 8004fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc2:	bf00      	nop
 8004fc4:	08004fe9 	.word	0x08004fe9
 8004fc8:	08004ff1 	.word	0x08004ff1
 8004fcc:	08004ff9 	.word	0x08004ff9
 8004fd0:	0800500f 	.word	0x0800500f
 8004fd4:	08004fff 	.word	0x08004fff
 8004fd8:	0800500f 	.word	0x0800500f
 8004fdc:	0800500f 	.word	0x0800500f
 8004fe0:	0800500f 	.word	0x0800500f
 8004fe4:	08005007 	.word	0x08005007
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fe8:	f7fe fa24 	bl	8003434 <HAL_RCC_GetPCLK1Freq>
 8004fec:	6178      	str	r0, [r7, #20]
        break;
 8004fee:	e013      	b.n	8005018 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ff0:	f7fe fa36 	bl	8003460 <HAL_RCC_GetPCLK2Freq>
 8004ff4:	6178      	str	r0, [r7, #20]
        break;
 8004ff6:	e00f      	b.n	8005018 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ff8:	4b1b      	ldr	r3, [pc, #108]	; (8005068 <UART_SetConfig+0x414>)
 8004ffa:	617b      	str	r3, [r7, #20]
        break;
 8004ffc:	e00c      	b.n	8005018 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ffe:	f7fe f981 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 8005002:	6178      	str	r0, [r7, #20]
        break;
 8005004:	e008      	b.n	8005018 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800500a:	617b      	str	r3, [r7, #20]
        break;
 800500c:	e004      	b.n	8005018 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 800500e:	2300      	movs	r3, #0
 8005010:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	76bb      	strb	r3, [r7, #26]
        break;
 8005016:	bf00      	nop
    }

    if (pclk != 0U)
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d018      	beq.n	8005050 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	085a      	lsrs	r2, r3, #1
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	441a      	add	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005030:	b29b      	uxth	r3, r3
 8005032:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	2b0f      	cmp	r3, #15
 8005038:	d908      	bls.n	800504c <UART_SetConfig+0x3f8>
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005040:	d204      	bcs.n	800504c <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	60da      	str	r2, [r3, #12]
 800504a:	e001      	b.n	8005050 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800505c:	7ebb      	ldrb	r3, [r7, #26]
}
 800505e:	4618      	mov	r0, r3
 8005060:	3720      	adds	r7, #32
 8005062:	46bd      	mov	sp, r7
 8005064:	bdb0      	pop	{r4, r5, r7, pc}
 8005066:	bf00      	nop
 8005068:	00f42400 	.word	0x00f42400

0800506c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005078:	f003 0301 	and.w	r3, r3, #1
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00a      	beq.n	8005096 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	430a      	orrs	r2, r1
 8005094:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00a      	beq.n	80050b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	430a      	orrs	r2, r1
 80050b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	f003 0304 	and.w	r3, r3, #4
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00a      	beq.n	80050da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050de:	f003 0308 	and.w	r3, r3, #8
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00a      	beq.n	80050fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005100:	f003 0310 	and.w	r3, r3, #16
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00a      	beq.n	800511e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	430a      	orrs	r2, r1
 800511c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	f003 0320 	and.w	r3, r3, #32
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00a      	beq.n	8005140 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	430a      	orrs	r2, r1
 800513e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005148:	2b00      	cmp	r3, #0
 800514a:	d01a      	beq.n	8005182 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	430a      	orrs	r2, r1
 8005160:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005166:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800516a:	d10a      	bne.n	8005182 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00a      	beq.n	80051a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	430a      	orrs	r2, r1
 80051a2:	605a      	str	r2, [r3, #4]
  }
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af02      	add	r7, sp, #8
 80051b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051c0:	f7fb ff50 	bl	8001064 <HAL_GetTick>
 80051c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0308 	and.w	r3, r3, #8
 80051d0:	2b08      	cmp	r3, #8
 80051d2:	d10e      	bne.n	80051f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051d8:	9300      	str	r3, [sp, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f82d 	bl	8005242 <UART_WaitOnFlagUntilTimeout>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d001      	beq.n	80051f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e023      	b.n	800523a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0304 	and.w	r3, r3, #4
 80051fc:	2b04      	cmp	r3, #4
 80051fe:	d10e      	bne.n	800521e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005200:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f817 	bl	8005242 <UART_WaitOnFlagUntilTimeout>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d001      	beq.n	800521e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e00d      	b.n	800523a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2220      	movs	r2, #32
 8005222:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2220      	movs	r2, #32
 8005228:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b084      	sub	sp, #16
 8005246:	af00      	add	r7, sp, #0
 8005248:	60f8      	str	r0, [r7, #12]
 800524a:	60b9      	str	r1, [r7, #8]
 800524c:	603b      	str	r3, [r7, #0]
 800524e:	4613      	mov	r3, r2
 8005250:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005252:	e05e      	b.n	8005312 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525a:	d05a      	beq.n	8005312 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800525c:	f7fb ff02 	bl	8001064 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	429a      	cmp	r2, r3
 800526a:	d302      	bcc.n	8005272 <UART_WaitOnFlagUntilTimeout+0x30>
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d11b      	bne.n	80052aa <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005280:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	689a      	ldr	r2, [r3, #8]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 0201 	bic.w	r2, r2, #1
 8005290:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2220      	movs	r2, #32
 8005296:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2220      	movs	r2, #32
 800529c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e043      	b.n	8005332 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d02c      	beq.n	8005312 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	69db      	ldr	r3, [r3, #28]
 80052be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052c6:	d124      	bne.n	8005312 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052d0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80052e0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 0201 	bic.w	r2, r2, #1
 80052f0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2220      	movs	r2, #32
 80052f6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2220      	movs	r2, #32
 80052fc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2220      	movs	r2, #32
 8005302:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e00f      	b.n	8005332 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	69da      	ldr	r2, [r3, #28]
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	4013      	ands	r3, r2
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	429a      	cmp	r2, r3
 8005320:	bf0c      	ite	eq
 8005322:	2301      	moveq	r3, #1
 8005324:	2300      	movne	r3, #0
 8005326:	b2db      	uxtb	r3, r3
 8005328:	461a      	mov	r2, r3
 800532a:	79fb      	ldrb	r3, [r7, #7]
 800532c:	429a      	cmp	r2, r3
 800532e:	d091      	beq.n	8005254 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
	...

0800533c <__errno>:
 800533c:	4b01      	ldr	r3, [pc, #4]	; (8005344 <__errno+0x8>)
 800533e:	6818      	ldr	r0, [r3, #0]
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	2000000c 	.word	0x2000000c

08005348 <__libc_init_array>:
 8005348:	b570      	push	{r4, r5, r6, lr}
 800534a:	4d0d      	ldr	r5, [pc, #52]	; (8005380 <__libc_init_array+0x38>)
 800534c:	4c0d      	ldr	r4, [pc, #52]	; (8005384 <__libc_init_array+0x3c>)
 800534e:	1b64      	subs	r4, r4, r5
 8005350:	10a4      	asrs	r4, r4, #2
 8005352:	2600      	movs	r6, #0
 8005354:	42a6      	cmp	r6, r4
 8005356:	d109      	bne.n	800536c <__libc_init_array+0x24>
 8005358:	4d0b      	ldr	r5, [pc, #44]	; (8005388 <__libc_init_array+0x40>)
 800535a:	4c0c      	ldr	r4, [pc, #48]	; (800538c <__libc_init_array+0x44>)
 800535c:	f000 fc4e 	bl	8005bfc <_init>
 8005360:	1b64      	subs	r4, r4, r5
 8005362:	10a4      	asrs	r4, r4, #2
 8005364:	2600      	movs	r6, #0
 8005366:	42a6      	cmp	r6, r4
 8005368:	d105      	bne.n	8005376 <__libc_init_array+0x2e>
 800536a:	bd70      	pop	{r4, r5, r6, pc}
 800536c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005370:	4798      	blx	r3
 8005372:	3601      	adds	r6, #1
 8005374:	e7ee      	b.n	8005354 <__libc_init_array+0xc>
 8005376:	f855 3b04 	ldr.w	r3, [r5], #4
 800537a:	4798      	blx	r3
 800537c:	3601      	adds	r6, #1
 800537e:	e7f2      	b.n	8005366 <__libc_init_array+0x1e>
 8005380:	08005ca4 	.word	0x08005ca4
 8005384:	08005ca4 	.word	0x08005ca4
 8005388:	08005ca4 	.word	0x08005ca4
 800538c:	08005ca8 	.word	0x08005ca8

08005390 <memset>:
 8005390:	4402      	add	r2, r0
 8005392:	4603      	mov	r3, r0
 8005394:	4293      	cmp	r3, r2
 8005396:	d100      	bne.n	800539a <memset+0xa>
 8005398:	4770      	bx	lr
 800539a:	f803 1b01 	strb.w	r1, [r3], #1
 800539e:	e7f9      	b.n	8005394 <memset+0x4>

080053a0 <siprintf>:
 80053a0:	b40e      	push	{r1, r2, r3}
 80053a2:	b500      	push	{lr}
 80053a4:	b09c      	sub	sp, #112	; 0x70
 80053a6:	ab1d      	add	r3, sp, #116	; 0x74
 80053a8:	9002      	str	r0, [sp, #8]
 80053aa:	9006      	str	r0, [sp, #24]
 80053ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80053b0:	4809      	ldr	r0, [pc, #36]	; (80053d8 <siprintf+0x38>)
 80053b2:	9107      	str	r1, [sp, #28]
 80053b4:	9104      	str	r1, [sp, #16]
 80053b6:	4909      	ldr	r1, [pc, #36]	; (80053dc <siprintf+0x3c>)
 80053b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80053bc:	9105      	str	r1, [sp, #20]
 80053be:	6800      	ldr	r0, [r0, #0]
 80053c0:	9301      	str	r3, [sp, #4]
 80053c2:	a902      	add	r1, sp, #8
 80053c4:	f000 f868 	bl	8005498 <_svfiprintf_r>
 80053c8:	9b02      	ldr	r3, [sp, #8]
 80053ca:	2200      	movs	r2, #0
 80053cc:	701a      	strb	r2, [r3, #0]
 80053ce:	b01c      	add	sp, #112	; 0x70
 80053d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80053d4:	b003      	add	sp, #12
 80053d6:	4770      	bx	lr
 80053d8:	2000000c 	.word	0x2000000c
 80053dc:	ffff0208 	.word	0xffff0208

080053e0 <__ssputs_r>:
 80053e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053e4:	688e      	ldr	r6, [r1, #8]
 80053e6:	429e      	cmp	r6, r3
 80053e8:	4682      	mov	sl, r0
 80053ea:	460c      	mov	r4, r1
 80053ec:	4690      	mov	r8, r2
 80053ee:	461f      	mov	r7, r3
 80053f0:	d838      	bhi.n	8005464 <__ssputs_r+0x84>
 80053f2:	898a      	ldrh	r2, [r1, #12]
 80053f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80053f8:	d032      	beq.n	8005460 <__ssputs_r+0x80>
 80053fa:	6825      	ldr	r5, [r4, #0]
 80053fc:	6909      	ldr	r1, [r1, #16]
 80053fe:	eba5 0901 	sub.w	r9, r5, r1
 8005402:	6965      	ldr	r5, [r4, #20]
 8005404:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005408:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800540c:	3301      	adds	r3, #1
 800540e:	444b      	add	r3, r9
 8005410:	106d      	asrs	r5, r5, #1
 8005412:	429d      	cmp	r5, r3
 8005414:	bf38      	it	cc
 8005416:	461d      	movcc	r5, r3
 8005418:	0553      	lsls	r3, r2, #21
 800541a:	d531      	bpl.n	8005480 <__ssputs_r+0xa0>
 800541c:	4629      	mov	r1, r5
 800541e:	f000 fb47 	bl	8005ab0 <_malloc_r>
 8005422:	4606      	mov	r6, r0
 8005424:	b950      	cbnz	r0, 800543c <__ssputs_r+0x5c>
 8005426:	230c      	movs	r3, #12
 8005428:	f8ca 3000 	str.w	r3, [sl]
 800542c:	89a3      	ldrh	r3, [r4, #12]
 800542e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005432:	81a3      	strh	r3, [r4, #12]
 8005434:	f04f 30ff 	mov.w	r0, #4294967295
 8005438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800543c:	6921      	ldr	r1, [r4, #16]
 800543e:	464a      	mov	r2, r9
 8005440:	f000 fabe 	bl	80059c0 <memcpy>
 8005444:	89a3      	ldrh	r3, [r4, #12]
 8005446:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800544a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800544e:	81a3      	strh	r3, [r4, #12]
 8005450:	6126      	str	r6, [r4, #16]
 8005452:	6165      	str	r5, [r4, #20]
 8005454:	444e      	add	r6, r9
 8005456:	eba5 0509 	sub.w	r5, r5, r9
 800545a:	6026      	str	r6, [r4, #0]
 800545c:	60a5      	str	r5, [r4, #8]
 800545e:	463e      	mov	r6, r7
 8005460:	42be      	cmp	r6, r7
 8005462:	d900      	bls.n	8005466 <__ssputs_r+0x86>
 8005464:	463e      	mov	r6, r7
 8005466:	4632      	mov	r2, r6
 8005468:	6820      	ldr	r0, [r4, #0]
 800546a:	4641      	mov	r1, r8
 800546c:	f000 fab6 	bl	80059dc <memmove>
 8005470:	68a3      	ldr	r3, [r4, #8]
 8005472:	6822      	ldr	r2, [r4, #0]
 8005474:	1b9b      	subs	r3, r3, r6
 8005476:	4432      	add	r2, r6
 8005478:	60a3      	str	r3, [r4, #8]
 800547a:	6022      	str	r2, [r4, #0]
 800547c:	2000      	movs	r0, #0
 800547e:	e7db      	b.n	8005438 <__ssputs_r+0x58>
 8005480:	462a      	mov	r2, r5
 8005482:	f000 fb6f 	bl	8005b64 <_realloc_r>
 8005486:	4606      	mov	r6, r0
 8005488:	2800      	cmp	r0, #0
 800548a:	d1e1      	bne.n	8005450 <__ssputs_r+0x70>
 800548c:	6921      	ldr	r1, [r4, #16]
 800548e:	4650      	mov	r0, sl
 8005490:	f000 fabe 	bl	8005a10 <_free_r>
 8005494:	e7c7      	b.n	8005426 <__ssputs_r+0x46>
	...

08005498 <_svfiprintf_r>:
 8005498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800549c:	4698      	mov	r8, r3
 800549e:	898b      	ldrh	r3, [r1, #12]
 80054a0:	061b      	lsls	r3, r3, #24
 80054a2:	b09d      	sub	sp, #116	; 0x74
 80054a4:	4607      	mov	r7, r0
 80054a6:	460d      	mov	r5, r1
 80054a8:	4614      	mov	r4, r2
 80054aa:	d50e      	bpl.n	80054ca <_svfiprintf_r+0x32>
 80054ac:	690b      	ldr	r3, [r1, #16]
 80054ae:	b963      	cbnz	r3, 80054ca <_svfiprintf_r+0x32>
 80054b0:	2140      	movs	r1, #64	; 0x40
 80054b2:	f000 fafd 	bl	8005ab0 <_malloc_r>
 80054b6:	6028      	str	r0, [r5, #0]
 80054b8:	6128      	str	r0, [r5, #16]
 80054ba:	b920      	cbnz	r0, 80054c6 <_svfiprintf_r+0x2e>
 80054bc:	230c      	movs	r3, #12
 80054be:	603b      	str	r3, [r7, #0]
 80054c0:	f04f 30ff 	mov.w	r0, #4294967295
 80054c4:	e0d1      	b.n	800566a <_svfiprintf_r+0x1d2>
 80054c6:	2340      	movs	r3, #64	; 0x40
 80054c8:	616b      	str	r3, [r5, #20]
 80054ca:	2300      	movs	r3, #0
 80054cc:	9309      	str	r3, [sp, #36]	; 0x24
 80054ce:	2320      	movs	r3, #32
 80054d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80054d8:	2330      	movs	r3, #48	; 0x30
 80054da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005684 <_svfiprintf_r+0x1ec>
 80054de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054e2:	f04f 0901 	mov.w	r9, #1
 80054e6:	4623      	mov	r3, r4
 80054e8:	469a      	mov	sl, r3
 80054ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054ee:	b10a      	cbz	r2, 80054f4 <_svfiprintf_r+0x5c>
 80054f0:	2a25      	cmp	r2, #37	; 0x25
 80054f2:	d1f9      	bne.n	80054e8 <_svfiprintf_r+0x50>
 80054f4:	ebba 0b04 	subs.w	fp, sl, r4
 80054f8:	d00b      	beq.n	8005512 <_svfiprintf_r+0x7a>
 80054fa:	465b      	mov	r3, fp
 80054fc:	4622      	mov	r2, r4
 80054fe:	4629      	mov	r1, r5
 8005500:	4638      	mov	r0, r7
 8005502:	f7ff ff6d 	bl	80053e0 <__ssputs_r>
 8005506:	3001      	adds	r0, #1
 8005508:	f000 80aa 	beq.w	8005660 <_svfiprintf_r+0x1c8>
 800550c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800550e:	445a      	add	r2, fp
 8005510:	9209      	str	r2, [sp, #36]	; 0x24
 8005512:	f89a 3000 	ldrb.w	r3, [sl]
 8005516:	2b00      	cmp	r3, #0
 8005518:	f000 80a2 	beq.w	8005660 <_svfiprintf_r+0x1c8>
 800551c:	2300      	movs	r3, #0
 800551e:	f04f 32ff 	mov.w	r2, #4294967295
 8005522:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005526:	f10a 0a01 	add.w	sl, sl, #1
 800552a:	9304      	str	r3, [sp, #16]
 800552c:	9307      	str	r3, [sp, #28]
 800552e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005532:	931a      	str	r3, [sp, #104]	; 0x68
 8005534:	4654      	mov	r4, sl
 8005536:	2205      	movs	r2, #5
 8005538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800553c:	4851      	ldr	r0, [pc, #324]	; (8005684 <_svfiprintf_r+0x1ec>)
 800553e:	f7fa fe47 	bl	80001d0 <memchr>
 8005542:	9a04      	ldr	r2, [sp, #16]
 8005544:	b9d8      	cbnz	r0, 800557e <_svfiprintf_r+0xe6>
 8005546:	06d0      	lsls	r0, r2, #27
 8005548:	bf44      	itt	mi
 800554a:	2320      	movmi	r3, #32
 800554c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005550:	0711      	lsls	r1, r2, #28
 8005552:	bf44      	itt	mi
 8005554:	232b      	movmi	r3, #43	; 0x2b
 8005556:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800555a:	f89a 3000 	ldrb.w	r3, [sl]
 800555e:	2b2a      	cmp	r3, #42	; 0x2a
 8005560:	d015      	beq.n	800558e <_svfiprintf_r+0xf6>
 8005562:	9a07      	ldr	r2, [sp, #28]
 8005564:	4654      	mov	r4, sl
 8005566:	2000      	movs	r0, #0
 8005568:	f04f 0c0a 	mov.w	ip, #10
 800556c:	4621      	mov	r1, r4
 800556e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005572:	3b30      	subs	r3, #48	; 0x30
 8005574:	2b09      	cmp	r3, #9
 8005576:	d94e      	bls.n	8005616 <_svfiprintf_r+0x17e>
 8005578:	b1b0      	cbz	r0, 80055a8 <_svfiprintf_r+0x110>
 800557a:	9207      	str	r2, [sp, #28]
 800557c:	e014      	b.n	80055a8 <_svfiprintf_r+0x110>
 800557e:	eba0 0308 	sub.w	r3, r0, r8
 8005582:	fa09 f303 	lsl.w	r3, r9, r3
 8005586:	4313      	orrs	r3, r2
 8005588:	9304      	str	r3, [sp, #16]
 800558a:	46a2      	mov	sl, r4
 800558c:	e7d2      	b.n	8005534 <_svfiprintf_r+0x9c>
 800558e:	9b03      	ldr	r3, [sp, #12]
 8005590:	1d19      	adds	r1, r3, #4
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	9103      	str	r1, [sp, #12]
 8005596:	2b00      	cmp	r3, #0
 8005598:	bfbb      	ittet	lt
 800559a:	425b      	neglt	r3, r3
 800559c:	f042 0202 	orrlt.w	r2, r2, #2
 80055a0:	9307      	strge	r3, [sp, #28]
 80055a2:	9307      	strlt	r3, [sp, #28]
 80055a4:	bfb8      	it	lt
 80055a6:	9204      	strlt	r2, [sp, #16]
 80055a8:	7823      	ldrb	r3, [r4, #0]
 80055aa:	2b2e      	cmp	r3, #46	; 0x2e
 80055ac:	d10c      	bne.n	80055c8 <_svfiprintf_r+0x130>
 80055ae:	7863      	ldrb	r3, [r4, #1]
 80055b0:	2b2a      	cmp	r3, #42	; 0x2a
 80055b2:	d135      	bne.n	8005620 <_svfiprintf_r+0x188>
 80055b4:	9b03      	ldr	r3, [sp, #12]
 80055b6:	1d1a      	adds	r2, r3, #4
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	9203      	str	r2, [sp, #12]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	bfb8      	it	lt
 80055c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80055c4:	3402      	adds	r4, #2
 80055c6:	9305      	str	r3, [sp, #20]
 80055c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005694 <_svfiprintf_r+0x1fc>
 80055cc:	7821      	ldrb	r1, [r4, #0]
 80055ce:	2203      	movs	r2, #3
 80055d0:	4650      	mov	r0, sl
 80055d2:	f7fa fdfd 	bl	80001d0 <memchr>
 80055d6:	b140      	cbz	r0, 80055ea <_svfiprintf_r+0x152>
 80055d8:	2340      	movs	r3, #64	; 0x40
 80055da:	eba0 000a 	sub.w	r0, r0, sl
 80055de:	fa03 f000 	lsl.w	r0, r3, r0
 80055e2:	9b04      	ldr	r3, [sp, #16]
 80055e4:	4303      	orrs	r3, r0
 80055e6:	3401      	adds	r4, #1
 80055e8:	9304      	str	r3, [sp, #16]
 80055ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055ee:	4826      	ldr	r0, [pc, #152]	; (8005688 <_svfiprintf_r+0x1f0>)
 80055f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055f4:	2206      	movs	r2, #6
 80055f6:	f7fa fdeb 	bl	80001d0 <memchr>
 80055fa:	2800      	cmp	r0, #0
 80055fc:	d038      	beq.n	8005670 <_svfiprintf_r+0x1d8>
 80055fe:	4b23      	ldr	r3, [pc, #140]	; (800568c <_svfiprintf_r+0x1f4>)
 8005600:	bb1b      	cbnz	r3, 800564a <_svfiprintf_r+0x1b2>
 8005602:	9b03      	ldr	r3, [sp, #12]
 8005604:	3307      	adds	r3, #7
 8005606:	f023 0307 	bic.w	r3, r3, #7
 800560a:	3308      	adds	r3, #8
 800560c:	9303      	str	r3, [sp, #12]
 800560e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005610:	4433      	add	r3, r6
 8005612:	9309      	str	r3, [sp, #36]	; 0x24
 8005614:	e767      	b.n	80054e6 <_svfiprintf_r+0x4e>
 8005616:	fb0c 3202 	mla	r2, ip, r2, r3
 800561a:	460c      	mov	r4, r1
 800561c:	2001      	movs	r0, #1
 800561e:	e7a5      	b.n	800556c <_svfiprintf_r+0xd4>
 8005620:	2300      	movs	r3, #0
 8005622:	3401      	adds	r4, #1
 8005624:	9305      	str	r3, [sp, #20]
 8005626:	4619      	mov	r1, r3
 8005628:	f04f 0c0a 	mov.w	ip, #10
 800562c:	4620      	mov	r0, r4
 800562e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005632:	3a30      	subs	r2, #48	; 0x30
 8005634:	2a09      	cmp	r2, #9
 8005636:	d903      	bls.n	8005640 <_svfiprintf_r+0x1a8>
 8005638:	2b00      	cmp	r3, #0
 800563a:	d0c5      	beq.n	80055c8 <_svfiprintf_r+0x130>
 800563c:	9105      	str	r1, [sp, #20]
 800563e:	e7c3      	b.n	80055c8 <_svfiprintf_r+0x130>
 8005640:	fb0c 2101 	mla	r1, ip, r1, r2
 8005644:	4604      	mov	r4, r0
 8005646:	2301      	movs	r3, #1
 8005648:	e7f0      	b.n	800562c <_svfiprintf_r+0x194>
 800564a:	ab03      	add	r3, sp, #12
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	462a      	mov	r2, r5
 8005650:	4b0f      	ldr	r3, [pc, #60]	; (8005690 <_svfiprintf_r+0x1f8>)
 8005652:	a904      	add	r1, sp, #16
 8005654:	4638      	mov	r0, r7
 8005656:	f3af 8000 	nop.w
 800565a:	1c42      	adds	r2, r0, #1
 800565c:	4606      	mov	r6, r0
 800565e:	d1d6      	bne.n	800560e <_svfiprintf_r+0x176>
 8005660:	89ab      	ldrh	r3, [r5, #12]
 8005662:	065b      	lsls	r3, r3, #25
 8005664:	f53f af2c 	bmi.w	80054c0 <_svfiprintf_r+0x28>
 8005668:	9809      	ldr	r0, [sp, #36]	; 0x24
 800566a:	b01d      	add	sp, #116	; 0x74
 800566c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005670:	ab03      	add	r3, sp, #12
 8005672:	9300      	str	r3, [sp, #0]
 8005674:	462a      	mov	r2, r5
 8005676:	4b06      	ldr	r3, [pc, #24]	; (8005690 <_svfiprintf_r+0x1f8>)
 8005678:	a904      	add	r1, sp, #16
 800567a:	4638      	mov	r0, r7
 800567c:	f000 f87a 	bl	8005774 <_printf_i>
 8005680:	e7eb      	b.n	800565a <_svfiprintf_r+0x1c2>
 8005682:	bf00      	nop
 8005684:	08005c68 	.word	0x08005c68
 8005688:	08005c72 	.word	0x08005c72
 800568c:	00000000 	.word	0x00000000
 8005690:	080053e1 	.word	0x080053e1
 8005694:	08005c6e 	.word	0x08005c6e

08005698 <_printf_common>:
 8005698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800569c:	4616      	mov	r6, r2
 800569e:	4699      	mov	r9, r3
 80056a0:	688a      	ldr	r2, [r1, #8]
 80056a2:	690b      	ldr	r3, [r1, #16]
 80056a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056a8:	4293      	cmp	r3, r2
 80056aa:	bfb8      	it	lt
 80056ac:	4613      	movlt	r3, r2
 80056ae:	6033      	str	r3, [r6, #0]
 80056b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056b4:	4607      	mov	r7, r0
 80056b6:	460c      	mov	r4, r1
 80056b8:	b10a      	cbz	r2, 80056be <_printf_common+0x26>
 80056ba:	3301      	adds	r3, #1
 80056bc:	6033      	str	r3, [r6, #0]
 80056be:	6823      	ldr	r3, [r4, #0]
 80056c0:	0699      	lsls	r1, r3, #26
 80056c2:	bf42      	ittt	mi
 80056c4:	6833      	ldrmi	r3, [r6, #0]
 80056c6:	3302      	addmi	r3, #2
 80056c8:	6033      	strmi	r3, [r6, #0]
 80056ca:	6825      	ldr	r5, [r4, #0]
 80056cc:	f015 0506 	ands.w	r5, r5, #6
 80056d0:	d106      	bne.n	80056e0 <_printf_common+0x48>
 80056d2:	f104 0a19 	add.w	sl, r4, #25
 80056d6:	68e3      	ldr	r3, [r4, #12]
 80056d8:	6832      	ldr	r2, [r6, #0]
 80056da:	1a9b      	subs	r3, r3, r2
 80056dc:	42ab      	cmp	r3, r5
 80056de:	dc26      	bgt.n	800572e <_printf_common+0x96>
 80056e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056e4:	1e13      	subs	r3, r2, #0
 80056e6:	6822      	ldr	r2, [r4, #0]
 80056e8:	bf18      	it	ne
 80056ea:	2301      	movne	r3, #1
 80056ec:	0692      	lsls	r2, r2, #26
 80056ee:	d42b      	bmi.n	8005748 <_printf_common+0xb0>
 80056f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056f4:	4649      	mov	r1, r9
 80056f6:	4638      	mov	r0, r7
 80056f8:	47c0      	blx	r8
 80056fa:	3001      	adds	r0, #1
 80056fc:	d01e      	beq.n	800573c <_printf_common+0xa4>
 80056fe:	6823      	ldr	r3, [r4, #0]
 8005700:	68e5      	ldr	r5, [r4, #12]
 8005702:	6832      	ldr	r2, [r6, #0]
 8005704:	f003 0306 	and.w	r3, r3, #6
 8005708:	2b04      	cmp	r3, #4
 800570a:	bf08      	it	eq
 800570c:	1aad      	subeq	r5, r5, r2
 800570e:	68a3      	ldr	r3, [r4, #8]
 8005710:	6922      	ldr	r2, [r4, #16]
 8005712:	bf0c      	ite	eq
 8005714:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005718:	2500      	movne	r5, #0
 800571a:	4293      	cmp	r3, r2
 800571c:	bfc4      	itt	gt
 800571e:	1a9b      	subgt	r3, r3, r2
 8005720:	18ed      	addgt	r5, r5, r3
 8005722:	2600      	movs	r6, #0
 8005724:	341a      	adds	r4, #26
 8005726:	42b5      	cmp	r5, r6
 8005728:	d11a      	bne.n	8005760 <_printf_common+0xc8>
 800572a:	2000      	movs	r0, #0
 800572c:	e008      	b.n	8005740 <_printf_common+0xa8>
 800572e:	2301      	movs	r3, #1
 8005730:	4652      	mov	r2, sl
 8005732:	4649      	mov	r1, r9
 8005734:	4638      	mov	r0, r7
 8005736:	47c0      	blx	r8
 8005738:	3001      	adds	r0, #1
 800573a:	d103      	bne.n	8005744 <_printf_common+0xac>
 800573c:	f04f 30ff 	mov.w	r0, #4294967295
 8005740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005744:	3501      	adds	r5, #1
 8005746:	e7c6      	b.n	80056d6 <_printf_common+0x3e>
 8005748:	18e1      	adds	r1, r4, r3
 800574a:	1c5a      	adds	r2, r3, #1
 800574c:	2030      	movs	r0, #48	; 0x30
 800574e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005752:	4422      	add	r2, r4
 8005754:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005758:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800575c:	3302      	adds	r3, #2
 800575e:	e7c7      	b.n	80056f0 <_printf_common+0x58>
 8005760:	2301      	movs	r3, #1
 8005762:	4622      	mov	r2, r4
 8005764:	4649      	mov	r1, r9
 8005766:	4638      	mov	r0, r7
 8005768:	47c0      	blx	r8
 800576a:	3001      	adds	r0, #1
 800576c:	d0e6      	beq.n	800573c <_printf_common+0xa4>
 800576e:	3601      	adds	r6, #1
 8005770:	e7d9      	b.n	8005726 <_printf_common+0x8e>
	...

08005774 <_printf_i>:
 8005774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005778:	460c      	mov	r4, r1
 800577a:	4691      	mov	r9, r2
 800577c:	7e27      	ldrb	r7, [r4, #24]
 800577e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005780:	2f78      	cmp	r7, #120	; 0x78
 8005782:	4680      	mov	r8, r0
 8005784:	469a      	mov	sl, r3
 8005786:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800578a:	d807      	bhi.n	800579c <_printf_i+0x28>
 800578c:	2f62      	cmp	r7, #98	; 0x62
 800578e:	d80a      	bhi.n	80057a6 <_printf_i+0x32>
 8005790:	2f00      	cmp	r7, #0
 8005792:	f000 80d8 	beq.w	8005946 <_printf_i+0x1d2>
 8005796:	2f58      	cmp	r7, #88	; 0x58
 8005798:	f000 80a3 	beq.w	80058e2 <_printf_i+0x16e>
 800579c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80057a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057a4:	e03a      	b.n	800581c <_printf_i+0xa8>
 80057a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057aa:	2b15      	cmp	r3, #21
 80057ac:	d8f6      	bhi.n	800579c <_printf_i+0x28>
 80057ae:	a001      	add	r0, pc, #4	; (adr r0, 80057b4 <_printf_i+0x40>)
 80057b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80057b4:	0800580d 	.word	0x0800580d
 80057b8:	08005821 	.word	0x08005821
 80057bc:	0800579d 	.word	0x0800579d
 80057c0:	0800579d 	.word	0x0800579d
 80057c4:	0800579d 	.word	0x0800579d
 80057c8:	0800579d 	.word	0x0800579d
 80057cc:	08005821 	.word	0x08005821
 80057d0:	0800579d 	.word	0x0800579d
 80057d4:	0800579d 	.word	0x0800579d
 80057d8:	0800579d 	.word	0x0800579d
 80057dc:	0800579d 	.word	0x0800579d
 80057e0:	0800592d 	.word	0x0800592d
 80057e4:	08005851 	.word	0x08005851
 80057e8:	0800590f 	.word	0x0800590f
 80057ec:	0800579d 	.word	0x0800579d
 80057f0:	0800579d 	.word	0x0800579d
 80057f4:	0800594f 	.word	0x0800594f
 80057f8:	0800579d 	.word	0x0800579d
 80057fc:	08005851 	.word	0x08005851
 8005800:	0800579d 	.word	0x0800579d
 8005804:	0800579d 	.word	0x0800579d
 8005808:	08005917 	.word	0x08005917
 800580c:	680b      	ldr	r3, [r1, #0]
 800580e:	1d1a      	adds	r2, r3, #4
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	600a      	str	r2, [r1, #0]
 8005814:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005818:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800581c:	2301      	movs	r3, #1
 800581e:	e0a3      	b.n	8005968 <_printf_i+0x1f4>
 8005820:	6825      	ldr	r5, [r4, #0]
 8005822:	6808      	ldr	r0, [r1, #0]
 8005824:	062e      	lsls	r6, r5, #24
 8005826:	f100 0304 	add.w	r3, r0, #4
 800582a:	d50a      	bpl.n	8005842 <_printf_i+0xce>
 800582c:	6805      	ldr	r5, [r0, #0]
 800582e:	600b      	str	r3, [r1, #0]
 8005830:	2d00      	cmp	r5, #0
 8005832:	da03      	bge.n	800583c <_printf_i+0xc8>
 8005834:	232d      	movs	r3, #45	; 0x2d
 8005836:	426d      	negs	r5, r5
 8005838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800583c:	485e      	ldr	r0, [pc, #376]	; (80059b8 <_printf_i+0x244>)
 800583e:	230a      	movs	r3, #10
 8005840:	e019      	b.n	8005876 <_printf_i+0x102>
 8005842:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005846:	6805      	ldr	r5, [r0, #0]
 8005848:	600b      	str	r3, [r1, #0]
 800584a:	bf18      	it	ne
 800584c:	b22d      	sxthne	r5, r5
 800584e:	e7ef      	b.n	8005830 <_printf_i+0xbc>
 8005850:	680b      	ldr	r3, [r1, #0]
 8005852:	6825      	ldr	r5, [r4, #0]
 8005854:	1d18      	adds	r0, r3, #4
 8005856:	6008      	str	r0, [r1, #0]
 8005858:	0628      	lsls	r0, r5, #24
 800585a:	d501      	bpl.n	8005860 <_printf_i+0xec>
 800585c:	681d      	ldr	r5, [r3, #0]
 800585e:	e002      	b.n	8005866 <_printf_i+0xf2>
 8005860:	0669      	lsls	r1, r5, #25
 8005862:	d5fb      	bpl.n	800585c <_printf_i+0xe8>
 8005864:	881d      	ldrh	r5, [r3, #0]
 8005866:	4854      	ldr	r0, [pc, #336]	; (80059b8 <_printf_i+0x244>)
 8005868:	2f6f      	cmp	r7, #111	; 0x6f
 800586a:	bf0c      	ite	eq
 800586c:	2308      	moveq	r3, #8
 800586e:	230a      	movne	r3, #10
 8005870:	2100      	movs	r1, #0
 8005872:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005876:	6866      	ldr	r6, [r4, #4]
 8005878:	60a6      	str	r6, [r4, #8]
 800587a:	2e00      	cmp	r6, #0
 800587c:	bfa2      	ittt	ge
 800587e:	6821      	ldrge	r1, [r4, #0]
 8005880:	f021 0104 	bicge.w	r1, r1, #4
 8005884:	6021      	strge	r1, [r4, #0]
 8005886:	b90d      	cbnz	r5, 800588c <_printf_i+0x118>
 8005888:	2e00      	cmp	r6, #0
 800588a:	d04d      	beq.n	8005928 <_printf_i+0x1b4>
 800588c:	4616      	mov	r6, r2
 800588e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005892:	fb03 5711 	mls	r7, r3, r1, r5
 8005896:	5dc7      	ldrb	r7, [r0, r7]
 8005898:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800589c:	462f      	mov	r7, r5
 800589e:	42bb      	cmp	r3, r7
 80058a0:	460d      	mov	r5, r1
 80058a2:	d9f4      	bls.n	800588e <_printf_i+0x11a>
 80058a4:	2b08      	cmp	r3, #8
 80058a6:	d10b      	bne.n	80058c0 <_printf_i+0x14c>
 80058a8:	6823      	ldr	r3, [r4, #0]
 80058aa:	07df      	lsls	r7, r3, #31
 80058ac:	d508      	bpl.n	80058c0 <_printf_i+0x14c>
 80058ae:	6923      	ldr	r3, [r4, #16]
 80058b0:	6861      	ldr	r1, [r4, #4]
 80058b2:	4299      	cmp	r1, r3
 80058b4:	bfde      	ittt	le
 80058b6:	2330      	movle	r3, #48	; 0x30
 80058b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80058bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80058c0:	1b92      	subs	r2, r2, r6
 80058c2:	6122      	str	r2, [r4, #16]
 80058c4:	f8cd a000 	str.w	sl, [sp]
 80058c8:	464b      	mov	r3, r9
 80058ca:	aa03      	add	r2, sp, #12
 80058cc:	4621      	mov	r1, r4
 80058ce:	4640      	mov	r0, r8
 80058d0:	f7ff fee2 	bl	8005698 <_printf_common>
 80058d4:	3001      	adds	r0, #1
 80058d6:	d14c      	bne.n	8005972 <_printf_i+0x1fe>
 80058d8:	f04f 30ff 	mov.w	r0, #4294967295
 80058dc:	b004      	add	sp, #16
 80058de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058e2:	4835      	ldr	r0, [pc, #212]	; (80059b8 <_printf_i+0x244>)
 80058e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80058e8:	6823      	ldr	r3, [r4, #0]
 80058ea:	680e      	ldr	r6, [r1, #0]
 80058ec:	061f      	lsls	r7, r3, #24
 80058ee:	f856 5b04 	ldr.w	r5, [r6], #4
 80058f2:	600e      	str	r6, [r1, #0]
 80058f4:	d514      	bpl.n	8005920 <_printf_i+0x1ac>
 80058f6:	07d9      	lsls	r1, r3, #31
 80058f8:	bf44      	itt	mi
 80058fa:	f043 0320 	orrmi.w	r3, r3, #32
 80058fe:	6023      	strmi	r3, [r4, #0]
 8005900:	b91d      	cbnz	r5, 800590a <_printf_i+0x196>
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	f023 0320 	bic.w	r3, r3, #32
 8005908:	6023      	str	r3, [r4, #0]
 800590a:	2310      	movs	r3, #16
 800590c:	e7b0      	b.n	8005870 <_printf_i+0xfc>
 800590e:	6823      	ldr	r3, [r4, #0]
 8005910:	f043 0320 	orr.w	r3, r3, #32
 8005914:	6023      	str	r3, [r4, #0]
 8005916:	2378      	movs	r3, #120	; 0x78
 8005918:	4828      	ldr	r0, [pc, #160]	; (80059bc <_printf_i+0x248>)
 800591a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800591e:	e7e3      	b.n	80058e8 <_printf_i+0x174>
 8005920:	065e      	lsls	r6, r3, #25
 8005922:	bf48      	it	mi
 8005924:	b2ad      	uxthmi	r5, r5
 8005926:	e7e6      	b.n	80058f6 <_printf_i+0x182>
 8005928:	4616      	mov	r6, r2
 800592a:	e7bb      	b.n	80058a4 <_printf_i+0x130>
 800592c:	680b      	ldr	r3, [r1, #0]
 800592e:	6826      	ldr	r6, [r4, #0]
 8005930:	6960      	ldr	r0, [r4, #20]
 8005932:	1d1d      	adds	r5, r3, #4
 8005934:	600d      	str	r5, [r1, #0]
 8005936:	0635      	lsls	r5, r6, #24
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	d501      	bpl.n	8005940 <_printf_i+0x1cc>
 800593c:	6018      	str	r0, [r3, #0]
 800593e:	e002      	b.n	8005946 <_printf_i+0x1d2>
 8005940:	0671      	lsls	r1, r6, #25
 8005942:	d5fb      	bpl.n	800593c <_printf_i+0x1c8>
 8005944:	8018      	strh	r0, [r3, #0]
 8005946:	2300      	movs	r3, #0
 8005948:	6123      	str	r3, [r4, #16]
 800594a:	4616      	mov	r6, r2
 800594c:	e7ba      	b.n	80058c4 <_printf_i+0x150>
 800594e:	680b      	ldr	r3, [r1, #0]
 8005950:	1d1a      	adds	r2, r3, #4
 8005952:	600a      	str	r2, [r1, #0]
 8005954:	681e      	ldr	r6, [r3, #0]
 8005956:	6862      	ldr	r2, [r4, #4]
 8005958:	2100      	movs	r1, #0
 800595a:	4630      	mov	r0, r6
 800595c:	f7fa fc38 	bl	80001d0 <memchr>
 8005960:	b108      	cbz	r0, 8005966 <_printf_i+0x1f2>
 8005962:	1b80      	subs	r0, r0, r6
 8005964:	6060      	str	r0, [r4, #4]
 8005966:	6863      	ldr	r3, [r4, #4]
 8005968:	6123      	str	r3, [r4, #16]
 800596a:	2300      	movs	r3, #0
 800596c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005970:	e7a8      	b.n	80058c4 <_printf_i+0x150>
 8005972:	6923      	ldr	r3, [r4, #16]
 8005974:	4632      	mov	r2, r6
 8005976:	4649      	mov	r1, r9
 8005978:	4640      	mov	r0, r8
 800597a:	47d0      	blx	sl
 800597c:	3001      	adds	r0, #1
 800597e:	d0ab      	beq.n	80058d8 <_printf_i+0x164>
 8005980:	6823      	ldr	r3, [r4, #0]
 8005982:	079b      	lsls	r3, r3, #30
 8005984:	d413      	bmi.n	80059ae <_printf_i+0x23a>
 8005986:	68e0      	ldr	r0, [r4, #12]
 8005988:	9b03      	ldr	r3, [sp, #12]
 800598a:	4298      	cmp	r0, r3
 800598c:	bfb8      	it	lt
 800598e:	4618      	movlt	r0, r3
 8005990:	e7a4      	b.n	80058dc <_printf_i+0x168>
 8005992:	2301      	movs	r3, #1
 8005994:	4632      	mov	r2, r6
 8005996:	4649      	mov	r1, r9
 8005998:	4640      	mov	r0, r8
 800599a:	47d0      	blx	sl
 800599c:	3001      	adds	r0, #1
 800599e:	d09b      	beq.n	80058d8 <_printf_i+0x164>
 80059a0:	3501      	adds	r5, #1
 80059a2:	68e3      	ldr	r3, [r4, #12]
 80059a4:	9903      	ldr	r1, [sp, #12]
 80059a6:	1a5b      	subs	r3, r3, r1
 80059a8:	42ab      	cmp	r3, r5
 80059aa:	dcf2      	bgt.n	8005992 <_printf_i+0x21e>
 80059ac:	e7eb      	b.n	8005986 <_printf_i+0x212>
 80059ae:	2500      	movs	r5, #0
 80059b0:	f104 0619 	add.w	r6, r4, #25
 80059b4:	e7f5      	b.n	80059a2 <_printf_i+0x22e>
 80059b6:	bf00      	nop
 80059b8:	08005c79 	.word	0x08005c79
 80059bc:	08005c8a 	.word	0x08005c8a

080059c0 <memcpy>:
 80059c0:	440a      	add	r2, r1
 80059c2:	4291      	cmp	r1, r2
 80059c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80059c8:	d100      	bne.n	80059cc <memcpy+0xc>
 80059ca:	4770      	bx	lr
 80059cc:	b510      	push	{r4, lr}
 80059ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059d6:	4291      	cmp	r1, r2
 80059d8:	d1f9      	bne.n	80059ce <memcpy+0xe>
 80059da:	bd10      	pop	{r4, pc}

080059dc <memmove>:
 80059dc:	4288      	cmp	r0, r1
 80059de:	b510      	push	{r4, lr}
 80059e0:	eb01 0402 	add.w	r4, r1, r2
 80059e4:	d902      	bls.n	80059ec <memmove+0x10>
 80059e6:	4284      	cmp	r4, r0
 80059e8:	4623      	mov	r3, r4
 80059ea:	d807      	bhi.n	80059fc <memmove+0x20>
 80059ec:	1e43      	subs	r3, r0, #1
 80059ee:	42a1      	cmp	r1, r4
 80059f0:	d008      	beq.n	8005a04 <memmove+0x28>
 80059f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80059fa:	e7f8      	b.n	80059ee <memmove+0x12>
 80059fc:	4402      	add	r2, r0
 80059fe:	4601      	mov	r1, r0
 8005a00:	428a      	cmp	r2, r1
 8005a02:	d100      	bne.n	8005a06 <memmove+0x2a>
 8005a04:	bd10      	pop	{r4, pc}
 8005a06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a0e:	e7f7      	b.n	8005a00 <memmove+0x24>

08005a10 <_free_r>:
 8005a10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a12:	2900      	cmp	r1, #0
 8005a14:	d048      	beq.n	8005aa8 <_free_r+0x98>
 8005a16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a1a:	9001      	str	r0, [sp, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f1a1 0404 	sub.w	r4, r1, #4
 8005a22:	bfb8      	it	lt
 8005a24:	18e4      	addlt	r4, r4, r3
 8005a26:	f000 f8d3 	bl	8005bd0 <__malloc_lock>
 8005a2a:	4a20      	ldr	r2, [pc, #128]	; (8005aac <_free_r+0x9c>)
 8005a2c:	9801      	ldr	r0, [sp, #4]
 8005a2e:	6813      	ldr	r3, [r2, #0]
 8005a30:	4615      	mov	r5, r2
 8005a32:	b933      	cbnz	r3, 8005a42 <_free_r+0x32>
 8005a34:	6063      	str	r3, [r4, #4]
 8005a36:	6014      	str	r4, [r2, #0]
 8005a38:	b003      	add	sp, #12
 8005a3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a3e:	f000 b8cd 	b.w	8005bdc <__malloc_unlock>
 8005a42:	42a3      	cmp	r3, r4
 8005a44:	d90b      	bls.n	8005a5e <_free_r+0x4e>
 8005a46:	6821      	ldr	r1, [r4, #0]
 8005a48:	1862      	adds	r2, r4, r1
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	bf04      	itt	eq
 8005a4e:	681a      	ldreq	r2, [r3, #0]
 8005a50:	685b      	ldreq	r3, [r3, #4]
 8005a52:	6063      	str	r3, [r4, #4]
 8005a54:	bf04      	itt	eq
 8005a56:	1852      	addeq	r2, r2, r1
 8005a58:	6022      	streq	r2, [r4, #0]
 8005a5a:	602c      	str	r4, [r5, #0]
 8005a5c:	e7ec      	b.n	8005a38 <_free_r+0x28>
 8005a5e:	461a      	mov	r2, r3
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	b10b      	cbz	r3, 8005a68 <_free_r+0x58>
 8005a64:	42a3      	cmp	r3, r4
 8005a66:	d9fa      	bls.n	8005a5e <_free_r+0x4e>
 8005a68:	6811      	ldr	r1, [r2, #0]
 8005a6a:	1855      	adds	r5, r2, r1
 8005a6c:	42a5      	cmp	r5, r4
 8005a6e:	d10b      	bne.n	8005a88 <_free_r+0x78>
 8005a70:	6824      	ldr	r4, [r4, #0]
 8005a72:	4421      	add	r1, r4
 8005a74:	1854      	adds	r4, r2, r1
 8005a76:	42a3      	cmp	r3, r4
 8005a78:	6011      	str	r1, [r2, #0]
 8005a7a:	d1dd      	bne.n	8005a38 <_free_r+0x28>
 8005a7c:	681c      	ldr	r4, [r3, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	6053      	str	r3, [r2, #4]
 8005a82:	4421      	add	r1, r4
 8005a84:	6011      	str	r1, [r2, #0]
 8005a86:	e7d7      	b.n	8005a38 <_free_r+0x28>
 8005a88:	d902      	bls.n	8005a90 <_free_r+0x80>
 8005a8a:	230c      	movs	r3, #12
 8005a8c:	6003      	str	r3, [r0, #0]
 8005a8e:	e7d3      	b.n	8005a38 <_free_r+0x28>
 8005a90:	6825      	ldr	r5, [r4, #0]
 8005a92:	1961      	adds	r1, r4, r5
 8005a94:	428b      	cmp	r3, r1
 8005a96:	bf04      	itt	eq
 8005a98:	6819      	ldreq	r1, [r3, #0]
 8005a9a:	685b      	ldreq	r3, [r3, #4]
 8005a9c:	6063      	str	r3, [r4, #4]
 8005a9e:	bf04      	itt	eq
 8005aa0:	1949      	addeq	r1, r1, r5
 8005aa2:	6021      	streq	r1, [r4, #0]
 8005aa4:	6054      	str	r4, [r2, #4]
 8005aa6:	e7c7      	b.n	8005a38 <_free_r+0x28>
 8005aa8:	b003      	add	sp, #12
 8005aaa:	bd30      	pop	{r4, r5, pc}
 8005aac:	20000090 	.word	0x20000090

08005ab0 <_malloc_r>:
 8005ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab2:	1ccd      	adds	r5, r1, #3
 8005ab4:	f025 0503 	bic.w	r5, r5, #3
 8005ab8:	3508      	adds	r5, #8
 8005aba:	2d0c      	cmp	r5, #12
 8005abc:	bf38      	it	cc
 8005abe:	250c      	movcc	r5, #12
 8005ac0:	2d00      	cmp	r5, #0
 8005ac2:	4606      	mov	r6, r0
 8005ac4:	db01      	blt.n	8005aca <_malloc_r+0x1a>
 8005ac6:	42a9      	cmp	r1, r5
 8005ac8:	d903      	bls.n	8005ad2 <_malloc_r+0x22>
 8005aca:	230c      	movs	r3, #12
 8005acc:	6033      	str	r3, [r6, #0]
 8005ace:	2000      	movs	r0, #0
 8005ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ad2:	f000 f87d 	bl	8005bd0 <__malloc_lock>
 8005ad6:	4921      	ldr	r1, [pc, #132]	; (8005b5c <_malloc_r+0xac>)
 8005ad8:	680a      	ldr	r2, [r1, #0]
 8005ada:	4614      	mov	r4, r2
 8005adc:	b99c      	cbnz	r4, 8005b06 <_malloc_r+0x56>
 8005ade:	4f20      	ldr	r7, [pc, #128]	; (8005b60 <_malloc_r+0xb0>)
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	b923      	cbnz	r3, 8005aee <_malloc_r+0x3e>
 8005ae4:	4621      	mov	r1, r4
 8005ae6:	4630      	mov	r0, r6
 8005ae8:	f000 f862 	bl	8005bb0 <_sbrk_r>
 8005aec:	6038      	str	r0, [r7, #0]
 8005aee:	4629      	mov	r1, r5
 8005af0:	4630      	mov	r0, r6
 8005af2:	f000 f85d 	bl	8005bb0 <_sbrk_r>
 8005af6:	1c43      	adds	r3, r0, #1
 8005af8:	d123      	bne.n	8005b42 <_malloc_r+0x92>
 8005afa:	230c      	movs	r3, #12
 8005afc:	6033      	str	r3, [r6, #0]
 8005afe:	4630      	mov	r0, r6
 8005b00:	f000 f86c 	bl	8005bdc <__malloc_unlock>
 8005b04:	e7e3      	b.n	8005ace <_malloc_r+0x1e>
 8005b06:	6823      	ldr	r3, [r4, #0]
 8005b08:	1b5b      	subs	r3, r3, r5
 8005b0a:	d417      	bmi.n	8005b3c <_malloc_r+0x8c>
 8005b0c:	2b0b      	cmp	r3, #11
 8005b0e:	d903      	bls.n	8005b18 <_malloc_r+0x68>
 8005b10:	6023      	str	r3, [r4, #0]
 8005b12:	441c      	add	r4, r3
 8005b14:	6025      	str	r5, [r4, #0]
 8005b16:	e004      	b.n	8005b22 <_malloc_r+0x72>
 8005b18:	6863      	ldr	r3, [r4, #4]
 8005b1a:	42a2      	cmp	r2, r4
 8005b1c:	bf0c      	ite	eq
 8005b1e:	600b      	streq	r3, [r1, #0]
 8005b20:	6053      	strne	r3, [r2, #4]
 8005b22:	4630      	mov	r0, r6
 8005b24:	f000 f85a 	bl	8005bdc <__malloc_unlock>
 8005b28:	f104 000b 	add.w	r0, r4, #11
 8005b2c:	1d23      	adds	r3, r4, #4
 8005b2e:	f020 0007 	bic.w	r0, r0, #7
 8005b32:	1ac2      	subs	r2, r0, r3
 8005b34:	d0cc      	beq.n	8005ad0 <_malloc_r+0x20>
 8005b36:	1a1b      	subs	r3, r3, r0
 8005b38:	50a3      	str	r3, [r4, r2]
 8005b3a:	e7c9      	b.n	8005ad0 <_malloc_r+0x20>
 8005b3c:	4622      	mov	r2, r4
 8005b3e:	6864      	ldr	r4, [r4, #4]
 8005b40:	e7cc      	b.n	8005adc <_malloc_r+0x2c>
 8005b42:	1cc4      	adds	r4, r0, #3
 8005b44:	f024 0403 	bic.w	r4, r4, #3
 8005b48:	42a0      	cmp	r0, r4
 8005b4a:	d0e3      	beq.n	8005b14 <_malloc_r+0x64>
 8005b4c:	1a21      	subs	r1, r4, r0
 8005b4e:	4630      	mov	r0, r6
 8005b50:	f000 f82e 	bl	8005bb0 <_sbrk_r>
 8005b54:	3001      	adds	r0, #1
 8005b56:	d1dd      	bne.n	8005b14 <_malloc_r+0x64>
 8005b58:	e7cf      	b.n	8005afa <_malloc_r+0x4a>
 8005b5a:	bf00      	nop
 8005b5c:	20000090 	.word	0x20000090
 8005b60:	20000094 	.word	0x20000094

08005b64 <_realloc_r>:
 8005b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b66:	4607      	mov	r7, r0
 8005b68:	4614      	mov	r4, r2
 8005b6a:	460e      	mov	r6, r1
 8005b6c:	b921      	cbnz	r1, 8005b78 <_realloc_r+0x14>
 8005b6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005b72:	4611      	mov	r1, r2
 8005b74:	f7ff bf9c 	b.w	8005ab0 <_malloc_r>
 8005b78:	b922      	cbnz	r2, 8005b84 <_realloc_r+0x20>
 8005b7a:	f7ff ff49 	bl	8005a10 <_free_r>
 8005b7e:	4625      	mov	r5, r4
 8005b80:	4628      	mov	r0, r5
 8005b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b84:	f000 f830 	bl	8005be8 <_malloc_usable_size_r>
 8005b88:	42a0      	cmp	r0, r4
 8005b8a:	d20f      	bcs.n	8005bac <_realloc_r+0x48>
 8005b8c:	4621      	mov	r1, r4
 8005b8e:	4638      	mov	r0, r7
 8005b90:	f7ff ff8e 	bl	8005ab0 <_malloc_r>
 8005b94:	4605      	mov	r5, r0
 8005b96:	2800      	cmp	r0, #0
 8005b98:	d0f2      	beq.n	8005b80 <_realloc_r+0x1c>
 8005b9a:	4631      	mov	r1, r6
 8005b9c:	4622      	mov	r2, r4
 8005b9e:	f7ff ff0f 	bl	80059c0 <memcpy>
 8005ba2:	4631      	mov	r1, r6
 8005ba4:	4638      	mov	r0, r7
 8005ba6:	f7ff ff33 	bl	8005a10 <_free_r>
 8005baa:	e7e9      	b.n	8005b80 <_realloc_r+0x1c>
 8005bac:	4635      	mov	r5, r6
 8005bae:	e7e7      	b.n	8005b80 <_realloc_r+0x1c>

08005bb0 <_sbrk_r>:
 8005bb0:	b538      	push	{r3, r4, r5, lr}
 8005bb2:	4d06      	ldr	r5, [pc, #24]	; (8005bcc <_sbrk_r+0x1c>)
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	4604      	mov	r4, r0
 8005bb8:	4608      	mov	r0, r1
 8005bba:	602b      	str	r3, [r5, #0]
 8005bbc:	f7fa ffc4 	bl	8000b48 <_sbrk>
 8005bc0:	1c43      	adds	r3, r0, #1
 8005bc2:	d102      	bne.n	8005bca <_sbrk_r+0x1a>
 8005bc4:	682b      	ldr	r3, [r5, #0]
 8005bc6:	b103      	cbz	r3, 8005bca <_sbrk_r+0x1a>
 8005bc8:	6023      	str	r3, [r4, #0]
 8005bca:	bd38      	pop	{r3, r4, r5, pc}
 8005bcc:	20000218 	.word	0x20000218

08005bd0 <__malloc_lock>:
 8005bd0:	4801      	ldr	r0, [pc, #4]	; (8005bd8 <__malloc_lock+0x8>)
 8005bd2:	f000 b811 	b.w	8005bf8 <__retarget_lock_acquire_recursive>
 8005bd6:	bf00      	nop
 8005bd8:	20000220 	.word	0x20000220

08005bdc <__malloc_unlock>:
 8005bdc:	4801      	ldr	r0, [pc, #4]	; (8005be4 <__malloc_unlock+0x8>)
 8005bde:	f000 b80c 	b.w	8005bfa <__retarget_lock_release_recursive>
 8005be2:	bf00      	nop
 8005be4:	20000220 	.word	0x20000220

08005be8 <_malloc_usable_size_r>:
 8005be8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bec:	1f18      	subs	r0, r3, #4
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	bfbc      	itt	lt
 8005bf2:	580b      	ldrlt	r3, [r1, r0]
 8005bf4:	18c0      	addlt	r0, r0, r3
 8005bf6:	4770      	bx	lr

08005bf8 <__retarget_lock_acquire_recursive>:
 8005bf8:	4770      	bx	lr

08005bfa <__retarget_lock_release_recursive>:
 8005bfa:	4770      	bx	lr

08005bfc <_init>:
 8005bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfe:	bf00      	nop
 8005c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c02:	bc08      	pop	{r3}
 8005c04:	469e      	mov	lr, r3
 8005c06:	4770      	bx	lr

08005c08 <_fini>:
 8005c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c0a:	bf00      	nop
 8005c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c0e:	bc08      	pop	{r3}
 8005c10:	469e      	mov	lr, r3
 8005c12:	4770      	bx	lr
