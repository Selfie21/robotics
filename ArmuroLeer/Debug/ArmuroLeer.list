
ArmuroLeer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005340  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080054d0  080054d0  000154d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005518  08005518  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005518  08005518  00015518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005520  08005520  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005520  08005520  00015520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005524  08005524  00015524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  20000010  08005534  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08005534  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d93  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a4e  00000000  00000000  00034dcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  00037820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010a8  00000000  00000000  000389f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023537  00000000  00000000  00039a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000144a9  00000000  00000000  0005cfcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbcf7  00000000  00000000  00071478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014d16f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b54  00000000  00000000  0014d1c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080054b8 	.word	0x080054b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080054b8 	.word	0x080054b8

080001d0 <__aeabi_dmul>:
 80001d0:	b570      	push	{r4, r5, r6, lr}
 80001d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001de:	bf1d      	ittte	ne
 80001e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001e4:	ea94 0f0c 	teqne	r4, ip
 80001e8:	ea95 0f0c 	teqne	r5, ip
 80001ec:	f000 f8de 	bleq	80003ac <__aeabi_dmul+0x1dc>
 80001f0:	442c      	add	r4, r5
 80001f2:	ea81 0603 	eor.w	r6, r1, r3
 80001f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000202:	bf18      	it	ne
 8000204:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000208:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800020c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000210:	d038      	beq.n	8000284 <__aeabi_dmul+0xb4>
 8000212:	fba0 ce02 	umull	ip, lr, r0, r2
 8000216:	f04f 0500 	mov.w	r5, #0
 800021a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800021e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000222:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000226:	f04f 0600 	mov.w	r6, #0
 800022a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800022e:	f09c 0f00 	teq	ip, #0
 8000232:	bf18      	it	ne
 8000234:	f04e 0e01 	orrne.w	lr, lr, #1
 8000238:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800023c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000240:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000244:	d204      	bcs.n	8000250 <__aeabi_dmul+0x80>
 8000246:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800024a:	416d      	adcs	r5, r5
 800024c:	eb46 0606 	adc.w	r6, r6, r6
 8000250:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000254:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000258:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800025c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000260:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000264:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000268:	bf88      	it	hi
 800026a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800026e:	d81e      	bhi.n	80002ae <__aeabi_dmul+0xde>
 8000270:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000274:	bf08      	it	eq
 8000276:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800027a:	f150 0000 	adcs.w	r0, r0, #0
 800027e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000288:	ea46 0101 	orr.w	r1, r6, r1
 800028c:	ea40 0002 	orr.w	r0, r0, r2
 8000290:	ea81 0103 	eor.w	r1, r1, r3
 8000294:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000298:	bfc2      	ittt	gt
 800029a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800029e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002a2:	bd70      	popgt	{r4, r5, r6, pc}
 80002a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a8:	f04f 0e00 	mov.w	lr, #0
 80002ac:	3c01      	subs	r4, #1
 80002ae:	f300 80ab 	bgt.w	8000408 <__aeabi_dmul+0x238>
 80002b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002b6:	bfde      	ittt	le
 80002b8:	2000      	movle	r0, #0
 80002ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002be:	bd70      	pople	{r4, r5, r6, pc}
 80002c0:	f1c4 0400 	rsb	r4, r4, #0
 80002c4:	3c20      	subs	r4, #32
 80002c6:	da35      	bge.n	8000334 <__aeabi_dmul+0x164>
 80002c8:	340c      	adds	r4, #12
 80002ca:	dc1b      	bgt.n	8000304 <__aeabi_dmul+0x134>
 80002cc:	f104 0414 	add.w	r4, r4, #20
 80002d0:	f1c4 0520 	rsb	r5, r4, #32
 80002d4:	fa00 f305 	lsl.w	r3, r0, r5
 80002d8:	fa20 f004 	lsr.w	r0, r0, r4
 80002dc:	fa01 f205 	lsl.w	r2, r1, r5
 80002e0:	ea40 0002 	orr.w	r0, r0, r2
 80002e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f0:	fa21 f604 	lsr.w	r6, r1, r4
 80002f4:	eb42 0106 	adc.w	r1, r2, r6
 80002f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002fc:	bf08      	it	eq
 80002fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	f1c4 040c 	rsb	r4, r4, #12
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f304 	lsl.w	r3, r0, r4
 8000310:	fa20 f005 	lsr.w	r0, r0, r5
 8000314:	fa01 f204 	lsl.w	r2, r1, r4
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000320:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000324:	f141 0100 	adc.w	r1, r1, #0
 8000328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800032c:	bf08      	it	eq
 800032e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f1c4 0520 	rsb	r5, r4, #32
 8000338:	fa00 f205 	lsl.w	r2, r0, r5
 800033c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000340:	fa20 f304 	lsr.w	r3, r0, r4
 8000344:	fa01 f205 	lsl.w	r2, r1, r5
 8000348:	ea43 0302 	orr.w	r3, r3, r2
 800034c:	fa21 f004 	lsr.w	r0, r1, r4
 8000350:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000354:	fa21 f204 	lsr.w	r2, r1, r4
 8000358:	ea20 0002 	bic.w	r0, r0, r2
 800035c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f094 0f00 	teq	r4, #0
 8000370:	d10f      	bne.n	8000392 <__aeabi_dmul+0x1c2>
 8000372:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000376:	0040      	lsls	r0, r0, #1
 8000378:	eb41 0101 	adc.w	r1, r1, r1
 800037c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000380:	bf08      	it	eq
 8000382:	3c01      	subeq	r4, #1
 8000384:	d0f7      	beq.n	8000376 <__aeabi_dmul+0x1a6>
 8000386:	ea41 0106 	orr.w	r1, r1, r6
 800038a:	f095 0f00 	teq	r5, #0
 800038e:	bf18      	it	ne
 8000390:	4770      	bxne	lr
 8000392:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000396:	0052      	lsls	r2, r2, #1
 8000398:	eb43 0303 	adc.w	r3, r3, r3
 800039c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a0:	bf08      	it	eq
 80003a2:	3d01      	subeq	r5, #1
 80003a4:	d0f7      	beq.n	8000396 <__aeabi_dmul+0x1c6>
 80003a6:	ea43 0306 	orr.w	r3, r3, r6
 80003aa:	4770      	bx	lr
 80003ac:	ea94 0f0c 	teq	r4, ip
 80003b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003b4:	bf18      	it	ne
 80003b6:	ea95 0f0c 	teqne	r5, ip
 80003ba:	d00c      	beq.n	80003d6 <__aeabi_dmul+0x206>
 80003bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c0:	bf18      	it	ne
 80003c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003c6:	d1d1      	bne.n	800036c <__aeabi_dmul+0x19c>
 80003c8:	ea81 0103 	eor.w	r1, r1, r3
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd70      	pop	{r4, r5, r6, pc}
 80003d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003da:	bf06      	itte	eq
 80003dc:	4610      	moveq	r0, r2
 80003de:	4619      	moveq	r1, r3
 80003e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e4:	d019      	beq.n	800041a <__aeabi_dmul+0x24a>
 80003e6:	ea94 0f0c 	teq	r4, ip
 80003ea:	d102      	bne.n	80003f2 <__aeabi_dmul+0x222>
 80003ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f0:	d113      	bne.n	800041a <__aeabi_dmul+0x24a>
 80003f2:	ea95 0f0c 	teq	r5, ip
 80003f6:	d105      	bne.n	8000404 <__aeabi_dmul+0x234>
 80003f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003fc:	bf1c      	itt	ne
 80003fe:	4610      	movne	r0, r2
 8000400:	4619      	movne	r1, r3
 8000402:	d10a      	bne.n	800041a <__aeabi_dmul+0x24a>
 8000404:	ea81 0103 	eor.w	r1, r1, r3
 8000408:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800040c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000410:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000414:	f04f 0000 	mov.w	r0, #0
 8000418:	bd70      	pop	{r4, r5, r6, pc}
 800041a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800041e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000422:	bd70      	pop	{r4, r5, r6, pc}

08000424 <__gedf2>:
 8000424:	f04f 3cff 	mov.w	ip, #4294967295
 8000428:	e006      	b.n	8000438 <__cmpdf2+0x4>
 800042a:	bf00      	nop

0800042c <__ledf2>:
 800042c:	f04f 0c01 	mov.w	ip, #1
 8000430:	e002      	b.n	8000438 <__cmpdf2+0x4>
 8000432:	bf00      	nop

08000434 <__cmpdf2>:
 8000434:	f04f 0c01 	mov.w	ip, #1
 8000438:	f84d cd04 	str.w	ip, [sp, #-4]!
 800043c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000440:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000444:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000448:	bf18      	it	ne
 800044a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800044e:	d01b      	beq.n	8000488 <__cmpdf2+0x54>
 8000450:	b001      	add	sp, #4
 8000452:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000456:	bf0c      	ite	eq
 8000458:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800045c:	ea91 0f03 	teqne	r1, r3
 8000460:	bf02      	ittt	eq
 8000462:	ea90 0f02 	teqeq	r0, r2
 8000466:	2000      	moveq	r0, #0
 8000468:	4770      	bxeq	lr
 800046a:	f110 0f00 	cmn.w	r0, #0
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf58      	it	pl
 8000474:	4299      	cmppl	r1, r3
 8000476:	bf08      	it	eq
 8000478:	4290      	cmpeq	r0, r2
 800047a:	bf2c      	ite	cs
 800047c:	17d8      	asrcs	r0, r3, #31
 800047e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000482:	f040 0001 	orr.w	r0, r0, #1
 8000486:	4770      	bx	lr
 8000488:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800048c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000490:	d102      	bne.n	8000498 <__cmpdf2+0x64>
 8000492:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000496:	d107      	bne.n	80004a8 <__cmpdf2+0x74>
 8000498:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800049c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004a0:	d1d6      	bne.n	8000450 <__cmpdf2+0x1c>
 80004a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80004a6:	d0d3      	beq.n	8000450 <__cmpdf2+0x1c>
 80004a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop

080004b0 <__aeabi_cdrcmple>:
 80004b0:	4684      	mov	ip, r0
 80004b2:	4610      	mov	r0, r2
 80004b4:	4662      	mov	r2, ip
 80004b6:	468c      	mov	ip, r1
 80004b8:	4619      	mov	r1, r3
 80004ba:	4663      	mov	r3, ip
 80004bc:	e000      	b.n	80004c0 <__aeabi_cdcmpeq>
 80004be:	bf00      	nop

080004c0 <__aeabi_cdcmpeq>:
 80004c0:	b501      	push	{r0, lr}
 80004c2:	f7ff ffb7 	bl	8000434 <__cmpdf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	bf48      	it	mi
 80004ca:	f110 0f00 	cmnmi.w	r0, #0
 80004ce:	bd01      	pop	{r0, pc}

080004d0 <__aeabi_dcmpeq>:
 80004d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80004d4:	f7ff fff4 	bl	80004c0 <__aeabi_cdcmpeq>
 80004d8:	bf0c      	ite	eq
 80004da:	2001      	moveq	r0, #1
 80004dc:	2000      	movne	r0, #0
 80004de:	f85d fb08 	ldr.w	pc, [sp], #8
 80004e2:	bf00      	nop

080004e4 <__aeabi_dcmplt>:
 80004e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80004e8:	f7ff ffea 	bl	80004c0 <__aeabi_cdcmpeq>
 80004ec:	bf34      	ite	cc
 80004ee:	2001      	movcc	r0, #1
 80004f0:	2000      	movcs	r0, #0
 80004f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80004f6:	bf00      	nop

080004f8 <__aeabi_dcmple>:
 80004f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80004fc:	f7ff ffe0 	bl	80004c0 <__aeabi_cdcmpeq>
 8000500:	bf94      	ite	ls
 8000502:	2001      	movls	r0, #1
 8000504:	2000      	movhi	r0, #0
 8000506:	f85d fb08 	ldr.w	pc, [sp], #8
 800050a:	bf00      	nop

0800050c <__aeabi_dcmpge>:
 800050c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000510:	f7ff ffce 	bl	80004b0 <__aeabi_cdrcmple>
 8000514:	bf94      	ite	ls
 8000516:	2001      	movls	r0, #1
 8000518:	2000      	movhi	r0, #0
 800051a:	f85d fb08 	ldr.w	pc, [sp], #8
 800051e:	bf00      	nop

08000520 <__aeabi_dcmpgt>:
 8000520:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000524:	f7ff ffc4 	bl	80004b0 <__aeabi_cdrcmple>
 8000528:	bf34      	ite	cc
 800052a:	2001      	movcc	r0, #1
 800052c:	2000      	movcs	r0, #0
 800052e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000532:	bf00      	nop

08000534 <__aeabi_d2iz>:
 8000534:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000538:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800053c:	d215      	bcs.n	800056a <__aeabi_d2iz+0x36>
 800053e:	d511      	bpl.n	8000564 <__aeabi_d2iz+0x30>
 8000540:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000544:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000548:	d912      	bls.n	8000570 <__aeabi_d2iz+0x3c>
 800054a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800054e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000552:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000556:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800055a:	fa23 f002 	lsr.w	r0, r3, r2
 800055e:	bf18      	it	ne
 8000560:	4240      	negne	r0, r0
 8000562:	4770      	bx	lr
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	4770      	bx	lr
 800056a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800056e:	d105      	bne.n	800057c <__aeabi_d2iz+0x48>
 8000570:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800057a:	4770      	bx	lr
 800057c:	f04f 0000 	mov.w	r0, #0
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <__aeabi_uldivmod>:
 8000584:	b953      	cbnz	r3, 800059c <__aeabi_uldivmod+0x18>
 8000586:	b94a      	cbnz	r2, 800059c <__aeabi_uldivmod+0x18>
 8000588:	2900      	cmp	r1, #0
 800058a:	bf08      	it	eq
 800058c:	2800      	cmpeq	r0, #0
 800058e:	bf1c      	itt	ne
 8000590:	f04f 31ff 	movne.w	r1, #4294967295
 8000594:	f04f 30ff 	movne.w	r0, #4294967295
 8000598:	f000 b96e 	b.w	8000878 <__aeabi_idiv0>
 800059c:	f1ad 0c08 	sub.w	ip, sp, #8
 80005a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005a4:	f000 f806 	bl	80005b4 <__udivmoddi4>
 80005a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005b0:	b004      	add	sp, #16
 80005b2:	4770      	bx	lr

080005b4 <__udivmoddi4>:
 80005b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005b8:	9d08      	ldr	r5, [sp, #32]
 80005ba:	4604      	mov	r4, r0
 80005bc:	468c      	mov	ip, r1
 80005be:	2b00      	cmp	r3, #0
 80005c0:	f040 8083 	bne.w	80006ca <__udivmoddi4+0x116>
 80005c4:	428a      	cmp	r2, r1
 80005c6:	4617      	mov	r7, r2
 80005c8:	d947      	bls.n	800065a <__udivmoddi4+0xa6>
 80005ca:	fab2 f282 	clz	r2, r2
 80005ce:	b142      	cbz	r2, 80005e2 <__udivmoddi4+0x2e>
 80005d0:	f1c2 0020 	rsb	r0, r2, #32
 80005d4:	fa24 f000 	lsr.w	r0, r4, r0
 80005d8:	4091      	lsls	r1, r2
 80005da:	4097      	lsls	r7, r2
 80005dc:	ea40 0c01 	orr.w	ip, r0, r1
 80005e0:	4094      	lsls	r4, r2
 80005e2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80005e6:	0c23      	lsrs	r3, r4, #16
 80005e8:	fbbc f6f8 	udiv	r6, ip, r8
 80005ec:	fa1f fe87 	uxth.w	lr, r7
 80005f0:	fb08 c116 	mls	r1, r8, r6, ip
 80005f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f8:	fb06 f10e 	mul.w	r1, r6, lr
 80005fc:	4299      	cmp	r1, r3
 80005fe:	d909      	bls.n	8000614 <__udivmoddi4+0x60>
 8000600:	18fb      	adds	r3, r7, r3
 8000602:	f106 30ff 	add.w	r0, r6, #4294967295
 8000606:	f080 8119 	bcs.w	800083c <__udivmoddi4+0x288>
 800060a:	4299      	cmp	r1, r3
 800060c:	f240 8116 	bls.w	800083c <__udivmoddi4+0x288>
 8000610:	3e02      	subs	r6, #2
 8000612:	443b      	add	r3, r7
 8000614:	1a5b      	subs	r3, r3, r1
 8000616:	b2a4      	uxth	r4, r4
 8000618:	fbb3 f0f8 	udiv	r0, r3, r8
 800061c:	fb08 3310 	mls	r3, r8, r0, r3
 8000620:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000624:	fb00 fe0e 	mul.w	lr, r0, lr
 8000628:	45a6      	cmp	lr, r4
 800062a:	d909      	bls.n	8000640 <__udivmoddi4+0x8c>
 800062c:	193c      	adds	r4, r7, r4
 800062e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000632:	f080 8105 	bcs.w	8000840 <__udivmoddi4+0x28c>
 8000636:	45a6      	cmp	lr, r4
 8000638:	f240 8102 	bls.w	8000840 <__udivmoddi4+0x28c>
 800063c:	3802      	subs	r0, #2
 800063e:	443c      	add	r4, r7
 8000640:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000644:	eba4 040e 	sub.w	r4, r4, lr
 8000648:	2600      	movs	r6, #0
 800064a:	b11d      	cbz	r5, 8000654 <__udivmoddi4+0xa0>
 800064c:	40d4      	lsrs	r4, r2
 800064e:	2300      	movs	r3, #0
 8000650:	e9c5 4300 	strd	r4, r3, [r5]
 8000654:	4631      	mov	r1, r6
 8000656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800065a:	b902      	cbnz	r2, 800065e <__udivmoddi4+0xaa>
 800065c:	deff      	udf	#255	; 0xff
 800065e:	fab2 f282 	clz	r2, r2
 8000662:	2a00      	cmp	r2, #0
 8000664:	d150      	bne.n	8000708 <__udivmoddi4+0x154>
 8000666:	1bcb      	subs	r3, r1, r7
 8000668:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800066c:	fa1f f887 	uxth.w	r8, r7
 8000670:	2601      	movs	r6, #1
 8000672:	fbb3 fcfe 	udiv	ip, r3, lr
 8000676:	0c21      	lsrs	r1, r4, #16
 8000678:	fb0e 331c 	mls	r3, lr, ip, r3
 800067c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000680:	fb08 f30c 	mul.w	r3, r8, ip
 8000684:	428b      	cmp	r3, r1
 8000686:	d907      	bls.n	8000698 <__udivmoddi4+0xe4>
 8000688:	1879      	adds	r1, r7, r1
 800068a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800068e:	d202      	bcs.n	8000696 <__udivmoddi4+0xe2>
 8000690:	428b      	cmp	r3, r1
 8000692:	f200 80e9 	bhi.w	8000868 <__udivmoddi4+0x2b4>
 8000696:	4684      	mov	ip, r0
 8000698:	1ac9      	subs	r1, r1, r3
 800069a:	b2a3      	uxth	r3, r4
 800069c:	fbb1 f0fe 	udiv	r0, r1, lr
 80006a0:	fb0e 1110 	mls	r1, lr, r0, r1
 80006a4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80006a8:	fb08 f800 	mul.w	r8, r8, r0
 80006ac:	45a0      	cmp	r8, r4
 80006ae:	d907      	bls.n	80006c0 <__udivmoddi4+0x10c>
 80006b0:	193c      	adds	r4, r7, r4
 80006b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006b6:	d202      	bcs.n	80006be <__udivmoddi4+0x10a>
 80006b8:	45a0      	cmp	r8, r4
 80006ba:	f200 80d9 	bhi.w	8000870 <__udivmoddi4+0x2bc>
 80006be:	4618      	mov	r0, r3
 80006c0:	eba4 0408 	sub.w	r4, r4, r8
 80006c4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80006c8:	e7bf      	b.n	800064a <__udivmoddi4+0x96>
 80006ca:	428b      	cmp	r3, r1
 80006cc:	d909      	bls.n	80006e2 <__udivmoddi4+0x12e>
 80006ce:	2d00      	cmp	r5, #0
 80006d0:	f000 80b1 	beq.w	8000836 <__udivmoddi4+0x282>
 80006d4:	2600      	movs	r6, #0
 80006d6:	e9c5 0100 	strd	r0, r1, [r5]
 80006da:	4630      	mov	r0, r6
 80006dc:	4631      	mov	r1, r6
 80006de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006e2:	fab3 f683 	clz	r6, r3
 80006e6:	2e00      	cmp	r6, #0
 80006e8:	d14a      	bne.n	8000780 <__udivmoddi4+0x1cc>
 80006ea:	428b      	cmp	r3, r1
 80006ec:	d302      	bcc.n	80006f4 <__udivmoddi4+0x140>
 80006ee:	4282      	cmp	r2, r0
 80006f0:	f200 80b8 	bhi.w	8000864 <__udivmoddi4+0x2b0>
 80006f4:	1a84      	subs	r4, r0, r2
 80006f6:	eb61 0103 	sbc.w	r1, r1, r3
 80006fa:	2001      	movs	r0, #1
 80006fc:	468c      	mov	ip, r1
 80006fe:	2d00      	cmp	r5, #0
 8000700:	d0a8      	beq.n	8000654 <__udivmoddi4+0xa0>
 8000702:	e9c5 4c00 	strd	r4, ip, [r5]
 8000706:	e7a5      	b.n	8000654 <__udivmoddi4+0xa0>
 8000708:	f1c2 0320 	rsb	r3, r2, #32
 800070c:	fa20 f603 	lsr.w	r6, r0, r3
 8000710:	4097      	lsls	r7, r2
 8000712:	fa01 f002 	lsl.w	r0, r1, r2
 8000716:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800071a:	40d9      	lsrs	r1, r3
 800071c:	4330      	orrs	r0, r6
 800071e:	0c03      	lsrs	r3, r0, #16
 8000720:	fbb1 f6fe 	udiv	r6, r1, lr
 8000724:	fa1f f887 	uxth.w	r8, r7
 8000728:	fb0e 1116 	mls	r1, lr, r6, r1
 800072c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000730:	fb06 f108 	mul.w	r1, r6, r8
 8000734:	4299      	cmp	r1, r3
 8000736:	fa04 f402 	lsl.w	r4, r4, r2
 800073a:	d909      	bls.n	8000750 <__udivmoddi4+0x19c>
 800073c:	18fb      	adds	r3, r7, r3
 800073e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000742:	f080 808d 	bcs.w	8000860 <__udivmoddi4+0x2ac>
 8000746:	4299      	cmp	r1, r3
 8000748:	f240 808a 	bls.w	8000860 <__udivmoddi4+0x2ac>
 800074c:	3e02      	subs	r6, #2
 800074e:	443b      	add	r3, r7
 8000750:	1a5b      	subs	r3, r3, r1
 8000752:	b281      	uxth	r1, r0
 8000754:	fbb3 f0fe 	udiv	r0, r3, lr
 8000758:	fb0e 3310 	mls	r3, lr, r0, r3
 800075c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000760:	fb00 f308 	mul.w	r3, r0, r8
 8000764:	428b      	cmp	r3, r1
 8000766:	d907      	bls.n	8000778 <__udivmoddi4+0x1c4>
 8000768:	1879      	adds	r1, r7, r1
 800076a:	f100 3cff 	add.w	ip, r0, #4294967295
 800076e:	d273      	bcs.n	8000858 <__udivmoddi4+0x2a4>
 8000770:	428b      	cmp	r3, r1
 8000772:	d971      	bls.n	8000858 <__udivmoddi4+0x2a4>
 8000774:	3802      	subs	r0, #2
 8000776:	4439      	add	r1, r7
 8000778:	1acb      	subs	r3, r1, r3
 800077a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800077e:	e778      	b.n	8000672 <__udivmoddi4+0xbe>
 8000780:	f1c6 0c20 	rsb	ip, r6, #32
 8000784:	fa03 f406 	lsl.w	r4, r3, r6
 8000788:	fa22 f30c 	lsr.w	r3, r2, ip
 800078c:	431c      	orrs	r4, r3
 800078e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000792:	fa01 f306 	lsl.w	r3, r1, r6
 8000796:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800079a:	fa21 f10c 	lsr.w	r1, r1, ip
 800079e:	431f      	orrs	r7, r3
 80007a0:	0c3b      	lsrs	r3, r7, #16
 80007a2:	fbb1 f9fe 	udiv	r9, r1, lr
 80007a6:	fa1f f884 	uxth.w	r8, r4
 80007aa:	fb0e 1119 	mls	r1, lr, r9, r1
 80007ae:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80007b2:	fb09 fa08 	mul.w	sl, r9, r8
 80007b6:	458a      	cmp	sl, r1
 80007b8:	fa02 f206 	lsl.w	r2, r2, r6
 80007bc:	fa00 f306 	lsl.w	r3, r0, r6
 80007c0:	d908      	bls.n	80007d4 <__udivmoddi4+0x220>
 80007c2:	1861      	adds	r1, r4, r1
 80007c4:	f109 30ff 	add.w	r0, r9, #4294967295
 80007c8:	d248      	bcs.n	800085c <__udivmoddi4+0x2a8>
 80007ca:	458a      	cmp	sl, r1
 80007cc:	d946      	bls.n	800085c <__udivmoddi4+0x2a8>
 80007ce:	f1a9 0902 	sub.w	r9, r9, #2
 80007d2:	4421      	add	r1, r4
 80007d4:	eba1 010a 	sub.w	r1, r1, sl
 80007d8:	b2bf      	uxth	r7, r7
 80007da:	fbb1 f0fe 	udiv	r0, r1, lr
 80007de:	fb0e 1110 	mls	r1, lr, r0, r1
 80007e2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80007e6:	fb00 f808 	mul.w	r8, r0, r8
 80007ea:	45b8      	cmp	r8, r7
 80007ec:	d907      	bls.n	80007fe <__udivmoddi4+0x24a>
 80007ee:	19e7      	adds	r7, r4, r7
 80007f0:	f100 31ff 	add.w	r1, r0, #4294967295
 80007f4:	d22e      	bcs.n	8000854 <__udivmoddi4+0x2a0>
 80007f6:	45b8      	cmp	r8, r7
 80007f8:	d92c      	bls.n	8000854 <__udivmoddi4+0x2a0>
 80007fa:	3802      	subs	r0, #2
 80007fc:	4427      	add	r7, r4
 80007fe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000802:	eba7 0708 	sub.w	r7, r7, r8
 8000806:	fba0 8902 	umull	r8, r9, r0, r2
 800080a:	454f      	cmp	r7, r9
 800080c:	46c6      	mov	lr, r8
 800080e:	4649      	mov	r1, r9
 8000810:	d31a      	bcc.n	8000848 <__udivmoddi4+0x294>
 8000812:	d017      	beq.n	8000844 <__udivmoddi4+0x290>
 8000814:	b15d      	cbz	r5, 800082e <__udivmoddi4+0x27a>
 8000816:	ebb3 020e 	subs.w	r2, r3, lr
 800081a:	eb67 0701 	sbc.w	r7, r7, r1
 800081e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000822:	40f2      	lsrs	r2, r6
 8000824:	ea4c 0202 	orr.w	r2, ip, r2
 8000828:	40f7      	lsrs	r7, r6
 800082a:	e9c5 2700 	strd	r2, r7, [r5]
 800082e:	2600      	movs	r6, #0
 8000830:	4631      	mov	r1, r6
 8000832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000836:	462e      	mov	r6, r5
 8000838:	4628      	mov	r0, r5
 800083a:	e70b      	b.n	8000654 <__udivmoddi4+0xa0>
 800083c:	4606      	mov	r6, r0
 800083e:	e6e9      	b.n	8000614 <__udivmoddi4+0x60>
 8000840:	4618      	mov	r0, r3
 8000842:	e6fd      	b.n	8000640 <__udivmoddi4+0x8c>
 8000844:	4543      	cmp	r3, r8
 8000846:	d2e5      	bcs.n	8000814 <__udivmoddi4+0x260>
 8000848:	ebb8 0e02 	subs.w	lr, r8, r2
 800084c:	eb69 0104 	sbc.w	r1, r9, r4
 8000850:	3801      	subs	r0, #1
 8000852:	e7df      	b.n	8000814 <__udivmoddi4+0x260>
 8000854:	4608      	mov	r0, r1
 8000856:	e7d2      	b.n	80007fe <__udivmoddi4+0x24a>
 8000858:	4660      	mov	r0, ip
 800085a:	e78d      	b.n	8000778 <__udivmoddi4+0x1c4>
 800085c:	4681      	mov	r9, r0
 800085e:	e7b9      	b.n	80007d4 <__udivmoddi4+0x220>
 8000860:	4666      	mov	r6, ip
 8000862:	e775      	b.n	8000750 <__udivmoddi4+0x19c>
 8000864:	4630      	mov	r0, r6
 8000866:	e74a      	b.n	80006fe <__udivmoddi4+0x14a>
 8000868:	f1ac 0c02 	sub.w	ip, ip, #2
 800086c:	4439      	add	r1, r7
 800086e:	e713      	b.n	8000698 <__udivmoddi4+0xe4>
 8000870:	3802      	subs	r0, #2
 8000872:	443c      	add	r4, r7
 8000874:	e724      	b.n	80006c0 <__udivmoddi4+0x10c>
 8000876:	bf00      	nop

08000878 <__aeabi_idiv0>:
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop

0800087c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000882:	463b      	mov	r3, r7
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
 800088e:	611a      	str	r2, [r3, #16]
 8000890:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000892:	4b4d      	ldr	r3, [pc, #308]	; (80009c8 <MX_ADC1_Init+0x14c>)
 8000894:	4a4d      	ldr	r2, [pc, #308]	; (80009cc <MX_ADC1_Init+0x150>)
 8000896:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000898:	4b4b      	ldr	r3, [pc, #300]	; (80009c8 <MX_ADC1_Init+0x14c>)
 800089a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800089e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008a0:	4b49      	ldr	r3, [pc, #292]	; (80009c8 <MX_ADC1_Init+0x14c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008a6:	4b48      	ldr	r3, [pc, #288]	; (80009c8 <MX_ADC1_Init+0x14c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008ac:	4b46      	ldr	r3, [pc, #280]	; (80009c8 <MX_ADC1_Init+0x14c>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80008b2:	4b45      	ldr	r3, [pc, #276]	; (80009c8 <MX_ADC1_Init+0x14c>)
 80008b4:	2208      	movs	r2, #8
 80008b6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008b8:	4b43      	ldr	r3, [pc, #268]	; (80009c8 <MX_ADC1_Init+0x14c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008be:	4b42      	ldr	r3, [pc, #264]	; (80009c8 <MX_ADC1_Init+0x14c>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 6;
 80008c4:	4b40      	ldr	r3, [pc, #256]	; (80009c8 <MX_ADC1_Init+0x14c>)
 80008c6:	2206      	movs	r2, #6
 80008c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008ca:	4b3f      	ldr	r3, [pc, #252]	; (80009c8 <MX_ADC1_Init+0x14c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008d2:	4b3d      	ldr	r3, [pc, #244]	; (80009c8 <MX_ADC1_Init+0x14c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008d8:	4b3b      	ldr	r3, [pc, #236]	; (80009c8 <MX_ADC1_Init+0x14c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008de:	4b3a      	ldr	r3, [pc, #232]	; (80009c8 <MX_ADC1_Init+0x14c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008e6:	4b38      	ldr	r3, [pc, #224]	; (80009c8 <MX_ADC1_Init+0x14c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008ec:	4b36      	ldr	r3, [pc, #216]	; (80009c8 <MX_ADC1_Init+0x14c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008f4:	4834      	ldr	r0, [pc, #208]	; (80009c8 <MX_ADC1_Init+0x14c>)
 80008f6:	f000 ff91 	bl	800181c <HAL_ADC_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000900:	f000 fb3e 	bl	8000f80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000904:	4b32      	ldr	r3, [pc, #200]	; (80009d0 <MX_ADC1_Init+0x154>)
 8000906:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000908:	2306      	movs	r3, #6
 800090a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800090c:	2300      	movs	r3, #0
 800090e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000910:	237f      	movs	r3, #127	; 0x7f
 8000912:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000914:	2304      	movs	r3, #4
 8000916:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800091c:	463b      	mov	r3, r7
 800091e:	4619      	mov	r1, r3
 8000920:	4829      	ldr	r0, [pc, #164]	; (80009c8 <MX_ADC1_Init+0x14c>)
 8000922:	f001 f8c3 	bl	8001aac <HAL_ADC_ConfigChannel>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800092c:	f000 fb28 	bl	8000f80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000930:	4b28      	ldr	r3, [pc, #160]	; (80009d4 <MX_ADC1_Init+0x158>)
 8000932:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000934:	230c      	movs	r3, #12
 8000936:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000938:	463b      	mov	r3, r7
 800093a:	4619      	mov	r1, r3
 800093c:	4822      	ldr	r0, [pc, #136]	; (80009c8 <MX_ADC1_Init+0x14c>)
 800093e:	f001 f8b5 	bl	8001aac <HAL_ADC_ConfigChannel>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8000948:	f000 fb1a 	bl	8000f80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800094c:	4b22      	ldr	r3, [pc, #136]	; (80009d8 <MX_ADC1_Init+0x15c>)
 800094e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000950:	2312      	movs	r3, #18
 8000952:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000954:	463b      	mov	r3, r7
 8000956:	4619      	mov	r1, r3
 8000958:	481b      	ldr	r0, [pc, #108]	; (80009c8 <MX_ADC1_Init+0x14c>)
 800095a:	f001 f8a7 	bl	8001aac <HAL_ADC_ConfigChannel>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8000964:	f000 fb0c 	bl	8000f80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000968:	4b1c      	ldr	r3, [pc, #112]	; (80009dc <MX_ADC1_Init+0x160>)
 800096a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800096c:	2318      	movs	r3, #24
 800096e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000970:	463b      	mov	r3, r7
 8000972:	4619      	mov	r1, r3
 8000974:	4814      	ldr	r0, [pc, #80]	; (80009c8 <MX_ADC1_Init+0x14c>)
 8000976:	f001 f899 	bl	8001aac <HAL_ADC_ConfigChannel>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8000980:	f000 fafe 	bl	8000f80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000984:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <MX_ADC1_Init+0x164>)
 8000986:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000988:	f44f 7380 	mov.w	r3, #256	; 0x100
 800098c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800098e:	463b      	mov	r3, r7
 8000990:	4619      	mov	r1, r3
 8000992:	480d      	ldr	r0, [pc, #52]	; (80009c8 <MX_ADC1_Init+0x14c>)
 8000994:	f001 f88a 	bl	8001aac <HAL_ADC_ConfigChannel>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 800099e:	f000 faef 	bl	8000f80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <MX_ADC1_Init+0x168>)
 80009a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80009a6:	f44f 7383 	mov.w	r3, #262	; 0x106
 80009aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ac:	463b      	mov	r3, r7
 80009ae:	4619      	mov	r1, r3
 80009b0:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_ADC1_Init+0x14c>)
 80009b2:	f001 f87b 	bl	8001aac <HAL_ADC_ConfigChannel>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_ADC1_Init+0x144>
  {
    Error_Handler();
 80009bc:	f000 fae0 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009c0:	bf00      	nop
 80009c2:	3718      	adds	r7, #24
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000038 	.word	0x20000038
 80009cc:	50040000 	.word	0x50040000
 80009d0:	14f00020 	.word	0x14f00020
 80009d4:	19200040 	.word	0x19200040
 80009d8:	21800100 	.word	0x21800100
 80009dc:	25b00200 	.word	0x25b00200
 80009e0:	2a000400 	.word	0x2a000400
 80009e4:	32601000 	.word	0x32601000

080009e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	; 0x28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a2b      	ldr	r2, [pc, #172]	; (8000ab4 <HAL_ADC_MspInit+0xcc>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d14f      	bne.n	8000aaa <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a0a:	4b2b      	ldr	r3, [pc, #172]	; (8000ab8 <HAL_ADC_MspInit+0xd0>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	4a2a      	ldr	r2, [pc, #168]	; (8000ab8 <HAL_ADC_MspInit+0xd0>)
 8000a10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a16:	4b28      	ldr	r3, [pc, #160]	; (8000ab8 <HAL_ADC_MspInit+0xd0>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	4b25      	ldr	r3, [pc, #148]	; (8000ab8 <HAL_ADC_MspInit+0xd0>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a26:	4a24      	ldr	r2, [pc, #144]	; (8000ab8 <HAL_ADC_MspInit+0xd0>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2e:	4b22      	ldr	r3, [pc, #136]	; (8000ab8 <HAL_ADC_MspInit+0xd0>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = lineSensor_middle_Pin|encoder_left_Pin|lineSensor_right_Pin|battery_Pin
 8000a3a:	23bb      	movs	r3, #187	; 0xbb
 8000a3c:	617b      	str	r3, [r7, #20]
                          |encoder_right_Pin|lineSensor_left_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a3e:	230b      	movs	r3, #11
 8000a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a50:	f001 fe86 	bl	8002760 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000a54:	4b19      	ldr	r3, [pc, #100]	; (8000abc <HAL_ADC_MspInit+0xd4>)
 8000a56:	4a1a      	ldr	r2, [pc, #104]	; (8000ac0 <HAL_ADC_MspInit+0xd8>)
 8000a58:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000a5a:	4b18      	ldr	r3, [pc, #96]	; (8000abc <HAL_ADC_MspInit+0xd4>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a60:	4b16      	ldr	r3, [pc, #88]	; (8000abc <HAL_ADC_MspInit+0xd4>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <HAL_ADC_MspInit+0xd4>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a6c:	4b13      	ldr	r3, [pc, #76]	; (8000abc <HAL_ADC_MspInit+0xd4>)
 8000a6e:	2280      	movs	r2, #128	; 0x80
 8000a70:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a72:	4b12      	ldr	r3, [pc, #72]	; (8000abc <HAL_ADC_MspInit+0xd4>)
 8000a74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a78:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a7a:	4b10      	ldr	r3, [pc, #64]	; (8000abc <HAL_ADC_MspInit+0xd4>)
 8000a7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a80:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <HAL_ADC_MspInit+0xd4>)
 8000a84:	2220      	movs	r2, #32
 8000a86:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <HAL_ADC_MspInit+0xd4>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a8e:	480b      	ldr	r0, [pc, #44]	; (8000abc <HAL_ADC_MspInit+0xd4>)
 8000a90:	f001 fcfe 	bl	8002490 <HAL_DMA_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8000a9a:	f000 fa71 	bl	8000f80 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4a06      	ldr	r2, [pc, #24]	; (8000abc <HAL_ADC_MspInit+0xd4>)
 8000aa2:	64da      	str	r2, [r3, #76]	; 0x4c
 8000aa4:	4a05      	ldr	r2, [pc, #20]	; (8000abc <HAL_ADC_MspInit+0xd4>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000aaa:	bf00      	nop
 8000aac:	3728      	adds	r7, #40	; 0x28
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	50040000 	.word	0x50040000
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	2000009c 	.word	0x2000009c
 8000ac0:	40020008 	.word	0x40020008

08000ac4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <MX_DMA_Init+0x38>)
 8000acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ace:	4a0b      	ldr	r2, [pc, #44]	; (8000afc <MX_DMA_Init+0x38>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	6493      	str	r3, [r2, #72]	; 0x48
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <MX_DMA_Init+0x38>)
 8000ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	200b      	movs	r0, #11
 8000ae8:	f001 fc9b 	bl	8002422 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000aec:	200b      	movs	r0, #11
 8000aee:	f001 fcb4 	bl	800245a <HAL_NVIC_EnableIRQ>

}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40021000 	.word	0x40021000

08000b00 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b088      	sub	sp, #32
 8000b04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b06:	f107 030c 	add.w	r3, r7, #12
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
 8000b14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b16:	4b30      	ldr	r3, [pc, #192]	; (8000bd8 <MX_GPIO_Init+0xd8>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1a:	4a2f      	ldr	r2, [pc, #188]	; (8000bd8 <MX_GPIO_Init+0xd8>)
 8000b1c:	f043 0304 	orr.w	r3, r3, #4
 8000b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b22:	4b2d      	ldr	r3, [pc, #180]	; (8000bd8 <MX_GPIO_Init+0xd8>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b26:	f003 0304 	and.w	r3, r3, #4
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	4b2a      	ldr	r3, [pc, #168]	; (8000bd8 <MX_GPIO_Init+0xd8>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b32:	4a29      	ldr	r2, [pc, #164]	; (8000bd8 <MX_GPIO_Init+0xd8>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3a:	4b27      	ldr	r3, [pc, #156]	; (8000bd8 <MX_GPIO_Init+0xd8>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b46:	4b24      	ldr	r3, [pc, #144]	; (8000bd8 <MX_GPIO_Init+0xd8>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4a:	4a23      	ldr	r2, [pc, #140]	; (8000bd8 <MX_GPIO_Init+0xd8>)
 8000b4c:	f043 0302 	orr.w	r3, r3, #2
 8000b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b52:	4b21      	ldr	r3, [pc, #132]	; (8000bd8 <MX_GPIO_Init+0xd8>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b56:	f003 0302 	and.w	r3, r3, #2
 8000b5a:	603b      	str	r3, [r7, #0]
 8000b5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(phase2_L_GPIO_Port, phase2_L_Pin, GPIO_PIN_RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b68:	f001 ff64 	bl	8002a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LED_right_Pin|LED_left_Pin|phase2_R_Pin, GPIO_PIN_RESET);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	21b8      	movs	r1, #184	; 0xb8
 8000b70:	481a      	ldr	r0, [pc, #104]	; (8000bdc <MX_GPIO_Init+0xdc>)
 8000b72:	f001 ff5f 	bl	8002a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = switch_right_Pin|switch_middle_Pin|switch_left_Pin;
 8000b76:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8000b7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b84:	f107 030c 	add.w	r3, r7, #12
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8e:	f001 fde7 	bl	8002760 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = phase2_L_Pin;
 8000b92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(phase2_L_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	f107 030c 	add.w	r3, r7, #12
 8000ba8:	4619      	mov	r1, r3
 8000baa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bae:	f001 fdd7 	bl	8002760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LED_right_Pin|LED_left_Pin|phase2_R_Pin;
 8000bb2:	23b8      	movs	r3, #184	; 0xb8
 8000bb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc2:	f107 030c 	add.w	r3, r7, #12
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4804      	ldr	r0, [pc, #16]	; (8000bdc <MX_GPIO_Init+0xdc>)
 8000bca:	f001 fdc9 	bl	8002760 <HAL_GPIO_Init>

}
 8000bce:	bf00      	nop
 8000bd0:	3720      	adds	r7, #32
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	48000400 	.word	0x48000400

08000be0 <motor_control>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void motor_control(double left_motor_speed, double right_motor_speed) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	ed87 0b02 	vstr	d0, [r7, #8]
 8000bea:	ed87 1b00 	vstr	d1, [r7]
	if (left_motor_speed > 0) {
 8000bee:	f04f 0200 	mov.w	r2, #0
 8000bf2:	f04f 0300 	mov.w	r3, #0
 8000bf6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000bfa:	f7ff fc91 	bl	8000520 <__aeabi_dcmpgt>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d007      	beq.n	8000c14 <motor_control+0x34>
		HAL_GPIO_WritePin(GPIOA, phase2_L_Pin, GPIO_PIN_RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0e:	f001 ff11 	bl	8002a34 <HAL_GPIO_WritePin>
 8000c12:	e011      	b.n	8000c38 <motor_control+0x58>
	} else if (left_motor_speed < 0) {
 8000c14:	f04f 0200 	mov.w	r2, #0
 8000c18:	f04f 0300 	mov.w	r3, #0
 8000c1c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000c20:	f7ff fc60 	bl	80004e4 <__aeabi_dcmplt>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d006      	beq.n	8000c38 <motor_control+0x58>
		HAL_GPIO_WritePin(GPIOA, phase2_L_Pin, GPIO_PIN_SET);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c34:	f001 fefe 	bl	8002a34 <HAL_GPIO_WritePin>
	}
	if (right_motor_speed > 0) {
 8000c38:	f04f 0200 	mov.w	r2, #0
 8000c3c:	f04f 0300 	mov.w	r3, #0
 8000c40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000c44:	f7ff fc6c 	bl	8000520 <__aeabi_dcmpgt>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d005      	beq.n	8000c5a <motor_control+0x7a>
		HAL_GPIO_WritePin(GPIOB, phase2_R_Pin, GPIO_PIN_SET);
 8000c4e:	2201      	movs	r2, #1
 8000c50:	2180      	movs	r1, #128	; 0x80
 8000c52:	4835      	ldr	r0, [pc, #212]	; (8000d28 <motor_control+0x148>)
 8000c54:	f001 feee 	bl	8002a34 <HAL_GPIO_WritePin>
 8000c58:	e00f      	b.n	8000c7a <motor_control+0x9a>
	} else if (right_motor_speed < 0) {
 8000c5a:	f04f 0200 	mov.w	r2, #0
 8000c5e:	f04f 0300 	mov.w	r3, #0
 8000c62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000c66:	f7ff fc3d 	bl	80004e4 <__aeabi_dcmplt>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d004      	beq.n	8000c7a <motor_control+0x9a>
		HAL_GPIO_WritePin(GPIOB, phase2_R_Pin, GPIO_PIN_RESET);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2180      	movs	r1, #128	; 0x80
 8000c74:	482c      	ldr	r0, [pc, #176]	; (8000d28 <motor_control+0x148>)
 8000c76:	f001 fedd 	bl	8002a34 <HAL_GPIO_WritePin>
	}

	if (left_motor_speed < -1 || left_motor_speed > 1) {
 8000c7a:	f04f 0200 	mov.w	r2, #0
 8000c7e:	4b2b      	ldr	r3, [pc, #172]	; (8000d2c <motor_control+0x14c>)
 8000c80:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000c84:	f7ff fc2e 	bl	80004e4 <__aeabi_dcmplt>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d109      	bne.n	8000ca2 <motor_control+0xc2>
 8000c8e:	f04f 0200 	mov.w	r2, #0
 8000c92:	4b27      	ldr	r3, [pc, #156]	; (8000d30 <motor_control+0x150>)
 8000c94:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000c98:	f7ff fc42 	bl	8000520 <__aeabi_dcmpgt>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d004      	beq.n	8000cac <motor_control+0xcc>
		left_motor_speed = 0.5f;
 8000ca2:	f04f 0200 	mov.w	r2, #0
 8000ca6:	4b23      	ldr	r3, [pc, #140]	; (8000d34 <motor_control+0x154>)
 8000ca8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	}

	if (right_motor_speed < -1 || right_motor_speed > 1) {
 8000cac:	f04f 0200 	mov.w	r2, #0
 8000cb0:	4b1e      	ldr	r3, [pc, #120]	; (8000d2c <motor_control+0x14c>)
 8000cb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000cb6:	f7ff fc15 	bl	80004e4 <__aeabi_dcmplt>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d109      	bne.n	8000cd4 <motor_control+0xf4>
 8000cc0:	f04f 0200 	mov.w	r2, #0
 8000cc4:	4b1a      	ldr	r3, [pc, #104]	; (8000d30 <motor_control+0x150>)
 8000cc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000cca:	f7ff fc29 	bl	8000520 <__aeabi_dcmpgt>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d004      	beq.n	8000cde <motor_control+0xfe>
		right_motor_speed = 0.5f;
 8000cd4:	f04f 0200 	mov.w	r2, #0
 8000cd8:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <motor_control+0x154>)
 8000cda:	e9c7 2300 	strd	r2, r3, [r7]
	}

	TIM1->CCR2 = (int) (left_motor_speed * 65536);
 8000cde:	f04f 0200 	mov.w	r2, #0
 8000ce2:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <motor_control+0x158>)
 8000ce4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ce8:	f7ff fa72 	bl	80001d0 <__aeabi_dmul>
 8000cec:	4602      	mov	r2, r0
 8000cee:	460b      	mov	r3, r1
 8000cf0:	4610      	mov	r0, r2
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	f7ff fc1e 	bl	8000534 <__aeabi_d2iz>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <motor_control+0x15c>)
 8000cfc:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = (int) (right_motor_speed * 65536);
 8000cfe:	f04f 0200 	mov.w	r2, #0
 8000d02:	4b0d      	ldr	r3, [pc, #52]	; (8000d38 <motor_control+0x158>)
 8000d04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000d08:	f7ff fa62 	bl	80001d0 <__aeabi_dmul>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	4610      	mov	r0, r2
 8000d12:	4619      	mov	r1, r3
 8000d14:	f7ff fc0e 	bl	8000534 <__aeabi_d2iz>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <motor_control+0x15c>)
 8000d1c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	48000400 	.word	0x48000400
 8000d2c:	bff00000 	.word	0xbff00000
 8000d30:	3ff00000 	.word	0x3ff00000
 8000d34:	3fe00000 	.word	0x3fe00000
 8000d38:	40f00000 	.word	0x40f00000
 8000d3c:	40012c00 	.word	0x40012c00

08000d40 <taskLED>:
		encoderStatusRight = false;
	}
}


void taskLED() {
 8000d40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000d44:	af00      	add	r7, sp, #0

	switch(taskLED_state) {
 8000d46:	4b29      	ldr	r3, [pc, #164]	; (8000dec <taskLED+0xac>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d002      	beq.n	8000d54 <taskLED+0x14>
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d023      	beq.n	8000d9a <taskLED+0x5a>
			waitingSince = HAL_GetTick();
			taskLED_state = eStateA;
		}
		break;
	}
}
 8000d52:	e048      	b.n	8000de6 <taskLED+0xa6>
		if(HAL_GetTick() > (waitingSince + 500)){
 8000d54:	f000 fbca 	bl	80014ec <HAL_GetTick>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f04f 0100 	mov.w	r1, #0
 8000d60:	4b23      	ldr	r3, [pc, #140]	; (8000df0 <taskLED+0xb0>)
 8000d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d66:	f512 78fa 	adds.w	r8, r2, #500	; 0x1f4
 8000d6a:	f143 0900 	adc.w	r9, r3, #0
 8000d6e:	4589      	cmp	r9, r1
 8000d70:	bf08      	it	eq
 8000d72:	4580      	cmpeq	r8, r0
 8000d74:	d234      	bcs.n	8000de0 <taskLED+0xa0>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000d76:	2201      	movs	r2, #1
 8000d78:	2110      	movs	r1, #16
 8000d7a:	481e      	ldr	r0, [pc, #120]	; (8000df4 <taskLED+0xb4>)
 8000d7c:	f001 fe5a 	bl	8002a34 <HAL_GPIO_WritePin>
			waitingSince = HAL_GetTick();
 8000d80:	f000 fbb4 	bl	80014ec <HAL_GetTick>
 8000d84:	4603      	mov	r3, r0
 8000d86:	461a      	mov	r2, r3
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	4918      	ldr	r1, [pc, #96]	; (8000df0 <taskLED+0xb0>)
 8000d8e:	e9c1 2300 	strd	r2, r3, [r1]
			taskLED_state = eStateB;
 8000d92:	4b16      	ldr	r3, [pc, #88]	; (8000dec <taskLED+0xac>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	701a      	strb	r2, [r3, #0]
		break;
 8000d98:	e022      	b.n	8000de0 <taskLED+0xa0>
		if(HAL_GetTick() > (waitingSince + 500)){
 8000d9a:	f000 fba7 	bl	80014ec <HAL_GetTick>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	4618      	mov	r0, r3
 8000da2:	f04f 0100 	mov.w	r1, #0
 8000da6:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <taskLED+0xb0>)
 8000da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dac:	f512 74fa 	adds.w	r4, r2, #500	; 0x1f4
 8000db0:	f143 0500 	adc.w	r5, r3, #0
 8000db4:	428d      	cmp	r5, r1
 8000db6:	bf08      	it	eq
 8000db8:	4284      	cmpeq	r4, r0
 8000dba:	d213      	bcs.n	8000de4 <taskLED+0xa4>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2110      	movs	r1, #16
 8000dc0:	480c      	ldr	r0, [pc, #48]	; (8000df4 <taskLED+0xb4>)
 8000dc2:	f001 fe37 	bl	8002a34 <HAL_GPIO_WritePin>
			waitingSince = HAL_GetTick();
 8000dc6:	f000 fb91 	bl	80014ec <HAL_GetTick>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	461a      	mov	r2, r3
 8000dce:	f04f 0300 	mov.w	r3, #0
 8000dd2:	4907      	ldr	r1, [pc, #28]	; (8000df0 <taskLED+0xb0>)
 8000dd4:	e9c1 2300 	strd	r2, r3, [r1]
			taskLED_state = eStateA;
 8000dd8:	4b04      	ldr	r3, [pc, #16]	; (8000dec <taskLED+0xac>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
		break;
 8000dde:	e001      	b.n	8000de4 <taskLED+0xa4>
		break;
 8000de0:	bf00      	nop
 8000de2:	e000      	b.n	8000de6 <taskLED+0xa6>
		break;
 8000de4:	bf00      	nop
}
 8000de6:	bf00      	nop
 8000de8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000dec:	2000002c 	.word	0x2000002c
 8000df0:	20000030 	.word	0x20000030
 8000df4:	48000400 	.word	0x48000400

08000df8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000dfc:	f000 fb0d 	bl	800141a <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000e00:	f000 f82a 	bl	8000e58 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e04:	f7ff fe7c 	bl	8000b00 <MX_GPIO_Init>
	MX_DMA_Init();
 8000e08:	f7ff fe5c 	bl	8000ac4 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000e0c:	f000 fa58 	bl	80012c0 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8000e10:	f7ff fd34 	bl	800087c <MX_ADC1_Init>
	MX_TIM1_Init();
 8000e14:	f000 f944 	bl	80010a0 <MX_TIM1_Init>
	//HAL_TIM_Base_Start(&htim1);
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000e18:	2104      	movs	r1, #4
 8000e1a:	480d      	ldr	r0, [pc, #52]	; (8000e50 <main+0x58>)
 8000e1c:	f003 fdbc 	bl	8004998 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000e20:	2108      	movs	r1, #8
 8000e22:	480b      	ldr	r0, [pc, #44]	; (8000e50 <main+0x58>)
 8000e24:	f003 fdb8 	bl	8004998 <HAL_TIMEx_PWMN_Start>

	TIM1->CCR2 = 0;
 8000e28:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <main+0x5c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 30000;
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <main+0x5c>)
 8000e30:	f247 5230 	movw	r2, #30000	; 0x7530
 8000e34:	63da      	str	r2, [r3, #60]	; 0x3c
	motor_control(0.5f, 0.5f);
 8000e36:	ed9f 1b04 	vldr	d1, [pc, #16]	; 8000e48 <main+0x50>
 8000e3a:	ed9f 0b03 	vldr	d0, [pc, #12]	; 8000e48 <main+0x50>
 8000e3e:	f7ff fecf 	bl	8000be0 <motor_control>

	while (1) {
		taskLED();
 8000e42:	f7ff ff7d 	bl	8000d40 <taskLED>
 8000e46:	e7fc      	b.n	8000e42 <main+0x4a>
 8000e48:	00000000 	.word	0x00000000
 8000e4c:	3fe00000 	.word	0x3fe00000
 8000e50:	200000e4 	.word	0x200000e4
 8000e54:	40012c00 	.word	0x40012c00

08000e58 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b0ac      	sub	sp, #176	; 0xb0
 8000e5c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e5e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e62:	2244      	movs	r2, #68	; 0x44
 8000e64:	2100      	movs	r1, #0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f004 fb1e 	bl	80054a8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e6c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	2254      	movs	r2, #84	; 0x54
 8000e80:	2100      	movs	r1, #0
 8000e82:	4618      	mov	r0, r3
 8000e84:	f004 fb10 	bl	80054a8 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000e88:	f001 fdec 	bl	8002a64 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000e8c:	4b3b      	ldr	r3, [pc, #236]	; (8000f7c <SystemClock_Config+0x124>)
 8000e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e92:	4a3a      	ldr	r2, [pc, #232]	; (8000f7c <SystemClock_Config+0x124>)
 8000e94:	f023 0318 	bic.w	r3, r3, #24
 8000e98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000e9c:	2314      	movs	r3, #20
 8000e9e:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000eb0:	2360      	movs	r3, #96	; 0x60
 8000eb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.PLL.PLLN = 16;
 8000ec8:	2310      	movs	r3, #16
 8000eca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ece:	2307      	movs	r3, #7
 8000ed0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000eda:	2302      	movs	r3, #2
 8000edc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f001 fe31 	bl	8002b4c <HAL_RCC_OscConfig>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 8000ef0:	f000 f846 	bl	8000f80 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef4:	230f      	movs	r3, #15
 8000ef6:	65bb      	str	r3, [r7, #88]	; 0x58
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000efc:	2300      	movs	r3, #0
 8000efe:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f00:	2300      	movs	r3, #0
 8000f02:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f04:	2300      	movs	r3, #0
 8000f06:	66bb      	str	r3, [r7, #104]	; 0x68

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f08:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f002 fa3c 	bl	800338c <HAL_RCC_ClockConfig>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <SystemClock_Config+0xc6>
	{
		Error_Handler();
 8000f1a:	f000 f831 	bl	8000f80 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8000f1e:	f244 0302 	movw	r3, #16386	; 0x4002
 8000f22:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f24:	2300      	movs	r3, #0
 8000f26:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f2c:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000f32:	2301      	movs	r3, #1
 8000f34:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000f36:	2310      	movs	r3, #16
 8000f38:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000f3a:	2307      	movs	r3, #7
 8000f3c:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000f42:	2302      	movs	r3, #2
 8000f44:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000f46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f4a:	623b      	str	r3, [r7, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f002 fc22 	bl	8003798 <HAL_RCCEx_PeriphCLKConfig>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <SystemClock_Config+0x106>
	{
		Error_Handler();
 8000f5a:	f000 f811 	bl	8000f80 <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f5e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f62:	f001 fd9d 	bl	8002aa0 <HAL_PWREx_ControlVoltageScaling>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <SystemClock_Config+0x118>
	{
		Error_Handler();
 8000f6c:	f000 f808 	bl	8000f80 <Error_Handler>
	}
	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8000f70:	f002 fe06 	bl	8003b80 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000f74:	bf00      	nop
 8000f76:	37b0      	adds	r7, #176	; 0xb0
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40021000 	.word	0x40021000

08000f80 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f84:	b672      	cpsid	i
}
 8000f86:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000f88:	e7fe      	b.n	8000f88 <Error_Handler+0x8>
	...

08000f8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f92:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <HAL_MspInit+0x44>)
 8000f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f96:	4a0e      	ldr	r2, [pc, #56]	; (8000fd0 <HAL_MspInit+0x44>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f9e:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <HAL_MspInit+0x44>)
 8000fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <HAL_MspInit+0x44>)
 8000fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fae:	4a08      	ldr	r2, [pc, #32]	; (8000fd0 <HAL_MspInit+0x44>)
 8000fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb4:	6593      	str	r3, [r2, #88]	; 0x58
 8000fb6:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <HAL_MspInit+0x44>)
 8000fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fbe:	603b      	str	r3, [r7, #0]
 8000fc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	40021000 	.word	0x40021000

08000fd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <NMI_Handler+0x4>

08000fda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fde:	e7fe      	b.n	8000fde <HardFault_Handler+0x4>

08000fe0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <MemManage_Handler+0x4>

08000fe6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fea:	e7fe      	b.n	8000fea <BusFault_Handler+0x4>

08000fec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <UsageFault_Handler+0x4>

08000ff2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001020:	f000 fa50 	bl	80014c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}

08001028 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800102c:	4802      	ldr	r0, [pc, #8]	; (8001038 <DMA1_Channel1_IRQHandler+0x10>)
 800102e:	f001 fae7 	bl	8002600 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	2000009c 	.word	0x2000009c

0800103c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001040:	4b15      	ldr	r3, [pc, #84]	; (8001098 <SystemInit+0x5c>)
 8001042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001046:	4a14      	ldr	r2, [pc, #80]	; (8001098 <SystemInit+0x5c>)
 8001048:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800104c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001050:	4b12      	ldr	r3, [pc, #72]	; (800109c <SystemInit+0x60>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a11      	ldr	r2, [pc, #68]	; (800109c <SystemInit+0x60>)
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <SystemInit+0x60>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <SystemInit+0x60>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a0d      	ldr	r2, [pc, #52]	; (800109c <SystemInit+0x60>)
 8001068:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800106c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001070:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001072:	4b0a      	ldr	r3, [pc, #40]	; (800109c <SystemInit+0x60>)
 8001074:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001078:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800107a:	4b08      	ldr	r3, [pc, #32]	; (800109c <SystemInit+0x60>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a07      	ldr	r2, [pc, #28]	; (800109c <SystemInit+0x60>)
 8001080:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001084:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001086:	4b05      	ldr	r3, [pc, #20]	; (800109c <SystemInit+0x60>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	e000ed00 	.word	0xe000ed00
 800109c:	40021000 	.word	0x40021000

080010a0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b09a      	sub	sp, #104	; 0x68
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
 80010d0:	615a      	str	r2, [r3, #20]
 80010d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	222c      	movs	r2, #44	; 0x2c
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f004 f9e4 	bl	80054a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010e0:	4b49      	ldr	r3, [pc, #292]	; (8001208 <MX_TIM1_Init+0x168>)
 80010e2:	4a4a      	ldr	r2, [pc, #296]	; (800120c <MX_TIM1_Init+0x16c>)
 80010e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80010e6:	4b48      	ldr	r3, [pc, #288]	; (8001208 <MX_TIM1_Init+0x168>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ec:	4b46      	ldr	r3, [pc, #280]	; (8001208 <MX_TIM1_Init+0x168>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80010f2:	4b45      	ldr	r3, [pc, #276]	; (8001208 <MX_TIM1_Init+0x168>)
 80010f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010fa:	4b43      	ldr	r3, [pc, #268]	; (8001208 <MX_TIM1_Init+0x168>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001100:	4b41      	ldr	r3, [pc, #260]	; (8001208 <MX_TIM1_Init+0x168>)
 8001102:	2200      	movs	r2, #0
 8001104:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001106:	4b40      	ldr	r3, [pc, #256]	; (8001208 <MX_TIM1_Init+0x168>)
 8001108:	2280      	movs	r2, #128	; 0x80
 800110a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800110c:	483e      	ldr	r0, [pc, #248]	; (8001208 <MX_TIM1_Init+0x168>)
 800110e:	f002 fe39 	bl	8003d84 <HAL_TIM_Base_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001118:	f7ff ff32 	bl	8000f80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800111c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001120:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001122:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001126:	4619      	mov	r1, r3
 8001128:	4837      	ldr	r0, [pc, #220]	; (8001208 <MX_TIM1_Init+0x168>)
 800112a:	f002 fff3 	bl	8004114 <HAL_TIM_ConfigClockSource>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001134:	f7ff ff24 	bl	8000f80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001138:	4833      	ldr	r0, [pc, #204]	; (8001208 <MX_TIM1_Init+0x168>)
 800113a:	f002 fe7a 	bl	8003e32 <HAL_TIM_PWM_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001144:	f7ff ff1c 	bl	8000f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001148:	2300      	movs	r3, #0
 800114a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800114c:	2300      	movs	r3, #0
 800114e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001150:	2300      	movs	r3, #0
 8001152:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001154:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001158:	4619      	mov	r1, r3
 800115a:	482b      	ldr	r0, [pc, #172]	; (8001208 <MX_TIM1_Init+0x168>)
 800115c:	f003 fcba 	bl	8004ad4 <HAL_TIMEx_MasterConfigSynchronization>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001166:	f7ff ff0b 	bl	8000f80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800116a:	2360      	movs	r3, #96	; 0x60
 800116c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001172:	2300      	movs	r3, #0
 8001174:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001176:	2300      	movs	r3, #0
 8001178:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800117e:	2300      	movs	r3, #0
 8001180:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001182:	2300      	movs	r3, #0
 8001184:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001186:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800118a:	2204      	movs	r2, #4
 800118c:	4619      	mov	r1, r3
 800118e:	481e      	ldr	r0, [pc, #120]	; (8001208 <MX_TIM1_Init+0x168>)
 8001190:	f002 feb0 	bl	8003ef4 <HAL_TIM_PWM_ConfigChannel>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800119a:	f7ff fef1 	bl	8000f80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800119e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011a2:	2208      	movs	r2, #8
 80011a4:	4619      	mov	r1, r3
 80011a6:	4818      	ldr	r0, [pc, #96]	; (8001208 <MX_TIM1_Init+0x168>)
 80011a8:	f002 fea4 	bl	8003ef4 <HAL_TIM_PWM_ConfigChannel>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80011b2:	f7ff fee5 	bl	8000f80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80011d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	4619      	mov	r1, r3
 80011ea:	4807      	ldr	r0, [pc, #28]	; (8001208 <MX_TIM1_Init+0x168>)
 80011ec:	f003 fcd8 	bl	8004ba0 <HAL_TIMEx_ConfigBreakDeadTime>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80011f6:	f7ff fec3 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011fa:	4803      	ldr	r0, [pc, #12]	; (8001208 <MX_TIM1_Init+0x168>)
 80011fc:	f000 f828 	bl	8001250 <HAL_TIM_MspPostInit>

}
 8001200:	bf00      	nop
 8001202:	3768      	adds	r7, #104	; 0x68
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	200000e4 	.word	0x200000e4
 800120c:	40012c00 	.word	0x40012c00

08001210 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a0a      	ldr	r2, [pc, #40]	; (8001248 <HAL_TIM_Base_MspInit+0x38>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d10b      	bne.n	800123a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001222:	4b0a      	ldr	r3, [pc, #40]	; (800124c <HAL_TIM_Base_MspInit+0x3c>)
 8001224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001226:	4a09      	ldr	r2, [pc, #36]	; (800124c <HAL_TIM_Base_MspInit+0x3c>)
 8001228:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800122c:	6613      	str	r3, [r2, #96]	; 0x60
 800122e:	4b07      	ldr	r3, [pc, #28]	; (800124c <HAL_TIM_Base_MspInit+0x3c>)
 8001230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001232:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800123a:	bf00      	nop
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	40012c00 	.word	0x40012c00
 800124c:	40021000 	.word	0x40021000

08001250 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b088      	sub	sp, #32
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 030c 	add.w	r3, r7, #12
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a11      	ldr	r2, [pc, #68]	; (80012b4 <HAL_TIM_MspPostInit+0x64>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d11b      	bne.n	80012aa <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <HAL_TIM_MspPostInit+0x68>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001276:	4a10      	ldr	r2, [pc, #64]	; (80012b8 <HAL_TIM_MspPostInit+0x68>)
 8001278:	f043 0302 	orr.w	r3, r3, #2
 800127c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <HAL_TIM_MspPostInit+0x68>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB0     ------> TIM1_CH2N
    PB1     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = Phase1_L_CH2N_Pin|Phase1_R_CH3N_Pin;
 800128a:	2303      	movs	r3, #3
 800128c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128e:	2302      	movs	r3, #2
 8001290:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001296:	2300      	movs	r3, #0
 8001298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800129a:	2301      	movs	r3, #1
 800129c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129e:	f107 030c 	add.w	r3, r7, #12
 80012a2:	4619      	mov	r1, r3
 80012a4:	4805      	ldr	r0, [pc, #20]	; (80012bc <HAL_TIM_MspPostInit+0x6c>)
 80012a6:	f001 fa5b 	bl	8002760 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80012aa:	bf00      	nop
 80012ac:	3720      	adds	r7, #32
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40012c00 	.word	0x40012c00
 80012b8:	40021000 	.word	0x40021000
 80012bc:	48000400 	.word	0x48000400

080012c0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012c4:	4b14      	ldr	r3, [pc, #80]	; (8001318 <MX_USART2_UART_Init+0x58>)
 80012c6:	4a15      	ldr	r2, [pc, #84]	; (800131c <MX_USART2_UART_Init+0x5c>)
 80012c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012ca:	4b13      	ldr	r3, [pc, #76]	; (8001318 <MX_USART2_UART_Init+0x58>)
 80012cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <MX_USART2_UART_Init+0x58>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <MX_USART2_UART_Init+0x58>)
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <MX_USART2_UART_Init+0x58>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <MX_USART2_UART_Init+0x58>)
 80012e6:	220c      	movs	r2, #12
 80012e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ea:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <MX_USART2_UART_Init+0x58>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f0:	4b09      	ldr	r3, [pc, #36]	; (8001318 <MX_USART2_UART_Init+0x58>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012f6:	4b08      	ldr	r3, [pc, #32]	; (8001318 <MX_USART2_UART_Init+0x58>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <MX_USART2_UART_Init+0x58>)
 80012fe:	2200      	movs	r2, #0
 8001300:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001302:	4805      	ldr	r0, [pc, #20]	; (8001318 <MX_USART2_UART_Init+0x58>)
 8001304:	f003 fce9 	bl	8004cda <HAL_UART_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800130e:	f7ff fe37 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000130 	.word	0x20000130
 800131c:	40004400 	.word	0x40004400

08001320 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	; 0x28
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a20      	ldr	r2, [pc, #128]	; (80013c0 <HAL_UART_MspInit+0xa0>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d13a      	bne.n	80013b8 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001342:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <HAL_UART_MspInit+0xa4>)
 8001344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001346:	4a1f      	ldr	r2, [pc, #124]	; (80013c4 <HAL_UART_MspInit+0xa4>)
 8001348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800134c:	6593      	str	r3, [r2, #88]	; 0x58
 800134e:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <HAL_UART_MspInit+0xa4>)
 8001350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135a:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <HAL_UART_MspInit+0xa4>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135e:	4a19      	ldr	r2, [pc, #100]	; (80013c4 <HAL_UART_MspInit+0xa4>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001366:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <HAL_UART_MspInit+0xa4>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001372:	2304      	movs	r3, #4
 8001374:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001376:	2302      	movs	r3, #2
 8001378:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137e:	2303      	movs	r3, #3
 8001380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001382:	2307      	movs	r3, #7
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	4619      	mov	r1, r3
 800138c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001390:	f001 f9e6 	bl	8002760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001394:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139a:	2302      	movs	r3, #2
 800139c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a2:	2303      	movs	r3, #3
 80013a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80013a6:	2303      	movs	r3, #3
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	4619      	mov	r1, r3
 80013b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b4:	f001 f9d4 	bl	8002760 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80013b8:	bf00      	nop
 80013ba:	3728      	adds	r7, #40	; 0x28
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40004400 	.word	0x40004400
 80013c4:	40021000 	.word	0x40021000

080013c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001400 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013cc:	f7ff fe36 	bl	800103c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80013d0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80013d2:	e003      	b.n	80013dc <LoopCopyDataInit>

080013d4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80013d6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80013d8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80013da:	3104      	adds	r1, #4

080013dc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80013dc:	480a      	ldr	r0, [pc, #40]	; (8001408 <LoopForever+0xa>)
	ldr	r3, =_edata
 80013de:	4b0b      	ldr	r3, [pc, #44]	; (800140c <LoopForever+0xe>)
	adds	r2, r0, r1
 80013e0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80013e2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80013e4:	d3f6      	bcc.n	80013d4 <CopyDataInit>
	ldr	r2, =_sbss
 80013e6:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <LoopForever+0x12>)
	b	LoopFillZerobss
 80013e8:	e002      	b.n	80013f0 <LoopFillZerobss>

080013ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80013ea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80013ec:	f842 3b04 	str.w	r3, [r2], #4

080013f0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80013f0:	4b08      	ldr	r3, [pc, #32]	; (8001414 <LoopForever+0x16>)
	cmp	r2, r3
 80013f2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80013f4:	d3f9      	bcc.n	80013ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013f6:	f004 f833 	bl	8005460 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013fa:	f7ff fcfd 	bl	8000df8 <main>

080013fe <LoopForever>:

LoopForever:
    b LoopForever
 80013fe:	e7fe      	b.n	80013fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001400:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001404:	08005528 	.word	0x08005528
	ldr	r0, =_sdata
 8001408:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800140c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001410:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001414:	200001b8 	.word	0x200001b8

08001418 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001418:	e7fe      	b.n	8001418 <ADC1_IRQHandler>

0800141a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001420:	2300      	movs	r3, #0
 8001422:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001424:	2003      	movs	r0, #3
 8001426:	f000 fff1 	bl	800240c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800142a:	2000      	movs	r0, #0
 800142c:	f000 f80e 	bl	800144c <HAL_InitTick>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d002      	beq.n	800143c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	71fb      	strb	r3, [r7, #7]
 800143a:	e001      	b.n	8001440 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800143c:	f7ff fda6 	bl	8000f8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001440:	79fb      	ldrb	r3, [r7, #7]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001454:	2300      	movs	r3, #0
 8001456:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001458:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <HAL_InitTick+0x6c>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d023      	beq.n	80014a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001460:	4b16      	ldr	r3, [pc, #88]	; (80014bc <HAL_InitTick+0x70>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <HAL_InitTick+0x6c>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	4619      	mov	r1, r3
 800146a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800146e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001472:	fbb2 f3f3 	udiv	r3, r2, r3
 8001476:	4618      	mov	r0, r3
 8001478:	f000 fffd 	bl	8002476 <HAL_SYSTICK_Config>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d10f      	bne.n	80014a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b0f      	cmp	r3, #15
 8001486:	d809      	bhi.n	800149c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001488:	2200      	movs	r2, #0
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	f04f 30ff 	mov.w	r0, #4294967295
 8001490:	f000 ffc7 	bl	8002422 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001494:	4a0a      	ldr	r2, [pc, #40]	; (80014c0 <HAL_InitTick+0x74>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	e007      	b.n	80014ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	73fb      	strb	r3, [r7, #15]
 80014a0:	e004      	b.n	80014ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	73fb      	strb	r3, [r7, #15]
 80014a6:	e001      	b.n	80014ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000008 	.word	0x20000008
 80014bc:	20000000 	.word	0x20000000
 80014c0:	20000004 	.word	0x20000004

080014c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_IncTick+0x20>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <HAL_IncTick+0x24>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4413      	add	r3, r2
 80014d4:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <HAL_IncTick+0x24>)
 80014d6:	6013      	str	r3, [r2, #0]
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	20000008 	.word	0x20000008
 80014e8:	200001b4 	.word	0x200001b4

080014ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return uwTick;
 80014f0:	4b03      	ldr	r3, [pc, #12]	; (8001500 <HAL_GetTick+0x14>)
 80014f2:	681b      	ldr	r3, [r3, #0]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	200001b4 	.word	0x200001b4

08001504 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	431a      	orrs	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	609a      	str	r2, [r3, #8]
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
 8001532:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	609a      	str	r2, [r3, #8]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001560:	4618      	mov	r0, r3
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800156c:	b480      	push	{r7}
 800156e:	b087      	sub	sp, #28
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
 8001578:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	3360      	adds	r3, #96	; 0x60
 800157e:	461a      	mov	r2, r3
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <LL_ADC_SetOffset+0x44>)
 800158e:	4013      	ands	r3, r2
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	430a      	orrs	r2, r1
 800159a:	4313      	orrs	r3, r2
 800159c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80015a4:	bf00      	nop
 80015a6:	371c      	adds	r7, #28
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	03fff000 	.word	0x03fff000

080015b4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3360      	adds	r3, #96	; 0x60
 80015c2:	461a      	mov	r2, r3
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b087      	sub	sp, #28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	3360      	adds	r3, #96	; 0x60
 80015f0:	461a      	mov	r2, r3
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4413      	add	r3, r2
 80015f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	431a      	orrs	r2, r3
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800160a:	bf00      	nop
 800160c:	371c      	adds	r7, #28
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001616:	b480      	push	{r7}
 8001618:	b087      	sub	sp, #28
 800161a:	af00      	add	r7, sp, #0
 800161c:	60f8      	str	r0, [r7, #12]
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	3330      	adds	r3, #48	; 0x30
 8001626:	461a      	mov	r2, r3
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	0a1b      	lsrs	r3, r3, #8
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	f003 030c 	and.w	r3, r3, #12
 8001632:	4413      	add	r3, r2
 8001634:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	f003 031f 	and.w	r3, r3, #31
 8001640:	211f      	movs	r1, #31
 8001642:	fa01 f303 	lsl.w	r3, r1, r3
 8001646:	43db      	mvns	r3, r3
 8001648:	401a      	ands	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	0e9b      	lsrs	r3, r3, #26
 800164e:	f003 011f 	and.w	r1, r3, #31
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	f003 031f 	and.w	r3, r3, #31
 8001658:	fa01 f303 	lsl.w	r3, r1, r3
 800165c:	431a      	orrs	r2, r3
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001662:	bf00      	nop
 8001664:	371c      	adds	r7, #28
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800166e:	b480      	push	{r7}
 8001670:	b087      	sub	sp, #28
 8001672:	af00      	add	r7, sp, #0
 8001674:	60f8      	str	r0, [r7, #12]
 8001676:	60b9      	str	r1, [r7, #8]
 8001678:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	3314      	adds	r3, #20
 800167e:	461a      	mov	r2, r3
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	0e5b      	lsrs	r3, r3, #25
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	f003 0304 	and.w	r3, r3, #4
 800168a:	4413      	add	r3, r2
 800168c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	0d1b      	lsrs	r3, r3, #20
 8001696:	f003 031f 	and.w	r3, r3, #31
 800169a:	2107      	movs	r1, #7
 800169c:	fa01 f303 	lsl.w	r3, r1, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	401a      	ands	r2, r3
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	0d1b      	lsrs	r3, r3, #20
 80016a8:	f003 031f 	and.w	r3, r3, #31
 80016ac:	6879      	ldr	r1, [r7, #4]
 80016ae:	fa01 f303 	lsl.w	r3, r1, r3
 80016b2:	431a      	orrs	r2, r3
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80016b8:	bf00      	nop
 80016ba:	371c      	adds	r7, #28
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016dc:	43db      	mvns	r3, r3
 80016de:	401a      	ands	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f003 0318 	and.w	r3, r3, #24
 80016e6:	4908      	ldr	r1, [pc, #32]	; (8001708 <LL_ADC_SetChannelSingleDiff+0x44>)
 80016e8:	40d9      	lsrs	r1, r3
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	400b      	ands	r3, r1
 80016ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016f2:	431a      	orrs	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80016fa:	bf00      	nop
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	0007ffff 	.word	0x0007ffff

0800170c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800171c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	6093      	str	r3, [r2, #8]
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001740:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001744:	d101      	bne.n	800174a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001746:	2301      	movs	r3, #1
 8001748:	e000      	b.n	800174c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800174a:	2300      	movs	r3, #0
}
 800174c:	4618      	mov	r0, r3
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001768:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800176c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001790:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001794:	d101      	bne.n	800179a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001796:	2301      	movs	r3, #1
 8001798:	e000      	b.n	800179c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d101      	bne.n	80017c0 <LL_ADC_IsEnabled+0x18>
 80017bc:	2301      	movs	r3, #1
 80017be:	e000      	b.n	80017c2 <LL_ADC_IsEnabled+0x1a>
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f003 0304 	and.w	r3, r3, #4
 80017de:	2b04      	cmp	r3, #4
 80017e0:	d101      	bne.n	80017e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80017e2:	2301      	movs	r3, #1
 80017e4:	e000      	b.n	80017e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f003 0308 	and.w	r3, r3, #8
 8001804:	2b08      	cmp	r3, #8
 8001806:	d101      	bne.n	800180c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001808:	2301      	movs	r3, #1
 800180a:	e000      	b.n	800180e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
	...

0800181c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001824:	2300      	movs	r3, #0
 8001826:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001828:	2300      	movs	r3, #0
 800182a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e12c      	b.n	8001a90 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001840:	2b00      	cmp	r3, #0
 8001842:	d109      	bne.n	8001858 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff f8cf 	bl	80009e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff67 	bl	8001730 <LL_ADC_IsDeepPowerDownEnabled>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d004      	beq.n	8001872 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff4d 	bl	800170c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff ff82 	bl	8001780 <LL_ADC_IsInternalRegulatorEnabled>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d115      	bne.n	80018ae <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff ff66 	bl	8001758 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800188c:	4b82      	ldr	r3, [pc, #520]	; (8001a98 <HAL_ADC_Init+0x27c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	099b      	lsrs	r3, r3, #6
 8001892:	4a82      	ldr	r2, [pc, #520]	; (8001a9c <HAL_ADC_Init+0x280>)
 8001894:	fba2 2303 	umull	r2, r3, r2, r3
 8001898:	099b      	lsrs	r3, r3, #6
 800189a:	3301      	adds	r3, #1
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018a0:	e002      	b.n	80018a8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	3b01      	subs	r3, #1
 80018a6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f9      	bne.n	80018a2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff ff64 	bl	8001780 <LL_ADC_IsInternalRegulatorEnabled>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10d      	bne.n	80018da <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c2:	f043 0210 	orr.w	r2, r3, #16
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ce:	f043 0201 	orr.w	r2, r3, #1
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff ff75 	bl	80017ce <LL_ADC_REG_IsConversionOngoing>
 80018e4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ea:	f003 0310 	and.w	r3, r3, #16
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f040 80c5 	bne.w	8001a7e <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f040 80c1 	bne.w	8001a7e <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001900:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001904:	f043 0202 	orr.w	r2, r3, #2
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ff49 	bl	80017a8 <LL_ADC_IsEnabled>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d10b      	bne.n	8001934 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800191c:	4860      	ldr	r0, [pc, #384]	; (8001aa0 <HAL_ADC_Init+0x284>)
 800191e:	f7ff ff43 	bl	80017a8 <LL_ADC_IsEnabled>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d105      	bne.n	8001934 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	4619      	mov	r1, r3
 800192e:	485d      	ldr	r0, [pc, #372]	; (8001aa4 <HAL_ADC_Init+0x288>)
 8001930:	f7ff fde8 	bl	8001504 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	7e5b      	ldrb	r3, [r3, #25]
 8001938:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800193e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001944:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800194a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001952:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001954:	4313      	orrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d106      	bne.n	8001970 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001966:	3b01      	subs	r3, #1
 8001968:	045b      	lsls	r3, r3, #17
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4313      	orrs	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001974:	2b00      	cmp	r3, #0
 8001976:	d009      	beq.n	800198c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001984:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4313      	orrs	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	68da      	ldr	r2, [r3, #12]
 8001992:	4b45      	ldr	r3, [pc, #276]	; (8001aa8 <HAL_ADC_Init+0x28c>)
 8001994:	4013      	ands	r3, r2
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	6812      	ldr	r2, [r2, #0]
 800199a:	69b9      	ldr	r1, [r7, #24]
 800199c:	430b      	orrs	r3, r1
 800199e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ff12 	bl	80017ce <LL_ADC_REG_IsConversionOngoing>
 80019aa:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff ff1f 	bl	80017f4 <LL_ADC_INJ_IsConversionOngoing>
 80019b6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d13d      	bne.n	8001a3a <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d13a      	bne.n	8001a3a <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80019c8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019d0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019e0:	f023 0302 	bic.w	r3, r3, #2
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	6812      	ldr	r2, [r2, #0]
 80019e8:	69b9      	ldr	r1, [r7, #24]
 80019ea:	430b      	orrs	r3, r1
 80019ec:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d118      	bne.n	8001a2a <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001a02:	f023 0304 	bic.w	r3, r3, #4
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a0e:	4311      	orrs	r1, r2
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a14:	4311      	orrs	r1, r2
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f042 0201 	orr.w	r2, r2, #1
 8001a26:	611a      	str	r2, [r3, #16]
 8001a28:	e007      	b.n	8001a3a <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	691a      	ldr	r2, [r3, #16]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f022 0201 	bic.w	r2, r2, #1
 8001a38:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d10c      	bne.n	8001a5c <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a48:	f023 010f 	bic.w	r1, r3, #15
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	69db      	ldr	r3, [r3, #28]
 8001a50:	1e5a      	subs	r2, r3, #1
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	631a      	str	r2, [r3, #48]	; 0x30
 8001a5a:	e007      	b.n	8001a6c <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 020f 	bic.w	r2, r2, #15
 8001a6a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a70:	f023 0303 	bic.w	r3, r3, #3
 8001a74:	f043 0201 	orr.w	r2, r3, #1
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	655a      	str	r2, [r3, #84]	; 0x54
 8001a7c:	e007      	b.n	8001a8e <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a82:	f043 0210 	orr.w	r2, r3, #16
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3720      	adds	r7, #32
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20000000 	.word	0x20000000
 8001a9c:	053e2d63 	.word	0x053e2d63
 8001aa0:	50040000 	.word	0x50040000
 8001aa4:	50040300 	.word	0x50040300
 8001aa8:	fff0c007 	.word	0xfff0c007

08001aac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b0b6      	sub	sp, #216	; 0xd8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d101      	bne.n	8001ace <HAL_ADC_ConfigChannel+0x22>
 8001aca:	2302      	movs	r3, #2
 8001acc:	e3b9      	b.n	8002242 <HAL_ADC_ConfigChannel+0x796>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fe77 	bl	80017ce <LL_ADC_REG_IsConversionOngoing>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f040 839e 	bne.w	8002224 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b05      	cmp	r3, #5
 8001aee:	d824      	bhi.n	8001b3a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	3b02      	subs	r3, #2
 8001af6:	2b03      	cmp	r3, #3
 8001af8:	d81b      	bhi.n	8001b32 <HAL_ADC_ConfigChannel+0x86>
 8001afa:	a201      	add	r2, pc, #4	; (adr r2, 8001b00 <HAL_ADC_ConfigChannel+0x54>)
 8001afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b00:	08001b11 	.word	0x08001b11
 8001b04:	08001b19 	.word	0x08001b19
 8001b08:	08001b21 	.word	0x08001b21
 8001b0c:	08001b29 	.word	0x08001b29
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	220c      	movs	r2, #12
 8001b14:	605a      	str	r2, [r3, #4]
          break;
 8001b16:	e011      	b.n	8001b3c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	2212      	movs	r2, #18
 8001b1c:	605a      	str	r2, [r3, #4]
          break;
 8001b1e:	e00d      	b.n	8001b3c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	2218      	movs	r2, #24
 8001b24:	605a      	str	r2, [r3, #4]
          break;
 8001b26:	e009      	b.n	8001b3c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b2e:	605a      	str	r2, [r3, #4]
          break;
 8001b30:	e004      	b.n	8001b3c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	2206      	movs	r2, #6
 8001b36:	605a      	str	r2, [r3, #4]
          break;
 8001b38:	e000      	b.n	8001b3c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001b3a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6818      	ldr	r0, [r3, #0]
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	6859      	ldr	r1, [r3, #4]
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	f7ff fd64 	bl	8001616 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fe3b 	bl	80017ce <LL_ADC_REG_IsConversionOngoing>
 8001b58:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fe47 	bl	80017f4 <LL_ADC_INJ_IsConversionOngoing>
 8001b66:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b6a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f040 81a6 	bne.w	8001ec0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f040 81a1 	bne.w	8001ec0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6818      	ldr	r0, [r3, #0]
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	6819      	ldr	r1, [r3, #0]
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	f7ff fd6f 	bl	800166e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	695a      	ldr	r2, [r3, #20]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	08db      	lsrs	r3, r3, #3
 8001b9c:	f003 0303 	and.w	r3, r3, #3
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	d00a      	beq.n	8001bc8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6818      	ldr	r0, [r3, #0]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	6919      	ldr	r1, [r3, #16]
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001bc2:	f7ff fcd3 	bl	800156c <LL_ADC_SetOffset>
 8001bc6:	e17b      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2100      	movs	r1, #0
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff fcf0 	bl	80015b4 <LL_ADC_GetOffsetChannel>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d10a      	bne.n	8001bf4 <HAL_ADC_ConfigChannel+0x148>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2100      	movs	r1, #0
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fce5 	bl	80015b4 <LL_ADC_GetOffsetChannel>
 8001bea:	4603      	mov	r3, r0
 8001bec:	0e9b      	lsrs	r3, r3, #26
 8001bee:	f003 021f 	and.w	r2, r3, #31
 8001bf2:	e01e      	b.n	8001c32 <HAL_ADC_ConfigChannel+0x186>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff fcda 	bl	80015b4 <LL_ADC_GetOffsetChannel>
 8001c00:	4603      	mov	r3, r0
 8001c02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001c0a:	fa93 f3a3 	rbit	r3, r3
 8001c0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001c22:	2320      	movs	r3, #32
 8001c24:	e004      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001c26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c2a:	fab3 f383 	clz	r3, r3
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d105      	bne.n	8001c4a <HAL_ADC_ConfigChannel+0x19e>
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	0e9b      	lsrs	r3, r3, #26
 8001c44:	f003 031f 	and.w	r3, r3, #31
 8001c48:	e018      	b.n	8001c7c <HAL_ADC_ConfigChannel+0x1d0>
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001c56:	fa93 f3a3 	rbit	r3, r3
 8001c5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001c5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001c66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001c6e:	2320      	movs	r3, #32
 8001c70:	e004      	b.n	8001c7c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001c72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c76:	fab3 f383 	clz	r3, r3
 8001c7a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d106      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2200      	movs	r2, #0
 8001c86:	2100      	movs	r1, #0
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff fca9 	bl	80015e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2101      	movs	r1, #1
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff fc8d 	bl	80015b4 <LL_ADC_GetOffsetChannel>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d10a      	bne.n	8001cba <HAL_ADC_ConfigChannel+0x20e>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2101      	movs	r1, #1
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff fc82 	bl	80015b4 <LL_ADC_GetOffsetChannel>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	0e9b      	lsrs	r3, r3, #26
 8001cb4:	f003 021f 	and.w	r2, r3, #31
 8001cb8:	e01e      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x24c>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff fc77 	bl	80015b4 <LL_ADC_GetOffsetChannel>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ccc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001cd0:	fa93 f3a3 	rbit	r3, r3
 8001cd4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001cd8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001cdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001ce0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001ce8:	2320      	movs	r3, #32
 8001cea:	e004      	b.n	8001cf6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001cec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001cf0:	fab3 f383 	clz	r3, r3
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d105      	bne.n	8001d10 <HAL_ADC_ConfigChannel+0x264>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	0e9b      	lsrs	r3, r3, #26
 8001d0a:	f003 031f 	and.w	r3, r3, #31
 8001d0e:	e018      	b.n	8001d42 <HAL_ADC_ConfigChannel+0x296>
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d1c:	fa93 f3a3 	rbit	r3, r3
 8001d20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001d24:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001d2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001d34:	2320      	movs	r3, #32
 8001d36:	e004      	b.n	8001d42 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001d38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d3c:	fab3 f383 	clz	r3, r3
 8001d40:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d106      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff fc46 	bl	80015e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2102      	movs	r1, #2
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff fc2a 	bl	80015b4 <LL_ADC_GetOffsetChannel>
 8001d60:	4603      	mov	r3, r0
 8001d62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10a      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x2d4>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2102      	movs	r1, #2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff fc1f 	bl	80015b4 <LL_ADC_GetOffsetChannel>
 8001d76:	4603      	mov	r3, r0
 8001d78:	0e9b      	lsrs	r3, r3, #26
 8001d7a:	f003 021f 	and.w	r2, r3, #31
 8001d7e:	e01e      	b.n	8001dbe <HAL_ADC_ConfigChannel+0x312>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2102      	movs	r1, #2
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fc14 	bl	80015b4 <LL_ADC_GetOffsetChannel>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d96:	fa93 f3a3 	rbit	r3, r3
 8001d9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001d9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001da2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001da6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001dae:	2320      	movs	r3, #32
 8001db0:	e004      	b.n	8001dbc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001db2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001db6:	fab3 f383 	clz	r3, r3
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d105      	bne.n	8001dd6 <HAL_ADC_ConfigChannel+0x32a>
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	0e9b      	lsrs	r3, r3, #26
 8001dd0:	f003 031f 	and.w	r3, r3, #31
 8001dd4:	e016      	b.n	8001e04 <HAL_ADC_ConfigChannel+0x358>
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001de2:	fa93 f3a3 	rbit	r3, r3
 8001de6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001de8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001dea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001dee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001df6:	2320      	movs	r3, #32
 8001df8:	e004      	b.n	8001e04 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001dfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001dfe:	fab3 f383 	clz	r3, r3
 8001e02:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d106      	bne.n	8001e16 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2102      	movs	r1, #2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff fbe5 	bl	80015e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2103      	movs	r1, #3
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fbc9 	bl	80015b4 <LL_ADC_GetOffsetChannel>
 8001e22:	4603      	mov	r3, r0
 8001e24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d10a      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x396>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2103      	movs	r1, #3
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff fbbe 	bl	80015b4 <LL_ADC_GetOffsetChannel>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	0e9b      	lsrs	r3, r3, #26
 8001e3c:	f003 021f 	and.w	r2, r3, #31
 8001e40:	e017      	b.n	8001e72 <HAL_ADC_ConfigChannel+0x3c6>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2103      	movs	r1, #3
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff fbb3 	bl	80015b4 <LL_ADC_GetOffsetChannel>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e54:	fa93 f3a3 	rbit	r3, r3
 8001e58:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001e5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e5c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001e5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001e64:	2320      	movs	r3, #32
 8001e66:	e003      	b.n	8001e70 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001e68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e6a:	fab3 f383 	clz	r3, r3
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d105      	bne.n	8001e8a <HAL_ADC_ConfigChannel+0x3de>
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	0e9b      	lsrs	r3, r3, #26
 8001e84:	f003 031f 	and.w	r3, r3, #31
 8001e88:	e011      	b.n	8001eae <HAL_ADC_ConfigChannel+0x402>
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e92:	fa93 f3a3 	rbit	r3, r3
 8001e96:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001e98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e9a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001ea2:	2320      	movs	r3, #32
 8001ea4:	e003      	b.n	8001eae <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ea8:	fab3 f383 	clz	r3, r3
 8001eac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d106      	bne.n	8001ec0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2103      	movs	r1, #3
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff fb90 	bl	80015e0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff fc6f 	bl	80017a8 <LL_ADC_IsEnabled>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f040 813f 	bne.w	8002150 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6818      	ldr	r0, [r3, #0]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	6819      	ldr	r1, [r3, #0]
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	f7ff fbf0 	bl	80016c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	4a8e      	ldr	r2, [pc, #568]	; (8002124 <HAL_ADC_ConfigChannel+0x678>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	f040 8130 	bne.w	8002150 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d10b      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x46c>
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	0e9b      	lsrs	r3, r3, #26
 8001f06:	3301      	adds	r3, #1
 8001f08:	f003 031f 	and.w	r3, r3, #31
 8001f0c:	2b09      	cmp	r3, #9
 8001f0e:	bf94      	ite	ls
 8001f10:	2301      	movls	r3, #1
 8001f12:	2300      	movhi	r3, #0
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	e019      	b.n	8001f4c <HAL_ADC_ConfigChannel+0x4a0>
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f20:	fa93 f3a3 	rbit	r3, r3
 8001f24:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001f26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f28:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001f2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001f30:	2320      	movs	r3, #32
 8001f32:	e003      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001f34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f36:	fab3 f383 	clz	r3, r3
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	f003 031f 	and.w	r3, r3, #31
 8001f42:	2b09      	cmp	r3, #9
 8001f44:	bf94      	ite	ls
 8001f46:	2301      	movls	r3, #1
 8001f48:	2300      	movhi	r3, #0
 8001f4a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d079      	beq.n	8002044 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d107      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x4c0>
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	0e9b      	lsrs	r3, r3, #26
 8001f62:	3301      	adds	r3, #1
 8001f64:	069b      	lsls	r3, r3, #26
 8001f66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f6a:	e015      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x4ec>
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f74:	fa93 f3a3 	rbit	r3, r3
 8001f78:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f7c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001f84:	2320      	movs	r3, #32
 8001f86:	e003      	b.n	8001f90 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001f88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f8a:	fab3 f383 	clz	r3, r3
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	3301      	adds	r3, #1
 8001f92:	069b      	lsls	r3, r3, #26
 8001f94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d109      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x50c>
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	0e9b      	lsrs	r3, r3, #26
 8001faa:	3301      	adds	r3, #1
 8001fac:	f003 031f 	and.w	r3, r3, #31
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb6:	e017      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x53c>
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fc0:	fa93 f3a3 	rbit	r3, r3
 8001fc4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001fc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fc8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001fca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001fd0:	2320      	movs	r3, #32
 8001fd2:	e003      	b.n	8001fdc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001fd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fd6:	fab3 f383 	clz	r3, r3
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	3301      	adds	r3, #1
 8001fde:	f003 031f 	and.w	r3, r3, #31
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe8:	ea42 0103 	orr.w	r1, r2, r3
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d10a      	bne.n	800200e <HAL_ADC_ConfigChannel+0x562>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	0e9b      	lsrs	r3, r3, #26
 8001ffe:	3301      	adds	r3, #1
 8002000:	f003 021f 	and.w	r2, r3, #31
 8002004:	4613      	mov	r3, r2
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	4413      	add	r3, r2
 800200a:	051b      	lsls	r3, r3, #20
 800200c:	e018      	b.n	8002040 <HAL_ADC_ConfigChannel+0x594>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002016:	fa93 f3a3 	rbit	r3, r3
 800201a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800201c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800201e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002026:	2320      	movs	r3, #32
 8002028:	e003      	b.n	8002032 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800202a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800202c:	fab3 f383 	clz	r3, r3
 8002030:	b2db      	uxtb	r3, r3
 8002032:	3301      	adds	r3, #1
 8002034:	f003 021f 	and.w	r2, r3, #31
 8002038:	4613      	mov	r3, r2
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	4413      	add	r3, r2
 800203e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002040:	430b      	orrs	r3, r1
 8002042:	e080      	b.n	8002146 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800204c:	2b00      	cmp	r3, #0
 800204e:	d107      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x5b4>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	0e9b      	lsrs	r3, r3, #26
 8002056:	3301      	adds	r3, #1
 8002058:	069b      	lsls	r3, r3, #26
 800205a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800205e:	e015      	b.n	800208c <HAL_ADC_ConfigChannel+0x5e0>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002068:	fa93 f3a3 	rbit	r3, r3
 800206c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800206e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002070:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002078:	2320      	movs	r3, #32
 800207a:	e003      	b.n	8002084 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800207c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800207e:	fab3 f383 	clz	r3, r3
 8002082:	b2db      	uxtb	r3, r3
 8002084:	3301      	adds	r3, #1
 8002086:	069b      	lsls	r3, r3, #26
 8002088:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002094:	2b00      	cmp	r3, #0
 8002096:	d109      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x600>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	0e9b      	lsrs	r3, r3, #26
 800209e:	3301      	adds	r3, #1
 80020a0:	f003 031f 	and.w	r3, r3, #31
 80020a4:	2101      	movs	r1, #1
 80020a6:	fa01 f303 	lsl.w	r3, r1, r3
 80020aa:	e017      	b.n	80020dc <HAL_ADC_ConfigChannel+0x630>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b2:	6a3b      	ldr	r3, [r7, #32]
 80020b4:	fa93 f3a3 	rbit	r3, r3
 80020b8:	61fb      	str	r3, [r7, #28]
  return result;
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80020c4:	2320      	movs	r3, #32
 80020c6:	e003      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	fab3 f383 	clz	r3, r3
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	3301      	adds	r3, #1
 80020d2:	f003 031f 	and.w	r3, r3, #31
 80020d6:	2101      	movs	r1, #1
 80020d8:	fa01 f303 	lsl.w	r3, r1, r3
 80020dc:	ea42 0103 	orr.w	r1, r2, r3
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10d      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x65c>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	0e9b      	lsrs	r3, r3, #26
 80020f2:	3301      	adds	r3, #1
 80020f4:	f003 021f 	and.w	r2, r3, #31
 80020f8:	4613      	mov	r3, r2
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	4413      	add	r3, r2
 80020fe:	3b1e      	subs	r3, #30
 8002100:	051b      	lsls	r3, r3, #20
 8002102:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002106:	e01d      	b.n	8002144 <HAL_ADC_ConfigChannel+0x698>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	fa93 f3a3 	rbit	r3, r3
 8002114:	613b      	str	r3, [r7, #16]
  return result;
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d103      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002120:	2320      	movs	r3, #32
 8002122:	e005      	b.n	8002130 <HAL_ADC_ConfigChannel+0x684>
 8002124:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	fab3 f383 	clz	r3, r3
 800212e:	b2db      	uxtb	r3, r3
 8002130:	3301      	adds	r3, #1
 8002132:	f003 021f 	and.w	r2, r3, #31
 8002136:	4613      	mov	r3, r2
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	4413      	add	r3, r2
 800213c:	3b1e      	subs	r3, #30
 800213e:	051b      	lsls	r3, r3, #20
 8002140:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002144:	430b      	orrs	r3, r1
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	6892      	ldr	r2, [r2, #8]
 800214a:	4619      	mov	r1, r3
 800214c:	f7ff fa8f 	bl	800166e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4b3d      	ldr	r3, [pc, #244]	; (800224c <HAL_ADC_ConfigChannel+0x7a0>)
 8002156:	4013      	ands	r3, r2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d06c      	beq.n	8002236 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800215c:	483c      	ldr	r0, [pc, #240]	; (8002250 <HAL_ADC_ConfigChannel+0x7a4>)
 800215e:	f7ff f9f7 	bl	8001550 <LL_ADC_GetCommonPathInternalCh>
 8002162:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a3a      	ldr	r2, [pc, #232]	; (8002254 <HAL_ADC_ConfigChannel+0x7a8>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d127      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002170:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002174:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d121      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a35      	ldr	r2, [pc, #212]	; (8002258 <HAL_ADC_ConfigChannel+0x7ac>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d157      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002186:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800218a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800218e:	4619      	mov	r1, r3
 8002190:	482f      	ldr	r0, [pc, #188]	; (8002250 <HAL_ADC_ConfigChannel+0x7a4>)
 8002192:	f7ff f9ca 	bl	800152a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002196:	4b31      	ldr	r3, [pc, #196]	; (800225c <HAL_ADC_ConfigChannel+0x7b0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	099b      	lsrs	r3, r3, #6
 800219c:	4a30      	ldr	r2, [pc, #192]	; (8002260 <HAL_ADC_ConfigChannel+0x7b4>)
 800219e:	fba2 2303 	umull	r2, r3, r2, r3
 80021a2:	099b      	lsrs	r3, r3, #6
 80021a4:	1c5a      	adds	r2, r3, #1
 80021a6:	4613      	mov	r3, r2
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	4413      	add	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80021b0:	e002      	b.n	80021b8 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	3b01      	subs	r3, #1
 80021b6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f9      	bne.n	80021b2 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021be:	e03a      	b.n	8002236 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a27      	ldr	r2, [pc, #156]	; (8002264 <HAL_ADC_ConfigChannel+0x7b8>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d113      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x746>
 80021ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10d      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a1f      	ldr	r2, [pc, #124]	; (8002258 <HAL_ADC_ConfigChannel+0x7ac>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d12a      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021e8:	4619      	mov	r1, r3
 80021ea:	4819      	ldr	r0, [pc, #100]	; (8002250 <HAL_ADC_ConfigChannel+0x7a4>)
 80021ec:	f7ff f99d 	bl	800152a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021f0:	e021      	b.n	8002236 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a1c      	ldr	r2, [pc, #112]	; (8002268 <HAL_ADC_ConfigChannel+0x7bc>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d11c      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80021fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002200:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d116      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a12      	ldr	r2, [pc, #72]	; (8002258 <HAL_ADC_ConfigChannel+0x7ac>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d111      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002212:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002216:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800221a:	4619      	mov	r1, r3
 800221c:	480c      	ldr	r0, [pc, #48]	; (8002250 <HAL_ADC_ConfigChannel+0x7a4>)
 800221e:	f7ff f984 	bl	800152a <LL_ADC_SetCommonPathInternalCh>
 8002222:	e008      	b.n	8002236 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002228:	f043 0220 	orr.w	r2, r3, #32
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800223e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002242:	4618      	mov	r0, r3
 8002244:	37d8      	adds	r7, #216	; 0xd8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	80080000 	.word	0x80080000
 8002250:	50040300 	.word	0x50040300
 8002254:	c7520000 	.word	0xc7520000
 8002258:	50040000 	.word	0x50040000
 800225c:	20000000 	.word	0x20000000
 8002260:	053e2d63 	.word	0x053e2d63
 8002264:	cb840000 	.word	0xcb840000
 8002268:	80000001 	.word	0x80000001

0800226c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800227c:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <__NVIC_SetPriorityGrouping+0x44>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002288:	4013      	ands	r3, r2
 800228a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002294:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800229c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800229e:	4a04      	ldr	r2, [pc, #16]	; (80022b0 <__NVIC_SetPriorityGrouping+0x44>)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	60d3      	str	r3, [r2, #12]
}
 80022a4:	bf00      	nop
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b8:	4b04      	ldr	r3, [pc, #16]	; (80022cc <__NVIC_GetPriorityGrouping+0x18>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	0a1b      	lsrs	r3, r3, #8
 80022be:	f003 0307 	and.w	r3, r3, #7
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	db0b      	blt.n	80022fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	f003 021f 	and.w	r2, r3, #31
 80022e8:	4907      	ldr	r1, [pc, #28]	; (8002308 <__NVIC_EnableIRQ+0x38>)
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	095b      	lsrs	r3, r3, #5
 80022f0:	2001      	movs	r0, #1
 80022f2:	fa00 f202 	lsl.w	r2, r0, r2
 80022f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	e000e100 	.word	0xe000e100

0800230c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	6039      	str	r1, [r7, #0]
 8002316:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231c:	2b00      	cmp	r3, #0
 800231e:	db0a      	blt.n	8002336 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	b2da      	uxtb	r2, r3
 8002324:	490c      	ldr	r1, [pc, #48]	; (8002358 <__NVIC_SetPriority+0x4c>)
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	0112      	lsls	r2, r2, #4
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	440b      	add	r3, r1
 8002330:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002334:	e00a      	b.n	800234c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	b2da      	uxtb	r2, r3
 800233a:	4908      	ldr	r1, [pc, #32]	; (800235c <__NVIC_SetPriority+0x50>)
 800233c:	79fb      	ldrb	r3, [r7, #7]
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	3b04      	subs	r3, #4
 8002344:	0112      	lsls	r2, r2, #4
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	440b      	add	r3, r1
 800234a:	761a      	strb	r2, [r3, #24]
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	e000e100 	.word	0xe000e100
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002360:	b480      	push	{r7}
 8002362:	b089      	sub	sp, #36	; 0x24
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	f1c3 0307 	rsb	r3, r3, #7
 800237a:	2b04      	cmp	r3, #4
 800237c:	bf28      	it	cs
 800237e:	2304      	movcs	r3, #4
 8002380:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	3304      	adds	r3, #4
 8002386:	2b06      	cmp	r3, #6
 8002388:	d902      	bls.n	8002390 <NVIC_EncodePriority+0x30>
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3b03      	subs	r3, #3
 800238e:	e000      	b.n	8002392 <NVIC_EncodePriority+0x32>
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002394:	f04f 32ff 	mov.w	r2, #4294967295
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43da      	mvns	r2, r3
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	401a      	ands	r2, r3
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a8:	f04f 31ff 	mov.w	r1, #4294967295
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	fa01 f303 	lsl.w	r3, r1, r3
 80023b2:	43d9      	mvns	r1, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b8:	4313      	orrs	r3, r2
         );
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3724      	adds	r7, #36	; 0x24
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023d8:	d301      	bcc.n	80023de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023da:	2301      	movs	r3, #1
 80023dc:	e00f      	b.n	80023fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023de:	4a0a      	ldr	r2, [pc, #40]	; (8002408 <SysTick_Config+0x40>)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023e6:	210f      	movs	r1, #15
 80023e8:	f04f 30ff 	mov.w	r0, #4294967295
 80023ec:	f7ff ff8e 	bl	800230c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f0:	4b05      	ldr	r3, [pc, #20]	; (8002408 <SysTick_Config+0x40>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023f6:	4b04      	ldr	r3, [pc, #16]	; (8002408 <SysTick_Config+0x40>)
 80023f8:	2207      	movs	r2, #7
 80023fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	e000e010 	.word	0xe000e010

0800240c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7ff ff29 	bl	800226c <__NVIC_SetPriorityGrouping>
}
 800241a:	bf00      	nop
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b086      	sub	sp, #24
 8002426:	af00      	add	r7, sp, #0
 8002428:	4603      	mov	r3, r0
 800242a:	60b9      	str	r1, [r7, #8]
 800242c:	607a      	str	r2, [r7, #4]
 800242e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002434:	f7ff ff3e 	bl	80022b4 <__NVIC_GetPriorityGrouping>
 8002438:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	68b9      	ldr	r1, [r7, #8]
 800243e:	6978      	ldr	r0, [r7, #20]
 8002440:	f7ff ff8e 	bl	8002360 <NVIC_EncodePriority>
 8002444:	4602      	mov	r2, r0
 8002446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800244a:	4611      	mov	r1, r2
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff ff5d 	bl	800230c <__NVIC_SetPriority>
}
 8002452:	bf00      	nop
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b082      	sub	sp, #8
 800245e:	af00      	add	r7, sp, #0
 8002460:	4603      	mov	r3, r0
 8002462:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff ff31 	bl	80022d0 <__NVIC_EnableIRQ>
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7ff ffa2 	bl	80023c8 <SysTick_Config>
 8002484:	4603      	mov	r3, r0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
	...

08002490 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e098      	b.n	80025d4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	461a      	mov	r2, r3
 80024a8:	4b4d      	ldr	r3, [pc, #308]	; (80025e0 <HAL_DMA_Init+0x150>)
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d80f      	bhi.n	80024ce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	461a      	mov	r2, r3
 80024b4:	4b4b      	ldr	r3, [pc, #300]	; (80025e4 <HAL_DMA_Init+0x154>)
 80024b6:	4413      	add	r3, r2
 80024b8:	4a4b      	ldr	r2, [pc, #300]	; (80025e8 <HAL_DMA_Init+0x158>)
 80024ba:	fba2 2303 	umull	r2, r3, r2, r3
 80024be:	091b      	lsrs	r3, r3, #4
 80024c0:	009a      	lsls	r2, r3, #2
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a48      	ldr	r2, [pc, #288]	; (80025ec <HAL_DMA_Init+0x15c>)
 80024ca:	641a      	str	r2, [r3, #64]	; 0x40
 80024cc:	e00e      	b.n	80024ec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	461a      	mov	r2, r3
 80024d4:	4b46      	ldr	r3, [pc, #280]	; (80025f0 <HAL_DMA_Init+0x160>)
 80024d6:	4413      	add	r3, r2
 80024d8:	4a43      	ldr	r2, [pc, #268]	; (80025e8 <HAL_DMA_Init+0x158>)
 80024da:	fba2 2303 	umull	r2, r3, r2, r3
 80024de:	091b      	lsrs	r3, r3, #4
 80024e0:	009a      	lsls	r2, r3, #2
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a42      	ldr	r2, [pc, #264]	; (80025f4 <HAL_DMA_Init+0x164>)
 80024ea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2202      	movs	r2, #2
 80024f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002506:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002510:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800251c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002528:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	4313      	orrs	r3, r2
 8002534:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002546:	d039      	beq.n	80025bc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254c:	4a27      	ldr	r2, [pc, #156]	; (80025ec <HAL_DMA_Init+0x15c>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d11a      	bne.n	8002588 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002552:	4b29      	ldr	r3, [pc, #164]	; (80025f8 <HAL_DMA_Init+0x168>)
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255a:	f003 031c 	and.w	r3, r3, #28
 800255e:	210f      	movs	r1, #15
 8002560:	fa01 f303 	lsl.w	r3, r1, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	4924      	ldr	r1, [pc, #144]	; (80025f8 <HAL_DMA_Init+0x168>)
 8002568:	4013      	ands	r3, r2
 800256a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800256c:	4b22      	ldr	r3, [pc, #136]	; (80025f8 <HAL_DMA_Init+0x168>)
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6859      	ldr	r1, [r3, #4]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002578:	f003 031c 	and.w	r3, r3, #28
 800257c:	fa01 f303 	lsl.w	r3, r1, r3
 8002580:	491d      	ldr	r1, [pc, #116]	; (80025f8 <HAL_DMA_Init+0x168>)
 8002582:	4313      	orrs	r3, r2
 8002584:	600b      	str	r3, [r1, #0]
 8002586:	e019      	b.n	80025bc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002588:	4b1c      	ldr	r3, [pc, #112]	; (80025fc <HAL_DMA_Init+0x16c>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002590:	f003 031c 	and.w	r3, r3, #28
 8002594:	210f      	movs	r1, #15
 8002596:	fa01 f303 	lsl.w	r3, r1, r3
 800259a:	43db      	mvns	r3, r3
 800259c:	4917      	ldr	r1, [pc, #92]	; (80025fc <HAL_DMA_Init+0x16c>)
 800259e:	4013      	ands	r3, r2
 80025a0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80025a2:	4b16      	ldr	r3, [pc, #88]	; (80025fc <HAL_DMA_Init+0x16c>)
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6859      	ldr	r1, [r3, #4]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	f003 031c 	and.w	r3, r3, #28
 80025b2:	fa01 f303 	lsl.w	r3, r1, r3
 80025b6:	4911      	ldr	r1, [pc, #68]	; (80025fc <HAL_DMA_Init+0x16c>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	40020407 	.word	0x40020407
 80025e4:	bffdfff8 	.word	0xbffdfff8
 80025e8:	cccccccd 	.word	0xcccccccd
 80025ec:	40020000 	.word	0x40020000
 80025f0:	bffdfbf8 	.word	0xbffdfbf8
 80025f4:	40020400 	.word	0x40020400
 80025f8:	400200a8 	.word	0x400200a8
 80025fc:	400204a8 	.word	0x400204a8

08002600 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261c:	f003 031c 	and.w	r3, r3, #28
 8002620:	2204      	movs	r2, #4
 8002622:	409a      	lsls	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4013      	ands	r3, r2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d026      	beq.n	800267a <HAL_DMA_IRQHandler+0x7a>
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	f003 0304 	and.w	r3, r3, #4
 8002632:	2b00      	cmp	r3, #0
 8002634:	d021      	beq.n	800267a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0320 	and.w	r3, r3, #32
 8002640:	2b00      	cmp	r3, #0
 8002642:	d107      	bne.n	8002654 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0204 	bic.w	r2, r2, #4
 8002652:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002658:	f003 021c 	and.w	r2, r3, #28
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	2104      	movs	r1, #4
 8002662:	fa01 f202 	lsl.w	r2, r1, r2
 8002666:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266c:	2b00      	cmp	r3, #0
 800266e:	d071      	beq.n	8002754 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002678:	e06c      	b.n	8002754 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267e:	f003 031c 	and.w	r3, r3, #28
 8002682:	2202      	movs	r2, #2
 8002684:	409a      	lsls	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	4013      	ands	r3, r2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d02e      	beq.n	80026ec <HAL_DMA_IRQHandler+0xec>
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d029      	beq.n	80026ec <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0320 	and.w	r3, r3, #32
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10b      	bne.n	80026be <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 020a 	bic.w	r2, r2, #10
 80026b4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	f003 021c 	and.w	r2, r3, #28
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	2102      	movs	r1, #2
 80026cc:	fa01 f202 	lsl.w	r2, r1, r2
 80026d0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d038      	beq.n	8002754 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80026ea:	e033      	b.n	8002754 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f0:	f003 031c 	and.w	r3, r3, #28
 80026f4:	2208      	movs	r2, #8
 80026f6:	409a      	lsls	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4013      	ands	r3, r2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d02a      	beq.n	8002756 <HAL_DMA_IRQHandler+0x156>
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	f003 0308 	and.w	r3, r3, #8
 8002706:	2b00      	cmp	r3, #0
 8002708:	d025      	beq.n	8002756 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 020e 	bic.w	r2, r2, #14
 8002718:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271e:	f003 021c 	and.w	r2, r3, #28
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	2101      	movs	r1, #1
 8002728:	fa01 f202 	lsl.w	r2, r1, r2
 800272c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002748:	2b00      	cmp	r3, #0
 800274a:	d004      	beq.n	8002756 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002754:	bf00      	nop
 8002756:	bf00      	nop
}
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
	...

08002760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002760:	b480      	push	{r7}
 8002762:	b087      	sub	sp, #28
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800276a:	2300      	movs	r3, #0
 800276c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800276e:	e148      	b.n	8002a02 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	2101      	movs	r1, #1
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	fa01 f303 	lsl.w	r3, r1, r3
 800277c:	4013      	ands	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 813a 	beq.w	80029fc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d00b      	beq.n	80027a8 <HAL_GPIO_Init+0x48>
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	2b02      	cmp	r3, #2
 8002796:	d007      	beq.n	80027a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800279c:	2b11      	cmp	r3, #17
 800279e:	d003      	beq.n	80027a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b12      	cmp	r3, #18
 80027a6:	d130      	bne.n	800280a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	2203      	movs	r2, #3
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	4013      	ands	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	68da      	ldr	r2, [r3, #12]
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027de:	2201      	movs	r2, #1
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	43db      	mvns	r3, r3
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	4013      	ands	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	091b      	lsrs	r3, r3, #4
 80027f4:	f003 0201 	and.w	r2, r3, #1
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	4313      	orrs	r3, r2
 8002802:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	2203      	movs	r2, #3
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43db      	mvns	r3, r3
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	4013      	ands	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	4313      	orrs	r3, r2
 8002832:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2b02      	cmp	r3, #2
 8002840:	d003      	beq.n	800284a <HAL_GPIO_Init+0xea>
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b12      	cmp	r3, #18
 8002848:	d123      	bne.n	8002892 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	08da      	lsrs	r2, r3, #3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3208      	adds	r2, #8
 8002852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002856:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	220f      	movs	r2, #15
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	4013      	ands	r3, r2
 800286c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	691a      	ldr	r2, [r3, #16]
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	4313      	orrs	r3, r2
 8002882:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	08da      	lsrs	r2, r3, #3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3208      	adds	r2, #8
 800288c:	6939      	ldr	r1, [r7, #16]
 800288e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	2203      	movs	r2, #3
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43db      	mvns	r3, r3
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	4013      	ands	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f003 0203 	and.w	r2, r3, #3
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	4313      	orrs	r3, r2
 80028be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 8094 	beq.w	80029fc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028d4:	4b52      	ldr	r3, [pc, #328]	; (8002a20 <HAL_GPIO_Init+0x2c0>)
 80028d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028d8:	4a51      	ldr	r2, [pc, #324]	; (8002a20 <HAL_GPIO_Init+0x2c0>)
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	6613      	str	r3, [r2, #96]	; 0x60
 80028e0:	4b4f      	ldr	r3, [pc, #316]	; (8002a20 <HAL_GPIO_Init+0x2c0>)
 80028e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028ec:	4a4d      	ldr	r2, [pc, #308]	; (8002a24 <HAL_GPIO_Init+0x2c4>)
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	089b      	lsrs	r3, r3, #2
 80028f2:	3302      	adds	r3, #2
 80028f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	f003 0303 	and.w	r3, r3, #3
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	220f      	movs	r2, #15
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	4013      	ands	r3, r2
 800290e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002916:	d00d      	beq.n	8002934 <HAL_GPIO_Init+0x1d4>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a43      	ldr	r2, [pc, #268]	; (8002a28 <HAL_GPIO_Init+0x2c8>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d007      	beq.n	8002930 <HAL_GPIO_Init+0x1d0>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a42      	ldr	r2, [pc, #264]	; (8002a2c <HAL_GPIO_Init+0x2cc>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d101      	bne.n	800292c <HAL_GPIO_Init+0x1cc>
 8002928:	2302      	movs	r3, #2
 800292a:	e004      	b.n	8002936 <HAL_GPIO_Init+0x1d6>
 800292c:	2307      	movs	r3, #7
 800292e:	e002      	b.n	8002936 <HAL_GPIO_Init+0x1d6>
 8002930:	2301      	movs	r3, #1
 8002932:	e000      	b.n	8002936 <HAL_GPIO_Init+0x1d6>
 8002934:	2300      	movs	r3, #0
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	f002 0203 	and.w	r2, r2, #3
 800293c:	0092      	lsls	r2, r2, #2
 800293e:	4093      	lsls	r3, r2
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	4313      	orrs	r3, r2
 8002944:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002946:	4937      	ldr	r1, [pc, #220]	; (8002a24 <HAL_GPIO_Init+0x2c4>)
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	089b      	lsrs	r3, r3, #2
 800294c:	3302      	adds	r3, #2
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002954:	4b36      	ldr	r3, [pc, #216]	; (8002a30 <HAL_GPIO_Init+0x2d0>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	43db      	mvns	r3, r3
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	4013      	ands	r3, r2
 8002962:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	4313      	orrs	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002978:	4a2d      	ldr	r2, [pc, #180]	; (8002a30 <HAL_GPIO_Init+0x2d0>)
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800297e:	4b2c      	ldr	r3, [pc, #176]	; (8002a30 <HAL_GPIO_Init+0x2d0>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	43db      	mvns	r3, r3
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	4013      	ands	r3, r2
 800298c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4313      	orrs	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029a2:	4a23      	ldr	r2, [pc, #140]	; (8002a30 <HAL_GPIO_Init+0x2d0>)
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029a8:	4b21      	ldr	r3, [pc, #132]	; (8002a30 <HAL_GPIO_Init+0x2d0>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	4013      	ands	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029cc:	4a18      	ldr	r2, [pc, #96]	; (8002a30 <HAL_GPIO_Init+0x2d0>)
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029d2:	4b17      	ldr	r3, [pc, #92]	; (8002a30 <HAL_GPIO_Init+0x2d0>)
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	43db      	mvns	r3, r3
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	4013      	ands	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029f6:	4a0e      	ldr	r2, [pc, #56]	; (8002a30 <HAL_GPIO_Init+0x2d0>)
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	3301      	adds	r3, #1
 8002a00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	fa22 f303 	lsr.w	r3, r2, r3
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f47f aeaf 	bne.w	8002770 <HAL_GPIO_Init+0x10>
  }
}
 8002a12:	bf00      	nop
 8002a14:	bf00      	nop
 8002a16:	371c      	adds	r7, #28
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	40021000 	.word	0x40021000
 8002a24:	40010000 	.word	0x40010000
 8002a28:	48000400 	.word	0x48000400
 8002a2c:	48000800 	.word	0x48000800
 8002a30:	40010400 	.word	0x40010400

08002a34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	807b      	strh	r3, [r7, #2]
 8002a40:	4613      	mov	r3, r2
 8002a42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a44:	787b      	ldrb	r3, [r7, #1]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a4a:	887a      	ldrh	r2, [r7, #2]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a50:	e002      	b.n	8002a58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a52:	887a      	ldrh	r2, [r7, #2]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a68:	4b05      	ldr	r3, [pc, #20]	; (8002a80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a04      	ldr	r2, [pc, #16]	; (8002a80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a72:	6013      	str	r3, [r2, #0]
}
 8002a74:	bf00      	nop
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	40007000 	.word	0x40007000

08002a84 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002a88:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <HAL_PWREx_GetVoltageRange+0x18>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	40007000 	.word	0x40007000

08002aa0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aae:	d130      	bne.n	8002b12 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ab0:	4b23      	ldr	r3, [pc, #140]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002abc:	d038      	beq.n	8002b30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002abe:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ac6:	4a1e      	ldr	r2, [pc, #120]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ac8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002acc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ace:	4b1d      	ldr	r3, [pc, #116]	; (8002b44 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2232      	movs	r2, #50	; 0x32
 8002ad4:	fb02 f303 	mul.w	r3, r2, r3
 8002ad8:	4a1b      	ldr	r2, [pc, #108]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ada:	fba2 2303 	umull	r2, r3, r2, r3
 8002ade:	0c9b      	lsrs	r3, r3, #18
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ae4:	e002      	b.n	8002aec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002aec:	4b14      	ldr	r3, [pc, #80]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002af8:	d102      	bne.n	8002b00 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1f2      	bne.n	8002ae6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b00:	4b0f      	ldr	r3, [pc, #60]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b0c:	d110      	bne.n	8002b30 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e00f      	b.n	8002b32 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b12:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b1e:	d007      	beq.n	8002b30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b20:	4b07      	ldr	r3, [pc, #28]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b28:	4a05      	ldr	r2, [pc, #20]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b2e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40007000 	.word	0x40007000
 8002b44:	20000000 	.word	0x20000000
 8002b48:	431bde83 	.word	0x431bde83

08002b4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b088      	sub	sp, #32
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d102      	bne.n	8002b60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	f000 bc11 	b.w	8003382 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b60:	4ba0      	ldr	r3, [pc, #640]	; (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 030c 	and.w	r3, r3, #12
 8002b68:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b6a:	4b9e      	ldr	r3, [pc, #632]	; (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0310 	and.w	r3, r3, #16
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 80e4 	beq.w	8002d4a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d007      	beq.n	8002b98 <HAL_RCC_OscConfig+0x4c>
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	2b0c      	cmp	r3, #12
 8002b8c:	f040 808b 	bne.w	8002ca6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	f040 8087 	bne.w	8002ca6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b98:	4b92      	ldr	r3, [pc, #584]	; (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x64>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e3e8      	b.n	8003382 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a1a      	ldr	r2, [r3, #32]
 8002bb4:	4b8b      	ldr	r3, [pc, #556]	; (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0308 	and.w	r3, r3, #8
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d004      	beq.n	8002bca <HAL_RCC_OscConfig+0x7e>
 8002bc0:	4b88      	ldr	r3, [pc, #544]	; (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bc8:	e005      	b.n	8002bd6 <HAL_RCC_OscConfig+0x8a>
 8002bca:	4b86      	ldr	r3, [pc, #536]	; (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002bcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bd0:	091b      	lsrs	r3, r3, #4
 8002bd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d223      	bcs.n	8002c22 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 fd7a 	bl	80036d8 <RCC_SetFlashLatencyFromMSIRange>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e3c9      	b.n	8003382 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bee:	4b7d      	ldr	r3, [pc, #500]	; (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a7c      	ldr	r2, [pc, #496]	; (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002bf4:	f043 0308 	orr.w	r3, r3, #8
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	4b7a      	ldr	r3, [pc, #488]	; (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	4977      	ldr	r1, [pc, #476]	; (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c0c:	4b75      	ldr	r3, [pc, #468]	; (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	69db      	ldr	r3, [r3, #28]
 8002c18:	021b      	lsls	r3, r3, #8
 8002c1a:	4972      	ldr	r1, [pc, #456]	; (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	604b      	str	r3, [r1, #4]
 8002c20:	e025      	b.n	8002c6e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c22:	4b70      	ldr	r3, [pc, #448]	; (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a6f      	ldr	r2, [pc, #444]	; (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002c28:	f043 0308 	orr.w	r3, r3, #8
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	4b6d      	ldr	r3, [pc, #436]	; (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	496a      	ldr	r1, [pc, #424]	; (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c40:	4b68      	ldr	r3, [pc, #416]	; (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	021b      	lsls	r3, r3, #8
 8002c4e:	4965      	ldr	r1, [pc, #404]	; (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d109      	bne.n	8002c6e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 fd3a 	bl	80036d8 <RCC_SetFlashLatencyFromMSIRange>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e389      	b.n	8003382 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c6e:	f000 fc6f 	bl	8003550 <HAL_RCC_GetSysClockFreq>
 8002c72:	4602      	mov	r2, r0
 8002c74:	4b5b      	ldr	r3, [pc, #364]	; (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	091b      	lsrs	r3, r3, #4
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	495a      	ldr	r1, [pc, #360]	; (8002de8 <HAL_RCC_OscConfig+0x29c>)
 8002c80:	5ccb      	ldrb	r3, [r1, r3]
 8002c82:	f003 031f 	and.w	r3, r3, #31
 8002c86:	fa22 f303 	lsr.w	r3, r2, r3
 8002c8a:	4a58      	ldr	r2, [pc, #352]	; (8002dec <HAL_RCC_OscConfig+0x2a0>)
 8002c8c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c8e:	4b58      	ldr	r3, [pc, #352]	; (8002df0 <HAL_RCC_OscConfig+0x2a4>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fe fbda 	bl	800144c <HAL_InitTick>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d052      	beq.n	8002d48 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002ca2:	7bfb      	ldrb	r3, [r7, #15]
 8002ca4:	e36d      	b.n	8003382 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d032      	beq.n	8002d14 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002cae:	4b4d      	ldr	r3, [pc, #308]	; (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a4c      	ldr	r2, [pc, #304]	; (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002cb4:	f043 0301 	orr.w	r3, r3, #1
 8002cb8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cba:	f7fe fc17 	bl	80014ec <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cc2:	f7fe fc13 	bl	80014ec <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e356      	b.n	8003382 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cd4:	4b43      	ldr	r3, [pc, #268]	; (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0f0      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ce0:	4b40      	ldr	r3, [pc, #256]	; (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a3f      	ldr	r2, [pc, #252]	; (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002ce6:	f043 0308 	orr.w	r3, r3, #8
 8002cea:	6013      	str	r3, [r2, #0]
 8002cec:	4b3d      	ldr	r3, [pc, #244]	; (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	493a      	ldr	r1, [pc, #232]	; (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cfe:	4b39      	ldr	r3, [pc, #228]	; (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	021b      	lsls	r3, r3, #8
 8002d0c:	4935      	ldr	r1, [pc, #212]	; (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	604b      	str	r3, [r1, #4]
 8002d12:	e01a      	b.n	8002d4a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d14:	4b33      	ldr	r3, [pc, #204]	; (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a32      	ldr	r2, [pc, #200]	; (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002d1a:	f023 0301 	bic.w	r3, r3, #1
 8002d1e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d20:	f7fe fbe4 	bl	80014ec <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d28:	f7fe fbe0 	bl	80014ec <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e323      	b.n	8003382 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d3a:	4b2a      	ldr	r3, [pc, #168]	; (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1f0      	bne.n	8002d28 <HAL_RCC_OscConfig+0x1dc>
 8002d46:	e000      	b.n	8002d4a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d48:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d073      	beq.n	8002e3e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d005      	beq.n	8002d68 <HAL_RCC_OscConfig+0x21c>
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	2b0c      	cmp	r3, #12
 8002d60:	d10e      	bne.n	8002d80 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	d10b      	bne.n	8002d80 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d68:	4b1e      	ldr	r3, [pc, #120]	; (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d063      	beq.n	8002e3c <HAL_RCC_OscConfig+0x2f0>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d15f      	bne.n	8002e3c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e300      	b.n	8003382 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d88:	d106      	bne.n	8002d98 <HAL_RCC_OscConfig+0x24c>
 8002d8a:	4b16      	ldr	r3, [pc, #88]	; (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a15      	ldr	r2, [pc, #84]	; (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	e01d      	b.n	8002dd4 <HAL_RCC_OscConfig+0x288>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002da0:	d10c      	bne.n	8002dbc <HAL_RCC_OscConfig+0x270>
 8002da2:	4b10      	ldr	r3, [pc, #64]	; (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a0f      	ldr	r2, [pc, #60]	; (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	4b0d      	ldr	r3, [pc, #52]	; (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a0c      	ldr	r2, [pc, #48]	; (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	e00b      	b.n	8002dd4 <HAL_RCC_OscConfig+0x288>
 8002dbc:	4b09      	ldr	r3, [pc, #36]	; (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a08      	ldr	r2, [pc, #32]	; (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dc6:	6013      	str	r3, [r2, #0]
 8002dc8:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a05      	ldr	r2, [pc, #20]	; (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d01b      	beq.n	8002e14 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ddc:	f7fe fb86 	bl	80014ec <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002de2:	e010      	b.n	8002e06 <HAL_RCC_OscConfig+0x2ba>
 8002de4:	40021000 	.word	0x40021000
 8002de8:	080054d0 	.word	0x080054d0
 8002dec:	20000000 	.word	0x20000000
 8002df0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002df4:	f7fe fb7a 	bl	80014ec <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b64      	cmp	r3, #100	; 0x64
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e2bd      	b.n	8003382 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e06:	4baf      	ldr	r3, [pc, #700]	; (80030c4 <HAL_RCC_OscConfig+0x578>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0f0      	beq.n	8002df4 <HAL_RCC_OscConfig+0x2a8>
 8002e12:	e014      	b.n	8002e3e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e14:	f7fe fb6a 	bl	80014ec <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e1c:	f7fe fb66 	bl	80014ec <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b64      	cmp	r3, #100	; 0x64
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e2a9      	b.n	8003382 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e2e:	4ba5      	ldr	r3, [pc, #660]	; (80030c4 <HAL_RCC_OscConfig+0x578>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f0      	bne.n	8002e1c <HAL_RCC_OscConfig+0x2d0>
 8002e3a:	e000      	b.n	8002e3e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d060      	beq.n	8002f0c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	2b04      	cmp	r3, #4
 8002e4e:	d005      	beq.n	8002e5c <HAL_RCC_OscConfig+0x310>
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	2b0c      	cmp	r3, #12
 8002e54:	d119      	bne.n	8002e8a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d116      	bne.n	8002e8a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e5c:	4b99      	ldr	r3, [pc, #612]	; (80030c4 <HAL_RCC_OscConfig+0x578>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d005      	beq.n	8002e74 <HAL_RCC_OscConfig+0x328>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e286      	b.n	8003382 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e74:	4b93      	ldr	r3, [pc, #588]	; (80030c4 <HAL_RCC_OscConfig+0x578>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	061b      	lsls	r3, r3, #24
 8002e82:	4990      	ldr	r1, [pc, #576]	; (80030c4 <HAL_RCC_OscConfig+0x578>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e88:	e040      	b.n	8002f0c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d023      	beq.n	8002eda <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e92:	4b8c      	ldr	r3, [pc, #560]	; (80030c4 <HAL_RCC_OscConfig+0x578>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a8b      	ldr	r2, [pc, #556]	; (80030c4 <HAL_RCC_OscConfig+0x578>)
 8002e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9e:	f7fe fb25 	bl	80014ec <HAL_GetTick>
 8002ea2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ea6:	f7fe fb21 	bl	80014ec <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e264      	b.n	8003382 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002eb8:	4b82      	ldr	r3, [pc, #520]	; (80030c4 <HAL_RCC_OscConfig+0x578>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d0f0      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec4:	4b7f      	ldr	r3, [pc, #508]	; (80030c4 <HAL_RCC_OscConfig+0x578>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	061b      	lsls	r3, r3, #24
 8002ed2:	497c      	ldr	r1, [pc, #496]	; (80030c4 <HAL_RCC_OscConfig+0x578>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	604b      	str	r3, [r1, #4]
 8002ed8:	e018      	b.n	8002f0c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eda:	4b7a      	ldr	r3, [pc, #488]	; (80030c4 <HAL_RCC_OscConfig+0x578>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a79      	ldr	r2, [pc, #484]	; (80030c4 <HAL_RCC_OscConfig+0x578>)
 8002ee0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ee4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee6:	f7fe fb01 	bl	80014ec <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eee:	f7fe fafd 	bl	80014ec <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e240      	b.n	8003382 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f00:	4b70      	ldr	r3, [pc, #448]	; (80030c4 <HAL_RCC_OscConfig+0x578>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1f0      	bne.n	8002eee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0308 	and.w	r3, r3, #8
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d03c      	beq.n	8002f92 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d01c      	beq.n	8002f5a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f20:	4b68      	ldr	r3, [pc, #416]	; (80030c4 <HAL_RCC_OscConfig+0x578>)
 8002f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f26:	4a67      	ldr	r2, [pc, #412]	; (80030c4 <HAL_RCC_OscConfig+0x578>)
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f30:	f7fe fadc 	bl	80014ec <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f38:	f7fe fad8 	bl	80014ec <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e21b      	b.n	8003382 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f4a:	4b5e      	ldr	r3, [pc, #376]	; (80030c4 <HAL_RCC_OscConfig+0x578>)
 8002f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0ef      	beq.n	8002f38 <HAL_RCC_OscConfig+0x3ec>
 8002f58:	e01b      	b.n	8002f92 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f5a:	4b5a      	ldr	r3, [pc, #360]	; (80030c4 <HAL_RCC_OscConfig+0x578>)
 8002f5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f60:	4a58      	ldr	r2, [pc, #352]	; (80030c4 <HAL_RCC_OscConfig+0x578>)
 8002f62:	f023 0301 	bic.w	r3, r3, #1
 8002f66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f6a:	f7fe fabf 	bl	80014ec <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f72:	f7fe fabb 	bl	80014ec <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e1fe      	b.n	8003382 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f84:	4b4f      	ldr	r3, [pc, #316]	; (80030c4 <HAL_RCC_OscConfig+0x578>)
 8002f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1ef      	bne.n	8002f72 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0304 	and.w	r3, r3, #4
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 80a6 	beq.w	80030ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002fa4:	4b47      	ldr	r3, [pc, #284]	; (80030c4 <HAL_RCC_OscConfig+0x578>)
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10d      	bne.n	8002fcc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fb0:	4b44      	ldr	r3, [pc, #272]	; (80030c4 <HAL_RCC_OscConfig+0x578>)
 8002fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb4:	4a43      	ldr	r2, [pc, #268]	; (80030c4 <HAL_RCC_OscConfig+0x578>)
 8002fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fba:	6593      	str	r3, [r2, #88]	; 0x58
 8002fbc:	4b41      	ldr	r3, [pc, #260]	; (80030c4 <HAL_RCC_OscConfig+0x578>)
 8002fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc4:	60bb      	str	r3, [r7, #8]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fcc:	4b3e      	ldr	r3, [pc, #248]	; (80030c8 <HAL_RCC_OscConfig+0x57c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d118      	bne.n	800300a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fd8:	4b3b      	ldr	r3, [pc, #236]	; (80030c8 <HAL_RCC_OscConfig+0x57c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a3a      	ldr	r2, [pc, #232]	; (80030c8 <HAL_RCC_OscConfig+0x57c>)
 8002fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fe4:	f7fe fa82 	bl	80014ec <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fec:	f7fe fa7e 	bl	80014ec <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e1c1      	b.n	8003382 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ffe:	4b32      	ldr	r3, [pc, #200]	; (80030c8 <HAL_RCC_OscConfig+0x57c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003006:	2b00      	cmp	r3, #0
 8003008:	d0f0      	beq.n	8002fec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d108      	bne.n	8003024 <HAL_RCC_OscConfig+0x4d8>
 8003012:	4b2c      	ldr	r3, [pc, #176]	; (80030c4 <HAL_RCC_OscConfig+0x578>)
 8003014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003018:	4a2a      	ldr	r2, [pc, #168]	; (80030c4 <HAL_RCC_OscConfig+0x578>)
 800301a:	f043 0301 	orr.w	r3, r3, #1
 800301e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003022:	e024      	b.n	800306e <HAL_RCC_OscConfig+0x522>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	2b05      	cmp	r3, #5
 800302a:	d110      	bne.n	800304e <HAL_RCC_OscConfig+0x502>
 800302c:	4b25      	ldr	r3, [pc, #148]	; (80030c4 <HAL_RCC_OscConfig+0x578>)
 800302e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003032:	4a24      	ldr	r2, [pc, #144]	; (80030c4 <HAL_RCC_OscConfig+0x578>)
 8003034:	f043 0304 	orr.w	r3, r3, #4
 8003038:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800303c:	4b21      	ldr	r3, [pc, #132]	; (80030c4 <HAL_RCC_OscConfig+0x578>)
 800303e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003042:	4a20      	ldr	r2, [pc, #128]	; (80030c4 <HAL_RCC_OscConfig+0x578>)
 8003044:	f043 0301 	orr.w	r3, r3, #1
 8003048:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800304c:	e00f      	b.n	800306e <HAL_RCC_OscConfig+0x522>
 800304e:	4b1d      	ldr	r3, [pc, #116]	; (80030c4 <HAL_RCC_OscConfig+0x578>)
 8003050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003054:	4a1b      	ldr	r2, [pc, #108]	; (80030c4 <HAL_RCC_OscConfig+0x578>)
 8003056:	f023 0301 	bic.w	r3, r3, #1
 800305a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800305e:	4b19      	ldr	r3, [pc, #100]	; (80030c4 <HAL_RCC_OscConfig+0x578>)
 8003060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003064:	4a17      	ldr	r2, [pc, #92]	; (80030c4 <HAL_RCC_OscConfig+0x578>)
 8003066:	f023 0304 	bic.w	r3, r3, #4
 800306a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d016      	beq.n	80030a4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003076:	f7fe fa39 	bl	80014ec <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800307c:	e00a      	b.n	8003094 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800307e:	f7fe fa35 	bl	80014ec <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	f241 3288 	movw	r2, #5000	; 0x1388
 800308c:	4293      	cmp	r3, r2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e176      	b.n	8003382 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003094:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <HAL_RCC_OscConfig+0x578>)
 8003096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0ed      	beq.n	800307e <HAL_RCC_OscConfig+0x532>
 80030a2:	e01a      	b.n	80030da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a4:	f7fe fa22 	bl	80014ec <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030aa:	e00f      	b.n	80030cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ac:	f7fe fa1e 	bl	80014ec <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d906      	bls.n	80030cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e15f      	b.n	8003382 <HAL_RCC_OscConfig+0x836>
 80030c2:	bf00      	nop
 80030c4:	40021000 	.word	0x40021000
 80030c8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030cc:	4baa      	ldr	r3, [pc, #680]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 80030ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1e8      	bne.n	80030ac <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030da:	7ffb      	ldrb	r3, [r7, #31]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d105      	bne.n	80030ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e0:	4ba5      	ldr	r3, [pc, #660]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 80030e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e4:	4aa4      	ldr	r2, [pc, #656]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 80030e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0320 	and.w	r3, r3, #32
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d03c      	beq.n	8003172 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d01c      	beq.n	800313a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003100:	4b9d      	ldr	r3, [pc, #628]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 8003102:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003106:	4a9c      	ldr	r2, [pc, #624]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 8003108:	f043 0301 	orr.w	r3, r3, #1
 800310c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003110:	f7fe f9ec 	bl	80014ec <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003118:	f7fe f9e8 	bl	80014ec <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e12b      	b.n	8003382 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800312a:	4b93      	ldr	r3, [pc, #588]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 800312c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d0ef      	beq.n	8003118 <HAL_RCC_OscConfig+0x5cc>
 8003138:	e01b      	b.n	8003172 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800313a:	4b8f      	ldr	r3, [pc, #572]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 800313c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003140:	4a8d      	ldr	r2, [pc, #564]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 8003142:	f023 0301 	bic.w	r3, r3, #1
 8003146:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314a:	f7fe f9cf 	bl	80014ec <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003150:	e008      	b.n	8003164 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003152:	f7fe f9cb 	bl	80014ec <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e10e      	b.n	8003382 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003164:	4b84      	ldr	r3, [pc, #528]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 8003166:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1ef      	bne.n	8003152 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003176:	2b00      	cmp	r3, #0
 8003178:	f000 8102 	beq.w	8003380 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003180:	2b02      	cmp	r3, #2
 8003182:	f040 80c5 	bne.w	8003310 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003186:	4b7c      	ldr	r3, [pc, #496]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f003 0203 	and.w	r2, r3, #3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003196:	429a      	cmp	r2, r3
 8003198:	d12c      	bne.n	80031f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a4:	3b01      	subs	r3, #1
 80031a6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d123      	bne.n	80031f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d11b      	bne.n	80031f4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d113      	bne.n	80031f4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d6:	085b      	lsrs	r3, r3, #1
 80031d8:	3b01      	subs	r3, #1
 80031da:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031dc:	429a      	cmp	r2, r3
 80031de:	d109      	bne.n	80031f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	085b      	lsrs	r3, r3, #1
 80031ec:	3b01      	subs	r3, #1
 80031ee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d067      	beq.n	80032c4 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	2b0c      	cmp	r3, #12
 80031f8:	d062      	beq.n	80032c0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80031fa:	4b5f      	ldr	r3, [pc, #380]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e0bb      	b.n	8003382 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800320a:	4b5b      	ldr	r3, [pc, #364]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a5a      	ldr	r2, [pc, #360]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 8003210:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003214:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003216:	f7fe f969 	bl	80014ec <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800321c:	e008      	b.n	8003230 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800321e:	f7fe f965 	bl	80014ec <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e0a8      	b.n	8003382 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003230:	4b51      	ldr	r3, [pc, #324]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1f0      	bne.n	800321e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800323c:	4b4e      	ldr	r3, [pc, #312]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 800323e:	68da      	ldr	r2, [r3, #12]
 8003240:	4b4e      	ldr	r3, [pc, #312]	; (800337c <HAL_RCC_OscConfig+0x830>)
 8003242:	4013      	ands	r3, r2
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800324c:	3a01      	subs	r2, #1
 800324e:	0112      	lsls	r2, r2, #4
 8003250:	4311      	orrs	r1, r2
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003256:	0212      	lsls	r2, r2, #8
 8003258:	4311      	orrs	r1, r2
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800325e:	0852      	lsrs	r2, r2, #1
 8003260:	3a01      	subs	r2, #1
 8003262:	0552      	lsls	r2, r2, #21
 8003264:	4311      	orrs	r1, r2
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800326a:	0852      	lsrs	r2, r2, #1
 800326c:	3a01      	subs	r2, #1
 800326e:	0652      	lsls	r2, r2, #25
 8003270:	4311      	orrs	r1, r2
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003276:	06d2      	lsls	r2, r2, #27
 8003278:	430a      	orrs	r2, r1
 800327a:	493f      	ldr	r1, [pc, #252]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 800327c:	4313      	orrs	r3, r2
 800327e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003280:	4b3d      	ldr	r3, [pc, #244]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a3c      	ldr	r2, [pc, #240]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 8003286:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800328a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800328c:	4b3a      	ldr	r3, [pc, #232]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	4a39      	ldr	r2, [pc, #228]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 8003292:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003296:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003298:	f7fe f928 	bl	80014ec <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032a0:	f7fe f924 	bl	80014ec <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e067      	b.n	8003382 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032b2:	4b31      	ldr	r3, [pc, #196]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f0      	beq.n	80032a0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032be:	e05f      	b.n	8003380 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e05e      	b.n	8003382 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032c4:	4b2c      	ldr	r3, [pc, #176]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d157      	bne.n	8003380 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80032d0:	4b29      	ldr	r3, [pc, #164]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a28      	ldr	r2, [pc, #160]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 80032d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032dc:	4b26      	ldr	r3, [pc, #152]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	4a25      	ldr	r2, [pc, #148]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 80032e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032e8:	f7fe f900 	bl	80014ec <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f0:	f7fe f8fc 	bl	80014ec <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e03f      	b.n	8003382 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003302:	4b1d      	ldr	r3, [pc, #116]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d0f0      	beq.n	80032f0 <HAL_RCC_OscConfig+0x7a4>
 800330e:	e037      	b.n	8003380 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	2b0c      	cmp	r3, #12
 8003314:	d02d      	beq.n	8003372 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003316:	4b18      	ldr	r3, [pc, #96]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a17      	ldr	r2, [pc, #92]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 800331c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003320:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003322:	4b15      	ldr	r3, [pc, #84]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d105      	bne.n	800333a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800332e:	4b12      	ldr	r3, [pc, #72]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	4a11      	ldr	r2, [pc, #68]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 8003334:	f023 0303 	bic.w	r3, r3, #3
 8003338:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800333a:	4b0f      	ldr	r3, [pc, #60]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	4a0e      	ldr	r2, [pc, #56]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 8003340:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003344:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003348:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334a:	f7fe f8cf 	bl	80014ec <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003352:	f7fe f8cb 	bl	80014ec <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e00e      	b.n	8003382 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003364:	4b04      	ldr	r3, [pc, #16]	; (8003378 <HAL_RCC_OscConfig+0x82c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1f0      	bne.n	8003352 <HAL_RCC_OscConfig+0x806>
 8003370:	e006      	b.n	8003380 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e005      	b.n	8003382 <HAL_RCC_OscConfig+0x836>
 8003376:	bf00      	nop
 8003378:	40021000 	.word	0x40021000
 800337c:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3720      	adds	r7, #32
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop

0800338c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e0c8      	b.n	8003532 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033a0:	4b66      	ldr	r3, [pc, #408]	; (800353c <HAL_RCC_ClockConfig+0x1b0>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d910      	bls.n	80033d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ae:	4b63      	ldr	r3, [pc, #396]	; (800353c <HAL_RCC_ClockConfig+0x1b0>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f023 0207 	bic.w	r2, r3, #7
 80033b6:	4961      	ldr	r1, [pc, #388]	; (800353c <HAL_RCC_ClockConfig+0x1b0>)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033be:	4b5f      	ldr	r3, [pc, #380]	; (800353c <HAL_RCC_ClockConfig+0x1b0>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d001      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e0b0      	b.n	8003532 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d04c      	beq.n	8003476 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b03      	cmp	r3, #3
 80033e2:	d107      	bne.n	80033f4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033e4:	4b56      	ldr	r3, [pc, #344]	; (8003540 <HAL_RCC_ClockConfig+0x1b4>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d121      	bne.n	8003434 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e09e      	b.n	8003532 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d107      	bne.n	800340c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033fc:	4b50      	ldr	r3, [pc, #320]	; (8003540 <HAL_RCC_ClockConfig+0x1b4>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d115      	bne.n	8003434 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e092      	b.n	8003532 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d107      	bne.n	8003424 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003414:	4b4a      	ldr	r3, [pc, #296]	; (8003540 <HAL_RCC_ClockConfig+0x1b4>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d109      	bne.n	8003434 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e086      	b.n	8003532 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003424:	4b46      	ldr	r3, [pc, #280]	; (8003540 <HAL_RCC_ClockConfig+0x1b4>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e07e      	b.n	8003532 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003434:	4b42      	ldr	r3, [pc, #264]	; (8003540 <HAL_RCC_ClockConfig+0x1b4>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f023 0203 	bic.w	r2, r3, #3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	493f      	ldr	r1, [pc, #252]	; (8003540 <HAL_RCC_ClockConfig+0x1b4>)
 8003442:	4313      	orrs	r3, r2
 8003444:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003446:	f7fe f851 	bl	80014ec <HAL_GetTick>
 800344a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344c:	e00a      	b.n	8003464 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800344e:	f7fe f84d 	bl	80014ec <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	f241 3288 	movw	r2, #5000	; 0x1388
 800345c:	4293      	cmp	r3, r2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e066      	b.n	8003532 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003464:	4b36      	ldr	r3, [pc, #216]	; (8003540 <HAL_RCC_ClockConfig+0x1b4>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f003 020c 	and.w	r2, r3, #12
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	429a      	cmp	r2, r3
 8003474:	d1eb      	bne.n	800344e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d008      	beq.n	8003494 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003482:	4b2f      	ldr	r3, [pc, #188]	; (8003540 <HAL_RCC_ClockConfig+0x1b4>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	492c      	ldr	r1, [pc, #176]	; (8003540 <HAL_RCC_ClockConfig+0x1b4>)
 8003490:	4313      	orrs	r3, r2
 8003492:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003494:	4b29      	ldr	r3, [pc, #164]	; (800353c <HAL_RCC_ClockConfig+0x1b0>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d210      	bcs.n	80034c4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034a2:	4b26      	ldr	r3, [pc, #152]	; (800353c <HAL_RCC_ClockConfig+0x1b0>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f023 0207 	bic.w	r2, r3, #7
 80034aa:	4924      	ldr	r1, [pc, #144]	; (800353c <HAL_RCC_ClockConfig+0x1b0>)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034b2:	4b22      	ldr	r3, [pc, #136]	; (800353c <HAL_RCC_ClockConfig+0x1b0>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d001      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e036      	b.n	8003532 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d008      	beq.n	80034e2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034d0:	4b1b      	ldr	r3, [pc, #108]	; (8003540 <HAL_RCC_ClockConfig+0x1b4>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	4918      	ldr	r1, [pc, #96]	; (8003540 <HAL_RCC_ClockConfig+0x1b4>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0308 	and.w	r3, r3, #8
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d009      	beq.n	8003502 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034ee:	4b14      	ldr	r3, [pc, #80]	; (8003540 <HAL_RCC_ClockConfig+0x1b4>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	4910      	ldr	r1, [pc, #64]	; (8003540 <HAL_RCC_ClockConfig+0x1b4>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003502:	f000 f825 	bl	8003550 <HAL_RCC_GetSysClockFreq>
 8003506:	4602      	mov	r2, r0
 8003508:	4b0d      	ldr	r3, [pc, #52]	; (8003540 <HAL_RCC_ClockConfig+0x1b4>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	091b      	lsrs	r3, r3, #4
 800350e:	f003 030f 	and.w	r3, r3, #15
 8003512:	490c      	ldr	r1, [pc, #48]	; (8003544 <HAL_RCC_ClockConfig+0x1b8>)
 8003514:	5ccb      	ldrb	r3, [r1, r3]
 8003516:	f003 031f 	and.w	r3, r3, #31
 800351a:	fa22 f303 	lsr.w	r3, r2, r3
 800351e:	4a0a      	ldr	r2, [pc, #40]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 8003520:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003522:	4b0a      	ldr	r3, [pc, #40]	; (800354c <HAL_RCC_ClockConfig+0x1c0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f7fd ff90 	bl	800144c <HAL_InitTick>
 800352c:	4603      	mov	r3, r0
 800352e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003530:	7afb      	ldrb	r3, [r7, #11]
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40022000 	.word	0x40022000
 8003540:	40021000 	.word	0x40021000
 8003544:	080054d0 	.word	0x080054d0
 8003548:	20000000 	.word	0x20000000
 800354c:	20000004 	.word	0x20000004

08003550 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003550:	b480      	push	{r7}
 8003552:	b089      	sub	sp, #36	; 0x24
 8003554:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003556:	2300      	movs	r3, #0
 8003558:	61fb      	str	r3, [r7, #28]
 800355a:	2300      	movs	r3, #0
 800355c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800355e:	4b3e      	ldr	r3, [pc, #248]	; (8003658 <HAL_RCC_GetSysClockFreq+0x108>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 030c 	and.w	r3, r3, #12
 8003566:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003568:	4b3b      	ldr	r3, [pc, #236]	; (8003658 <HAL_RCC_GetSysClockFreq+0x108>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	f003 0303 	and.w	r3, r3, #3
 8003570:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d005      	beq.n	8003584 <HAL_RCC_GetSysClockFreq+0x34>
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	2b0c      	cmp	r3, #12
 800357c:	d121      	bne.n	80035c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d11e      	bne.n	80035c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003584:	4b34      	ldr	r3, [pc, #208]	; (8003658 <HAL_RCC_GetSysClockFreq+0x108>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0308 	and.w	r3, r3, #8
 800358c:	2b00      	cmp	r3, #0
 800358e:	d107      	bne.n	80035a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003590:	4b31      	ldr	r3, [pc, #196]	; (8003658 <HAL_RCC_GetSysClockFreq+0x108>)
 8003592:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003596:	0a1b      	lsrs	r3, r3, #8
 8003598:	f003 030f 	and.w	r3, r3, #15
 800359c:	61fb      	str	r3, [r7, #28]
 800359e:	e005      	b.n	80035ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80035a0:	4b2d      	ldr	r3, [pc, #180]	; (8003658 <HAL_RCC_GetSysClockFreq+0x108>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	091b      	lsrs	r3, r3, #4
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80035ac:	4a2b      	ldr	r2, [pc, #172]	; (800365c <HAL_RCC_GetSysClockFreq+0x10c>)
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10d      	bne.n	80035d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035c0:	e00a      	b.n	80035d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d102      	bne.n	80035ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035c8:	4b25      	ldr	r3, [pc, #148]	; (8003660 <HAL_RCC_GetSysClockFreq+0x110>)
 80035ca:	61bb      	str	r3, [r7, #24]
 80035cc:	e004      	b.n	80035d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d101      	bne.n	80035d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035d4:	4b23      	ldr	r3, [pc, #140]	; (8003664 <HAL_RCC_GetSysClockFreq+0x114>)
 80035d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	2b0c      	cmp	r3, #12
 80035dc:	d134      	bne.n	8003648 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035de:	4b1e      	ldr	r3, [pc, #120]	; (8003658 <HAL_RCC_GetSysClockFreq+0x108>)
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d003      	beq.n	80035f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	2b03      	cmp	r3, #3
 80035f2:	d003      	beq.n	80035fc <HAL_RCC_GetSysClockFreq+0xac>
 80035f4:	e005      	b.n	8003602 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80035f6:	4b1a      	ldr	r3, [pc, #104]	; (8003660 <HAL_RCC_GetSysClockFreq+0x110>)
 80035f8:	617b      	str	r3, [r7, #20]
      break;
 80035fa:	e005      	b.n	8003608 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80035fc:	4b19      	ldr	r3, [pc, #100]	; (8003664 <HAL_RCC_GetSysClockFreq+0x114>)
 80035fe:	617b      	str	r3, [r7, #20]
      break;
 8003600:	e002      	b.n	8003608 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	617b      	str	r3, [r7, #20]
      break;
 8003606:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003608:	4b13      	ldr	r3, [pc, #76]	; (8003658 <HAL_RCC_GetSysClockFreq+0x108>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	091b      	lsrs	r3, r3, #4
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	3301      	adds	r3, #1
 8003614:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003616:	4b10      	ldr	r3, [pc, #64]	; (8003658 <HAL_RCC_GetSysClockFreq+0x108>)
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	0a1b      	lsrs	r3, r3, #8
 800361c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	fb02 f203 	mul.w	r2, r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	fbb2 f3f3 	udiv	r3, r2, r3
 800362c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800362e:	4b0a      	ldr	r3, [pc, #40]	; (8003658 <HAL_RCC_GetSysClockFreq+0x108>)
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	0e5b      	lsrs	r3, r3, #25
 8003634:	f003 0303 	and.w	r3, r3, #3
 8003638:	3301      	adds	r3, #1
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	fbb2 f3f3 	udiv	r3, r2, r3
 8003646:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003648:	69bb      	ldr	r3, [r7, #24]
}
 800364a:	4618      	mov	r0, r3
 800364c:	3724      	adds	r7, #36	; 0x24
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	40021000 	.word	0x40021000
 800365c:	080054e8 	.word	0x080054e8
 8003660:	00f42400 	.word	0x00f42400
 8003664:	007a1200 	.word	0x007a1200

08003668 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800366c:	4b03      	ldr	r3, [pc, #12]	; (800367c <HAL_RCC_GetHCLKFreq+0x14>)
 800366e:	681b      	ldr	r3, [r3, #0]
}
 8003670:	4618      	mov	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	20000000 	.word	0x20000000

08003680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003684:	f7ff fff0 	bl	8003668 <HAL_RCC_GetHCLKFreq>
 8003688:	4602      	mov	r2, r0
 800368a:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	0a1b      	lsrs	r3, r3, #8
 8003690:	f003 0307 	and.w	r3, r3, #7
 8003694:	4904      	ldr	r1, [pc, #16]	; (80036a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003696:	5ccb      	ldrb	r3, [r1, r3]
 8003698:	f003 031f 	and.w	r3, r3, #31
 800369c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40021000 	.word	0x40021000
 80036a8:	080054e0 	.word	0x080054e0

080036ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80036b0:	f7ff ffda 	bl	8003668 <HAL_RCC_GetHCLKFreq>
 80036b4:	4602      	mov	r2, r0
 80036b6:	4b06      	ldr	r3, [pc, #24]	; (80036d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	0adb      	lsrs	r3, r3, #11
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	4904      	ldr	r1, [pc, #16]	; (80036d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036c2:	5ccb      	ldrb	r3, [r1, r3]
 80036c4:	f003 031f 	and.w	r3, r3, #31
 80036c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40021000 	.word	0x40021000
 80036d4:	080054e0 	.word	0x080054e0

080036d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80036e0:	2300      	movs	r3, #0
 80036e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80036e4:	4b2a      	ldr	r3, [pc, #168]	; (8003790 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d003      	beq.n	80036f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80036f0:	f7ff f9c8 	bl	8002a84 <HAL_PWREx_GetVoltageRange>
 80036f4:	6178      	str	r0, [r7, #20]
 80036f6:	e014      	b.n	8003722 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80036f8:	4b25      	ldr	r3, [pc, #148]	; (8003790 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fc:	4a24      	ldr	r2, [pc, #144]	; (8003790 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003702:	6593      	str	r3, [r2, #88]	; 0x58
 8003704:	4b22      	ldr	r3, [pc, #136]	; (8003790 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370c:	60fb      	str	r3, [r7, #12]
 800370e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003710:	f7ff f9b8 	bl	8002a84 <HAL_PWREx_GetVoltageRange>
 8003714:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003716:	4b1e      	ldr	r3, [pc, #120]	; (8003790 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371a:	4a1d      	ldr	r2, [pc, #116]	; (8003790 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800371c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003720:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003728:	d10b      	bne.n	8003742 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b80      	cmp	r3, #128	; 0x80
 800372e:	d919      	bls.n	8003764 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2ba0      	cmp	r3, #160	; 0xa0
 8003734:	d902      	bls.n	800373c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003736:	2302      	movs	r3, #2
 8003738:	613b      	str	r3, [r7, #16]
 800373a:	e013      	b.n	8003764 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800373c:	2301      	movs	r3, #1
 800373e:	613b      	str	r3, [r7, #16]
 8003740:	e010      	b.n	8003764 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b80      	cmp	r3, #128	; 0x80
 8003746:	d902      	bls.n	800374e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003748:	2303      	movs	r3, #3
 800374a:	613b      	str	r3, [r7, #16]
 800374c:	e00a      	b.n	8003764 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b80      	cmp	r3, #128	; 0x80
 8003752:	d102      	bne.n	800375a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003754:	2302      	movs	r3, #2
 8003756:	613b      	str	r3, [r7, #16]
 8003758:	e004      	b.n	8003764 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b70      	cmp	r3, #112	; 0x70
 800375e:	d101      	bne.n	8003764 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003760:	2301      	movs	r3, #1
 8003762:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003764:	4b0b      	ldr	r3, [pc, #44]	; (8003794 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f023 0207 	bic.w	r2, r3, #7
 800376c:	4909      	ldr	r1, [pc, #36]	; (8003794 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	4313      	orrs	r3, r2
 8003772:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003774:	4b07      	ldr	r3, [pc, #28]	; (8003794 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0307 	and.w	r3, r3, #7
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	429a      	cmp	r2, r3
 8003780:	d001      	beq.n	8003786 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e000      	b.n	8003788 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3718      	adds	r7, #24
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40021000 	.word	0x40021000
 8003794:	40022000 	.word	0x40022000

08003798 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037a0:	2300      	movs	r3, #0
 80037a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037a4:	2300      	movs	r3, #0
 80037a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d031      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037bc:	d01a      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80037be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037c2:	d814      	bhi.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x56>
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d009      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80037c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037cc:	d10f      	bne.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80037ce:	4bac      	ldr	r3, [pc, #688]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	4aab      	ldr	r2, [pc, #684]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037da:	e00c      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3304      	adds	r3, #4
 80037e0:	2100      	movs	r1, #0
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 f9dc 	bl	8003ba0 <RCCEx_PLLSAI1_Config>
 80037e8:	4603      	mov	r3, r0
 80037ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037ec:	e003      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	74fb      	strb	r3, [r7, #19]
      break;
 80037f2:	e000      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80037f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037f6:	7cfb      	ldrb	r3, [r7, #19]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10b      	bne.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037fc:	4ba0      	ldr	r3, [pc, #640]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003802:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380a:	499d      	ldr	r1, [pc, #628]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800380c:	4313      	orrs	r3, r2
 800380e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003812:	e001      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003814:	7cfb      	ldrb	r3, [r7, #19]
 8003816:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 8099 	beq.w	8003958 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003826:	2300      	movs	r3, #0
 8003828:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800382a:	4b95      	ldr	r3, [pc, #596]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800382c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003836:	2301      	movs	r3, #1
 8003838:	e000      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800383a:	2300      	movs	r3, #0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00d      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003840:	4b8f      	ldr	r3, [pc, #572]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003844:	4a8e      	ldr	r2, [pc, #568]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800384a:	6593      	str	r3, [r2, #88]	; 0x58
 800384c:	4b8c      	ldr	r3, [pc, #560]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800384e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003854:	60bb      	str	r3, [r7, #8]
 8003856:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003858:	2301      	movs	r3, #1
 800385a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800385c:	4b89      	ldr	r3, [pc, #548]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a88      	ldr	r2, [pc, #544]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003866:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003868:	f7fd fe40 	bl	80014ec <HAL_GetTick>
 800386c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800386e:	e009      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003870:	f7fd fe3c 	bl	80014ec <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d902      	bls.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	74fb      	strb	r3, [r7, #19]
        break;
 8003882:	e005      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003884:	4b7f      	ldr	r3, [pc, #508]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0ef      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003890:	7cfb      	ldrb	r3, [r7, #19]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d155      	bne.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003896:	4b7a      	ldr	r3, [pc, #488]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d01e      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d019      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038b2:	4b73      	ldr	r3, [pc, #460]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038bc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038be:	4b70      	ldr	r3, [pc, #448]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c4:	4a6e      	ldr	r2, [pc, #440]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038ce:	4b6c      	ldr	r3, [pc, #432]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d4:	4a6a      	ldr	r2, [pc, #424]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038de:	4a68      	ldr	r2, [pc, #416]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d016      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f0:	f7fd fdfc 	bl	80014ec <HAL_GetTick>
 80038f4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038f6:	e00b      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038f8:	f7fd fdf8 	bl	80014ec <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	f241 3288 	movw	r2, #5000	; 0x1388
 8003906:	4293      	cmp	r3, r2
 8003908:	d902      	bls.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	74fb      	strb	r3, [r7, #19]
            break;
 800390e:	e006      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003910:	4b5b      	ldr	r3, [pc, #364]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0ec      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800391e:	7cfb      	ldrb	r3, [r7, #19]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10b      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003924:	4b56      	ldr	r3, [pc, #344]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003932:	4953      	ldr	r1, [pc, #332]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003934:	4313      	orrs	r3, r2
 8003936:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800393a:	e004      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800393c:	7cfb      	ldrb	r3, [r7, #19]
 800393e:	74bb      	strb	r3, [r7, #18]
 8003940:	e001      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003942:	7cfb      	ldrb	r3, [r7, #19]
 8003944:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003946:	7c7b      	ldrb	r3, [r7, #17]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d105      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800394c:	4b4c      	ldr	r3, [pc, #304]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800394e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003950:	4a4b      	ldr	r2, [pc, #300]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003952:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003956:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00a      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003964:	4b46      	ldr	r3, [pc, #280]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396a:	f023 0203 	bic.w	r2, r3, #3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	4943      	ldr	r1, [pc, #268]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003986:	4b3e      	ldr	r3, [pc, #248]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398c:	f023 020c 	bic.w	r2, r3, #12
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	493a      	ldr	r1, [pc, #232]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003996:	4313      	orrs	r3, r2
 8003998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0320 	and.w	r3, r3, #32
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00a      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039a8:	4b35      	ldr	r3, [pc, #212]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80039aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b6:	4932      	ldr	r1, [pc, #200]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00a      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039ca:	4b2d      	ldr	r3, [pc, #180]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80039cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d8:	4929      	ldr	r1, [pc, #164]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00a      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039ec:	4b24      	ldr	r3, [pc, #144]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80039ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fa:	4921      	ldr	r1, [pc, #132]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00a      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a0e:	4b1c      	ldr	r3, [pc, #112]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a14:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1c:	4918      	ldr	r1, [pc, #96]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00a      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a30:	4b13      	ldr	r3, [pc, #76]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a36:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3e:	4910      	ldr	r1, [pc, #64]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d02c      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a52:	4b0b      	ldr	r3, [pc, #44]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a58:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a60:	4907      	ldr	r1, [pc, #28]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a70:	d10a      	bne.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a72:	4b03      	ldr	r3, [pc, #12]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	4a02      	ldr	r2, [pc, #8]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a7c:	60d3      	str	r3, [r2, #12]
 8003a7e:	e015      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003a80:	40021000 	.word	0x40021000
 8003a84:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a90:	d10c      	bne.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	3304      	adds	r3, #4
 8003a96:	2101      	movs	r1, #1
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 f881 	bl	8003ba0 <RCCEx_PLLSAI1_Config>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003aa2:	7cfb      	ldrb	r3, [r7, #19]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8003aa8:	7cfb      	ldrb	r3, [r7, #19]
 8003aaa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d028      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ab8:	4b30      	ldr	r3, [pc, #192]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003abe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac6:	492d      	ldr	r1, [pc, #180]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ad6:	d106      	bne.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ad8:	4b28      	ldr	r3, [pc, #160]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	4a27      	ldr	r2, [pc, #156]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ade:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ae2:	60d3      	str	r3, [r2, #12]
 8003ae4:	e011      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003aee:	d10c      	bne.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	3304      	adds	r3, #4
 8003af4:	2101      	movs	r1, #1
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 f852 	bl	8003ba0 <RCCEx_PLLSAI1_Config>
 8003afc:	4603      	mov	r3, r0
 8003afe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b00:	7cfb      	ldrb	r3, [r7, #19]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8003b06:	7cfb      	ldrb	r3, [r7, #19]
 8003b08:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d01c      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b16:	4b19      	ldr	r3, [pc, #100]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b24:	4915      	ldr	r1, [pc, #84]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b34:	d10c      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	3304      	adds	r3, #4
 8003b3a:	2102      	movs	r1, #2
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 f82f 	bl	8003ba0 <RCCEx_PLLSAI1_Config>
 8003b42:	4603      	mov	r3, r0
 8003b44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b46:	7cfb      	ldrb	r3, [r7, #19]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d001      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003b4c:	7cfb      	ldrb	r3, [r7, #19]
 8003b4e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00a      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b5c:	4b07      	ldr	r3, [pc, #28]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b62:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b6a:	4904      	ldr	r1, [pc, #16]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b72:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3718      	adds	r7, #24
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40021000 	.word	0x40021000

08003b80 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003b84:	4b05      	ldr	r3, [pc, #20]	; (8003b9c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a04      	ldr	r2, [pc, #16]	; (8003b9c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003b8a:	f043 0304 	orr.w	r3, r3, #4
 8003b8e:	6013      	str	r3, [r2, #0]
}
 8003b90:	bf00      	nop
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	40021000 	.word	0x40021000

08003ba0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003baa:	2300      	movs	r3, #0
 8003bac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bae:	4b74      	ldr	r3, [pc, #464]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	f003 0303 	and.w	r3, r3, #3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d018      	beq.n	8003bec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003bba:	4b71      	ldr	r3, [pc, #452]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	f003 0203 	and.w	r2, r3, #3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d10d      	bne.n	8003be6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
       ||
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d009      	beq.n	8003be6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003bd2:	4b6b      	ldr	r3, [pc, #428]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	091b      	lsrs	r3, r3, #4
 8003bd8:	f003 0307 	and.w	r3, r3, #7
 8003bdc:	1c5a      	adds	r2, r3, #1
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
       ||
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d047      	beq.n	8003c76 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	73fb      	strb	r3, [r7, #15]
 8003bea:	e044      	b.n	8003c76 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2b03      	cmp	r3, #3
 8003bf2:	d018      	beq.n	8003c26 <RCCEx_PLLSAI1_Config+0x86>
 8003bf4:	2b03      	cmp	r3, #3
 8003bf6:	d825      	bhi.n	8003c44 <RCCEx_PLLSAI1_Config+0xa4>
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d002      	beq.n	8003c02 <RCCEx_PLLSAI1_Config+0x62>
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d009      	beq.n	8003c14 <RCCEx_PLLSAI1_Config+0x74>
 8003c00:	e020      	b.n	8003c44 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c02:	4b5f      	ldr	r3, [pc, #380]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d11d      	bne.n	8003c4a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c12:	e01a      	b.n	8003c4a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c14:	4b5a      	ldr	r3, [pc, #360]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d116      	bne.n	8003c4e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c24:	e013      	b.n	8003c4e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c26:	4b56      	ldr	r3, [pc, #344]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10f      	bne.n	8003c52 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c32:	4b53      	ldr	r3, [pc, #332]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d109      	bne.n	8003c52 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c42:	e006      	b.n	8003c52 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	73fb      	strb	r3, [r7, #15]
      break;
 8003c48:	e004      	b.n	8003c54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c4a:	bf00      	nop
 8003c4c:	e002      	b.n	8003c54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c4e:	bf00      	nop
 8003c50:	e000      	b.n	8003c54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c52:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10d      	bne.n	8003c76 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c5a:	4b49      	ldr	r3, [pc, #292]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6819      	ldr	r1, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	011b      	lsls	r3, r3, #4
 8003c6e:	430b      	orrs	r3, r1
 8003c70:	4943      	ldr	r1, [pc, #268]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c76:	7bfb      	ldrb	r3, [r7, #15]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d17c      	bne.n	8003d76 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c7c:	4b40      	ldr	r3, [pc, #256]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a3f      	ldr	r2, [pc, #252]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c88:	f7fd fc30 	bl	80014ec <HAL_GetTick>
 8003c8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c8e:	e009      	b.n	8003ca4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c90:	f7fd fc2c 	bl	80014ec <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d902      	bls.n	8003ca4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	73fb      	strb	r3, [r7, #15]
        break;
 8003ca2:	e005      	b.n	8003cb0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ca4:	4b36      	ldr	r3, [pc, #216]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1ef      	bne.n	8003c90 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003cb0:	7bfb      	ldrb	r3, [r7, #15]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d15f      	bne.n	8003d76 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d110      	bne.n	8003cde <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cbc:	4b30      	ldr	r3, [pc, #192]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003cc4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6892      	ldr	r2, [r2, #8]
 8003ccc:	0211      	lsls	r1, r2, #8
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	68d2      	ldr	r2, [r2, #12]
 8003cd2:	06d2      	lsls	r2, r2, #27
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	492a      	ldr	r1, [pc, #168]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	610b      	str	r3, [r1, #16]
 8003cdc:	e027      	b.n	8003d2e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d112      	bne.n	8003d0a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ce4:	4b26      	ldr	r3, [pc, #152]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003cec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6892      	ldr	r2, [r2, #8]
 8003cf4:	0211      	lsls	r1, r2, #8
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6912      	ldr	r2, [r2, #16]
 8003cfa:	0852      	lsrs	r2, r2, #1
 8003cfc:	3a01      	subs	r2, #1
 8003cfe:	0552      	lsls	r2, r2, #21
 8003d00:	430a      	orrs	r2, r1
 8003d02:	491f      	ldr	r1, [pc, #124]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	610b      	str	r3, [r1, #16]
 8003d08:	e011      	b.n	8003d2e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d0a:	4b1d      	ldr	r3, [pc, #116]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d12:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6892      	ldr	r2, [r2, #8]
 8003d1a:	0211      	lsls	r1, r2, #8
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6952      	ldr	r2, [r2, #20]
 8003d20:	0852      	lsrs	r2, r2, #1
 8003d22:	3a01      	subs	r2, #1
 8003d24:	0652      	lsls	r2, r2, #25
 8003d26:	430a      	orrs	r2, r1
 8003d28:	4915      	ldr	r1, [pc, #84]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d2e:	4b14      	ldr	r3, [pc, #80]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a13      	ldr	r2, [pc, #76]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d38:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d3a:	f7fd fbd7 	bl	80014ec <HAL_GetTick>
 8003d3e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d40:	e009      	b.n	8003d56 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d42:	f7fd fbd3 	bl	80014ec <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d902      	bls.n	8003d56 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	73fb      	strb	r3, [r7, #15]
          break;
 8003d54:	e005      	b.n	8003d62 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d56:	4b0a      	ldr	r3, [pc, #40]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d0ef      	beq.n	8003d42 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003d62:	7bfb      	ldrb	r3, [r7, #15]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d106      	bne.n	8003d76 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d68:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d6a:	691a      	ldr	r2, [r3, #16]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	4903      	ldr	r1, [pc, #12]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3710      	adds	r7, #16
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	40021000 	.word	0x40021000

08003d84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e049      	b.n	8003e2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d106      	bne.n	8003db0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7fd fa30 	bl	8001210 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2202      	movs	r2, #2
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	4610      	mov	r0, r2
 8003dc4:	f000 fa6c 	bl	80042a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b082      	sub	sp, #8
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e049      	b.n	8003ed8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d106      	bne.n	8003e5e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 f841 	bl	8003ee0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2202      	movs	r2, #2
 8003e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	3304      	adds	r3, #4
 8003e6e:	4619      	mov	r1, r3
 8003e70:	4610      	mov	r0, r2
 8003e72:	f000 fa15 	bl	80042a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3708      	adds	r7, #8
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d101      	bne.n	8003f0e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	e0fd      	b.n	800410a <HAL_TIM_PWM_ConfigChannel+0x216>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b14      	cmp	r3, #20
 8003f1a:	f200 80f0 	bhi.w	80040fe <HAL_TIM_PWM_ConfigChannel+0x20a>
 8003f1e:	a201      	add	r2, pc, #4	; (adr r2, 8003f24 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f24:	08003f79 	.word	0x08003f79
 8003f28:	080040ff 	.word	0x080040ff
 8003f2c:	080040ff 	.word	0x080040ff
 8003f30:	080040ff 	.word	0x080040ff
 8003f34:	08003fb9 	.word	0x08003fb9
 8003f38:	080040ff 	.word	0x080040ff
 8003f3c:	080040ff 	.word	0x080040ff
 8003f40:	080040ff 	.word	0x080040ff
 8003f44:	08003ffb 	.word	0x08003ffb
 8003f48:	080040ff 	.word	0x080040ff
 8003f4c:	080040ff 	.word	0x080040ff
 8003f50:	080040ff 	.word	0x080040ff
 8003f54:	0800403b 	.word	0x0800403b
 8003f58:	080040ff 	.word	0x080040ff
 8003f5c:	080040ff 	.word	0x080040ff
 8003f60:	080040ff 	.word	0x080040ff
 8003f64:	0800407d 	.word	0x0800407d
 8003f68:	080040ff 	.word	0x080040ff
 8003f6c:	080040ff 	.word	0x080040ff
 8003f70:	080040ff 	.word	0x080040ff
 8003f74:	080040bd 	.word	0x080040bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68b9      	ldr	r1, [r7, #8]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 f9f2 	bl	8004368 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	699a      	ldr	r2, [r3, #24]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f042 0208 	orr.w	r2, r2, #8
 8003f92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	699a      	ldr	r2, [r3, #24]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 0204 	bic.w	r2, r2, #4
 8003fa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6999      	ldr	r1, [r3, #24]
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	691a      	ldr	r2, [r3, #16]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	619a      	str	r2, [r3, #24]
      break;
 8003fb6:	e0a3      	b.n	8004100 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68b9      	ldr	r1, [r7, #8]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 fa4e 	bl	8004460 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	699a      	ldr	r2, [r3, #24]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	699a      	ldr	r2, [r3, #24]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fe2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6999      	ldr	r1, [r3, #24]
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	021a      	lsls	r2, r3, #8
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	619a      	str	r2, [r3, #24]
      break;
 8003ff8:	e082      	b.n	8004100 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68b9      	ldr	r1, [r7, #8]
 8004000:	4618      	mov	r0, r3
 8004002:	f000 faa7 	bl	8004554 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	69da      	ldr	r2, [r3, #28]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f042 0208 	orr.w	r2, r2, #8
 8004014:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	69da      	ldr	r2, [r3, #28]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0204 	bic.w	r2, r2, #4
 8004024:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	69d9      	ldr	r1, [r3, #28]
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	691a      	ldr	r2, [r3, #16]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	430a      	orrs	r2, r1
 8004036:	61da      	str	r2, [r3, #28]
      break;
 8004038:	e062      	b.n	8004100 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68b9      	ldr	r1, [r7, #8]
 8004040:	4618      	mov	r0, r3
 8004042:	f000 faff 	bl	8004644 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	69da      	ldr	r2, [r3, #28]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004054:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	69da      	ldr	r2, [r3, #28]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004064:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	69d9      	ldr	r1, [r3, #28]
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	021a      	lsls	r2, r3, #8
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	430a      	orrs	r2, r1
 8004078:	61da      	str	r2, [r3, #28]
      break;
 800407a:	e041      	b.n	8004100 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68b9      	ldr	r1, [r7, #8]
 8004082:	4618      	mov	r0, r3
 8004084:	f000 fb3c 	bl	8004700 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0208 	orr.w	r2, r2, #8
 8004096:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0204 	bic.w	r2, r2, #4
 80040a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	691a      	ldr	r2, [r3, #16]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80040ba:	e021      	b.n	8004100 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68b9      	ldr	r1, [r7, #8]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 fb74 	bl	80047b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	021a      	lsls	r2, r3, #8
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80040fc:	e000      	b.n	8004100 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80040fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop

08004114 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004124:	2b01      	cmp	r3, #1
 8004126:	d101      	bne.n	800412c <HAL_TIM_ConfigClockSource+0x18>
 8004128:	2302      	movs	r3, #2
 800412a:	e0b5      	b.n	8004298 <HAL_TIM_ConfigClockSource+0x184>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800414a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800414e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004156:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004168:	d03e      	beq.n	80041e8 <HAL_TIM_ConfigClockSource+0xd4>
 800416a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800416e:	f200 8087 	bhi.w	8004280 <HAL_TIM_ConfigClockSource+0x16c>
 8004172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004176:	f000 8085 	beq.w	8004284 <HAL_TIM_ConfigClockSource+0x170>
 800417a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800417e:	d87f      	bhi.n	8004280 <HAL_TIM_ConfigClockSource+0x16c>
 8004180:	2b70      	cmp	r3, #112	; 0x70
 8004182:	d01a      	beq.n	80041ba <HAL_TIM_ConfigClockSource+0xa6>
 8004184:	2b70      	cmp	r3, #112	; 0x70
 8004186:	d87b      	bhi.n	8004280 <HAL_TIM_ConfigClockSource+0x16c>
 8004188:	2b60      	cmp	r3, #96	; 0x60
 800418a:	d050      	beq.n	800422e <HAL_TIM_ConfigClockSource+0x11a>
 800418c:	2b60      	cmp	r3, #96	; 0x60
 800418e:	d877      	bhi.n	8004280 <HAL_TIM_ConfigClockSource+0x16c>
 8004190:	2b50      	cmp	r3, #80	; 0x50
 8004192:	d03c      	beq.n	800420e <HAL_TIM_ConfigClockSource+0xfa>
 8004194:	2b50      	cmp	r3, #80	; 0x50
 8004196:	d873      	bhi.n	8004280 <HAL_TIM_ConfigClockSource+0x16c>
 8004198:	2b40      	cmp	r3, #64	; 0x40
 800419a:	d058      	beq.n	800424e <HAL_TIM_ConfigClockSource+0x13a>
 800419c:	2b40      	cmp	r3, #64	; 0x40
 800419e:	d86f      	bhi.n	8004280 <HAL_TIM_ConfigClockSource+0x16c>
 80041a0:	2b30      	cmp	r3, #48	; 0x30
 80041a2:	d064      	beq.n	800426e <HAL_TIM_ConfigClockSource+0x15a>
 80041a4:	2b30      	cmp	r3, #48	; 0x30
 80041a6:	d86b      	bhi.n	8004280 <HAL_TIM_ConfigClockSource+0x16c>
 80041a8:	2b20      	cmp	r3, #32
 80041aa:	d060      	beq.n	800426e <HAL_TIM_ConfigClockSource+0x15a>
 80041ac:	2b20      	cmp	r3, #32
 80041ae:	d867      	bhi.n	8004280 <HAL_TIM_ConfigClockSource+0x16c>
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d05c      	beq.n	800426e <HAL_TIM_ConfigClockSource+0x15a>
 80041b4:	2b10      	cmp	r3, #16
 80041b6:	d05a      	beq.n	800426e <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80041b8:	e062      	b.n	8004280 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6818      	ldr	r0, [r3, #0]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	6899      	ldr	r1, [r3, #8]
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	f000 fbc5 	bl	8004958 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	609a      	str	r2, [r3, #8]
      break;
 80041e6:	e04e      	b.n	8004286 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6818      	ldr	r0, [r3, #0]
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	6899      	ldr	r1, [r3, #8]
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	f000 fbae 	bl	8004958 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689a      	ldr	r2, [r3, #8]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800420a:	609a      	str	r2, [r3, #8]
      break;
 800420c:	e03b      	b.n	8004286 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6818      	ldr	r0, [r3, #0]
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	6859      	ldr	r1, [r3, #4]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	461a      	mov	r2, r3
 800421c:	f000 fb22 	bl	8004864 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2150      	movs	r1, #80	; 0x50
 8004226:	4618      	mov	r0, r3
 8004228:	f000 fb7b 	bl	8004922 <TIM_ITRx_SetConfig>
      break;
 800422c:	e02b      	b.n	8004286 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6818      	ldr	r0, [r3, #0]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	6859      	ldr	r1, [r3, #4]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	461a      	mov	r2, r3
 800423c:	f000 fb41 	bl	80048c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2160      	movs	r1, #96	; 0x60
 8004246:	4618      	mov	r0, r3
 8004248:	f000 fb6b 	bl	8004922 <TIM_ITRx_SetConfig>
      break;
 800424c:	e01b      	b.n	8004286 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6818      	ldr	r0, [r3, #0]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	6859      	ldr	r1, [r3, #4]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	461a      	mov	r2, r3
 800425c:	f000 fb02 	bl	8004864 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2140      	movs	r1, #64	; 0x40
 8004266:	4618      	mov	r0, r3
 8004268:	f000 fb5b 	bl	8004922 <TIM_ITRx_SetConfig>
      break;
 800426c:	e00b      	b.n	8004286 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4619      	mov	r1, r3
 8004278:	4610      	mov	r0, r2
 800427a:	f000 fb52 	bl	8004922 <TIM_ITRx_SetConfig>
        break;
 800427e:	e002      	b.n	8004286 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004280:	bf00      	nop
 8004282:	e000      	b.n	8004286 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004284:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a2a      	ldr	r2, [pc, #168]	; (800435c <TIM_Base_SetConfig+0xbc>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d003      	beq.n	80042c0 <TIM_Base_SetConfig+0x20>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042be:	d108      	bne.n	80042d2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a21      	ldr	r2, [pc, #132]	; (800435c <TIM_Base_SetConfig+0xbc>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d00b      	beq.n	80042f2 <TIM_Base_SetConfig+0x52>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e0:	d007      	beq.n	80042f2 <TIM_Base_SetConfig+0x52>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a1e      	ldr	r2, [pc, #120]	; (8004360 <TIM_Base_SetConfig+0xc0>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d003      	beq.n	80042f2 <TIM_Base_SetConfig+0x52>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a1d      	ldr	r2, [pc, #116]	; (8004364 <TIM_Base_SetConfig+0xc4>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d108      	bne.n	8004304 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	4313      	orrs	r3, r2
 8004302:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	4313      	orrs	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	689a      	ldr	r2, [r3, #8]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a0c      	ldr	r2, [pc, #48]	; (800435c <TIM_Base_SetConfig+0xbc>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d007      	beq.n	8004340 <TIM_Base_SetConfig+0xa0>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a0b      	ldr	r2, [pc, #44]	; (8004360 <TIM_Base_SetConfig+0xc0>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d003      	beq.n	8004340 <TIM_Base_SetConfig+0xa0>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a0a      	ldr	r2, [pc, #40]	; (8004364 <TIM_Base_SetConfig+0xc4>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d103      	bne.n	8004348 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	691a      	ldr	r2, [r3, #16]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	615a      	str	r2, [r3, #20]
}
 800434e:	bf00      	nop
 8004350:	3714      	adds	r7, #20
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	40012c00 	.word	0x40012c00
 8004360:	40014000 	.word	0x40014000
 8004364:	40014400 	.word	0x40014400

08004368 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	f023 0201 	bic.w	r2, r3, #1
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800439a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f023 0303 	bic.w	r3, r3, #3
 80043a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f023 0302 	bic.w	r3, r3, #2
 80043b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	4313      	orrs	r3, r2
 80043be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a24      	ldr	r2, [pc, #144]	; (8004454 <TIM_OC1_SetConfig+0xec>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d007      	beq.n	80043d8 <TIM_OC1_SetConfig+0x70>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a23      	ldr	r2, [pc, #140]	; (8004458 <TIM_OC1_SetConfig+0xf0>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d003      	beq.n	80043d8 <TIM_OC1_SetConfig+0x70>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a22      	ldr	r2, [pc, #136]	; (800445c <TIM_OC1_SetConfig+0xf4>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d10c      	bne.n	80043f2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	f023 0308 	bic.w	r3, r3, #8
 80043de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f023 0304 	bic.w	r3, r3, #4
 80043f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a17      	ldr	r2, [pc, #92]	; (8004454 <TIM_OC1_SetConfig+0xec>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d007      	beq.n	800440a <TIM_OC1_SetConfig+0xa2>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a16      	ldr	r2, [pc, #88]	; (8004458 <TIM_OC1_SetConfig+0xf0>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d003      	beq.n	800440a <TIM_OC1_SetConfig+0xa2>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a15      	ldr	r2, [pc, #84]	; (800445c <TIM_OC1_SetConfig+0xf4>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d111      	bne.n	800442e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004410:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004418:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	4313      	orrs	r3, r2
 8004422:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	4313      	orrs	r3, r2
 800442c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	621a      	str	r2, [r3, #32]
}
 8004448:	bf00      	nop
 800444a:	371c      	adds	r7, #28
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	40012c00 	.word	0x40012c00
 8004458:	40014000 	.word	0x40014000
 800445c:	40014400 	.word	0x40014400

08004460 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004460:	b480      	push	{r7}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	f023 0210 	bic.w	r2, r3, #16
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800448e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800449a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	021b      	lsls	r3, r3, #8
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	f023 0320 	bic.w	r3, r3, #32
 80044ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	011b      	lsls	r3, r3, #4
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a22      	ldr	r2, [pc, #136]	; (8004548 <TIM_OC2_SetConfig+0xe8>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d10d      	bne.n	80044e0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a19      	ldr	r2, [pc, #100]	; (8004548 <TIM_OC2_SetConfig+0xe8>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d007      	beq.n	80044f8 <TIM_OC2_SetConfig+0x98>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a18      	ldr	r2, [pc, #96]	; (800454c <TIM_OC2_SetConfig+0xec>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d003      	beq.n	80044f8 <TIM_OC2_SetConfig+0x98>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a17      	ldr	r2, [pc, #92]	; (8004550 <TIM_OC2_SetConfig+0xf0>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d113      	bne.n	8004520 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004506:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	4313      	orrs	r3, r2
 8004512:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	4313      	orrs	r3, r2
 800451e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	621a      	str	r2, [r3, #32]
}
 800453a:	bf00      	nop
 800453c:	371c      	adds	r7, #28
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	40012c00 	.word	0x40012c00
 800454c:	40014000 	.word	0x40014000
 8004550:	40014400 	.word	0x40014400

08004554 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f023 0303 	bic.w	r3, r3, #3
 800458e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	4313      	orrs	r3, r2
 8004598:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	021b      	lsls	r3, r3, #8
 80045a8:	697a      	ldr	r2, [r7, #20]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a21      	ldr	r2, [pc, #132]	; (8004638 <TIM_OC3_SetConfig+0xe4>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d10d      	bne.n	80045d2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	021b      	lsls	r3, r3, #8
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a18      	ldr	r2, [pc, #96]	; (8004638 <TIM_OC3_SetConfig+0xe4>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d007      	beq.n	80045ea <TIM_OC3_SetConfig+0x96>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a17      	ldr	r2, [pc, #92]	; (800463c <TIM_OC3_SetConfig+0xe8>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d003      	beq.n	80045ea <TIM_OC3_SetConfig+0x96>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a16      	ldr	r2, [pc, #88]	; (8004640 <TIM_OC3_SetConfig+0xec>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d113      	bne.n	8004612 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	011b      	lsls	r3, r3, #4
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	4313      	orrs	r3, r2
 8004604:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	011b      	lsls	r3, r3, #4
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	4313      	orrs	r3, r2
 8004610:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685a      	ldr	r2, [r3, #4]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	621a      	str	r2, [r3, #32]
}
 800462c:	bf00      	nop
 800462e:	371c      	adds	r7, #28
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr
 8004638:	40012c00 	.word	0x40012c00
 800463c:	40014000 	.word	0x40014000
 8004640:	40014400 	.word	0x40014400

08004644 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004644:	b480      	push	{r7}
 8004646:	b087      	sub	sp, #28
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	69db      	ldr	r3, [r3, #28]
 800466a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800467e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	021b      	lsls	r3, r3, #8
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	4313      	orrs	r3, r2
 800468a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004692:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	031b      	lsls	r3, r3, #12
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	4313      	orrs	r3, r2
 800469e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a14      	ldr	r2, [pc, #80]	; (80046f4 <TIM_OC4_SetConfig+0xb0>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d007      	beq.n	80046b8 <TIM_OC4_SetConfig+0x74>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a13      	ldr	r2, [pc, #76]	; (80046f8 <TIM_OC4_SetConfig+0xb4>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d003      	beq.n	80046b8 <TIM_OC4_SetConfig+0x74>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a12      	ldr	r2, [pc, #72]	; (80046fc <TIM_OC4_SetConfig+0xb8>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d109      	bne.n	80046cc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	019b      	lsls	r3, r3, #6
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	621a      	str	r2, [r3, #32]
}
 80046e6:	bf00      	nop
 80046e8:	371c      	adds	r7, #28
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	40012c00 	.word	0x40012c00
 80046f8:	40014000 	.word	0x40014000
 80046fc:	40014400 	.word	0x40014400

08004700 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004700:	b480      	push	{r7}
 8004702:	b087      	sub	sp, #28
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800472e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004732:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	4313      	orrs	r3, r2
 800473c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004744:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	041b      	lsls	r3, r3, #16
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	4313      	orrs	r3, r2
 8004750:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a13      	ldr	r2, [pc, #76]	; (80047a4 <TIM_OC5_SetConfig+0xa4>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d007      	beq.n	800476a <TIM_OC5_SetConfig+0x6a>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a12      	ldr	r2, [pc, #72]	; (80047a8 <TIM_OC5_SetConfig+0xa8>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d003      	beq.n	800476a <TIM_OC5_SetConfig+0x6a>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a11      	ldr	r2, [pc, #68]	; (80047ac <TIM_OC5_SetConfig+0xac>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d109      	bne.n	800477e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004770:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	021b      	lsls	r3, r3, #8
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	4313      	orrs	r3, r2
 800477c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	621a      	str	r2, [r3, #32]
}
 8004798:	bf00      	nop
 800479a:	371c      	adds	r7, #28
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr
 80047a4:	40012c00 	.word	0x40012c00
 80047a8:	40014000 	.word	0x40014000
 80047ac:	40014400 	.word	0x40014400

080047b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b087      	sub	sp, #28
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	021b      	lsls	r3, r3, #8
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80047f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	051b      	lsls	r3, r3, #20
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	4313      	orrs	r3, r2
 8004802:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a14      	ldr	r2, [pc, #80]	; (8004858 <TIM_OC6_SetConfig+0xa8>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d007      	beq.n	800481c <TIM_OC6_SetConfig+0x6c>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a13      	ldr	r2, [pc, #76]	; (800485c <TIM_OC6_SetConfig+0xac>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d003      	beq.n	800481c <TIM_OC6_SetConfig+0x6c>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a12      	ldr	r2, [pc, #72]	; (8004860 <TIM_OC6_SetConfig+0xb0>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d109      	bne.n	8004830 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004822:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	029b      	lsls	r3, r3, #10
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	4313      	orrs	r3, r2
 800482e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	621a      	str	r2, [r3, #32]
}
 800484a:	bf00      	nop
 800484c:	371c      	adds	r7, #28
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	40012c00 	.word	0x40012c00
 800485c:	40014000 	.word	0x40014000
 8004860:	40014400 	.word	0x40014400

08004864 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004864:	b480      	push	{r7}
 8004866:	b087      	sub	sp, #28
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6a1b      	ldr	r3, [r3, #32]
 8004874:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	f023 0201 	bic.w	r2, r3, #1
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800488e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	011b      	lsls	r3, r3, #4
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	4313      	orrs	r3, r2
 8004898:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f023 030a 	bic.w	r3, r3, #10
 80048a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	621a      	str	r2, [r3, #32]
}
 80048b6:	bf00      	nop
 80048b8:	371c      	adds	r7, #28
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b087      	sub	sp, #28
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	60f8      	str	r0, [r7, #12]
 80048ca:	60b9      	str	r1, [r7, #8]
 80048cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	f023 0210 	bic.w	r2, r3, #16
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6a1b      	ldr	r3, [r3, #32]
 80048e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	031b      	lsls	r3, r3, #12
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	011b      	lsls	r3, r3, #4
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	4313      	orrs	r3, r2
 8004908:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	621a      	str	r2, [r3, #32]
}
 8004916:	bf00      	nop
 8004918:	371c      	adds	r7, #28
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004922:	b480      	push	{r7}
 8004924:	b085      	sub	sp, #20
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
 800492a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004938:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4313      	orrs	r3, r2
 8004940:	f043 0307 	orr.w	r3, r3, #7
 8004944:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	609a      	str	r2, [r3, #8]
}
 800494c:	bf00      	nop
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004958:	b480      	push	{r7}
 800495a:	b087      	sub	sp, #28
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
 8004964:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004972:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	021a      	lsls	r2, r3, #8
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	431a      	orrs	r2, r3
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	4313      	orrs	r3, r2
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	4313      	orrs	r3, r2
 8004984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	609a      	str	r2, [r3, #8]
}
 800498c:	bf00      	nop
 800498e:	371c      	adds	r7, #28
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d109      	bne.n	80049bc <HAL_TIMEx_PWMN_Start+0x24>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	bf14      	ite	ne
 80049b4:	2301      	movne	r3, #1
 80049b6:	2300      	moveq	r3, #0
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	e022      	b.n	8004a02 <HAL_TIMEx_PWMN_Start+0x6a>
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	2b04      	cmp	r3, #4
 80049c0:	d109      	bne.n	80049d6 <HAL_TIMEx_PWMN_Start+0x3e>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	bf14      	ite	ne
 80049ce:	2301      	movne	r3, #1
 80049d0:	2300      	moveq	r3, #0
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	e015      	b.n	8004a02 <HAL_TIMEx_PWMN_Start+0x6a>
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	2b08      	cmp	r3, #8
 80049da:	d109      	bne.n	80049f0 <HAL_TIMEx_PWMN_Start+0x58>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	bf14      	ite	ne
 80049e8:	2301      	movne	r3, #1
 80049ea:	2300      	moveq	r3, #0
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	e008      	b.n	8004a02 <HAL_TIMEx_PWMN_Start+0x6a>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	bf14      	ite	ne
 80049fc:	2301      	movne	r3, #1
 80049fe:	2300      	moveq	r3, #0
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e05a      	b.n	8004ac0 <HAL_TIMEx_PWMN_Start+0x128>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d104      	bne.n	8004a1a <HAL_TIMEx_PWMN_Start+0x82>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2202      	movs	r2, #2
 8004a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a18:	e013      	b.n	8004a42 <HAL_TIMEx_PWMN_Start+0xaa>
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	d104      	bne.n	8004a2a <HAL_TIMEx_PWMN_Start+0x92>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2202      	movs	r2, #2
 8004a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a28:	e00b      	b.n	8004a42 <HAL_TIMEx_PWMN_Start+0xaa>
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	d104      	bne.n	8004a3a <HAL_TIMEx_PWMN_Start+0xa2>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a38:	e003      	b.n	8004a42 <HAL_TIMEx_PWMN_Start+0xaa>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2202      	movs	r2, #2
 8004a3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2204      	movs	r2, #4
 8004a48:	6839      	ldr	r1, [r7, #0]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 f920 	bl	8004c90 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a5e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a18      	ldr	r2, [pc, #96]	; (8004ac8 <HAL_TIMEx_PWMN_Start+0x130>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d009      	beq.n	8004a7e <HAL_TIMEx_PWMN_Start+0xe6>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a72:	d004      	beq.n	8004a7e <HAL_TIMEx_PWMN_Start+0xe6>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a14      	ldr	r2, [pc, #80]	; (8004acc <HAL_TIMEx_PWMN_Start+0x134>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d115      	bne.n	8004aaa <HAL_TIMEx_PWMN_Start+0x112>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689a      	ldr	r2, [r3, #8]
 8004a84:	4b12      	ldr	r3, [pc, #72]	; (8004ad0 <HAL_TIMEx_PWMN_Start+0x138>)
 8004a86:	4013      	ands	r3, r2
 8004a88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2b06      	cmp	r3, #6
 8004a8e:	d015      	beq.n	8004abc <HAL_TIMEx_PWMN_Start+0x124>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a96:	d011      	beq.n	8004abc <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0201 	orr.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aa8:	e008      	b.n	8004abc <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f042 0201 	orr.w	r2, r2, #1
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	e000      	b.n	8004abe <HAL_TIMEx_PWMN_Start+0x126>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004abc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	40012c00 	.word	0x40012c00
 8004acc:	40014000 	.word	0x40014000
 8004ad0:	00010007 	.word	0x00010007

08004ad4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d101      	bne.n	8004aec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ae8:	2302      	movs	r3, #2
 8004aea:	e04f      	b.n	8004b8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2202      	movs	r2, #2
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a21      	ldr	r2, [pc, #132]	; (8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d108      	bne.n	8004b28 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b1c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a14      	ldr	r2, [pc, #80]	; (8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d009      	beq.n	8004b60 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b54:	d004      	beq.n	8004b60 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a10      	ldr	r2, [pc, #64]	; (8004b9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d10c      	bne.n	8004b7a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	40012c00 	.word	0x40012c00
 8004b9c:	40014000 	.word	0x40014000

08004ba0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004baa:	2300      	movs	r3, #0
 8004bac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d101      	bne.n	8004bbc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004bb8:	2302      	movs	r3, #2
 8004bba:	e060      	b.n	8004c7e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c22:	4313      	orrs	r3, r2
 8004c24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	041b      	lsls	r3, r3, #16
 8004c32:	4313      	orrs	r3, r2
 8004c34:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a14      	ldr	r2, [pc, #80]	; (8004c8c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d115      	bne.n	8004c6c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4a:	051b      	lsls	r3, r3, #20
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	69db      	ldr	r3, [r3, #28]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	6a1b      	ldr	r3, [r3, #32]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	40012c00 	.word	0x40012c00

08004c90 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b087      	sub	sp, #28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f003 031f 	and.w	r3, r3, #31
 8004ca2:	2204      	movs	r2, #4
 8004ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6a1a      	ldr	r2, [r3, #32]
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	43db      	mvns	r3, r3
 8004cb2:	401a      	ands	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6a1a      	ldr	r2, [r3, #32]
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f003 031f 	and.w	r3, r3, #31
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	621a      	str	r2, [r3, #32]
}
 8004cce:	bf00      	nop
 8004cd0:	371c      	adds	r7, #28
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b082      	sub	sp, #8
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e040      	b.n	8004d6e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d106      	bne.n	8004d02 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f7fc fb0f 	bl	8001320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2224      	movs	r2, #36	; 0x24
 8004d06:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 0201 	bic.w	r2, r2, #1
 8004d16:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 f82d 	bl	8004d78 <UART_SetConfig>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d101      	bne.n	8004d28 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e022      	b.n	8004d6e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d002      	beq.n	8004d36 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 fa2d 	bl	8005190 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d44:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	689a      	ldr	r2, [r3, #8]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d54:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f042 0201 	orr.w	r2, r2, #1
 8004d64:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 fab4 	bl	80052d4 <UART_CheckIdleState>
 8004d6c:	4603      	mov	r3, r0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
	...

08004d78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d78:	b5b0      	push	{r4, r5, r7, lr}
 8004d7a:	b088      	sub	sp, #32
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d80:	2300      	movs	r3, #0
 8004d82:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	689a      	ldr	r2, [r3, #8]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	431a      	orrs	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	431a      	orrs	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	69db      	ldr	r3, [r3, #28]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	4baf      	ldr	r3, [pc, #700]	; (8005060 <UART_SetConfig+0x2e8>)
 8004da4:	4013      	ands	r3, r2
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	6812      	ldr	r2, [r2, #0]
 8004daa:	69f9      	ldr	r1, [r7, #28]
 8004dac:	430b      	orrs	r3, r1
 8004dae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68da      	ldr	r2, [r3, #12]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4aa4      	ldr	r2, [pc, #656]	; (8005064 <UART_SetConfig+0x2ec>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d004      	beq.n	8004de0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	69fa      	ldr	r2, [r7, #28]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	69fa      	ldr	r2, [r7, #28]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a9b      	ldr	r2, [pc, #620]	; (8005068 <UART_SetConfig+0x2f0>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d121      	bne.n	8004e42 <UART_SetConfig+0xca>
 8004dfe:	4b9b      	ldr	r3, [pc, #620]	; (800506c <UART_SetConfig+0x2f4>)
 8004e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e04:	f003 0303 	and.w	r3, r3, #3
 8004e08:	2b03      	cmp	r3, #3
 8004e0a:	d817      	bhi.n	8004e3c <UART_SetConfig+0xc4>
 8004e0c:	a201      	add	r2, pc, #4	; (adr r2, 8004e14 <UART_SetConfig+0x9c>)
 8004e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e12:	bf00      	nop
 8004e14:	08004e25 	.word	0x08004e25
 8004e18:	08004e31 	.word	0x08004e31
 8004e1c:	08004e2b 	.word	0x08004e2b
 8004e20:	08004e37 	.word	0x08004e37
 8004e24:	2301      	movs	r3, #1
 8004e26:	76fb      	strb	r3, [r7, #27]
 8004e28:	e070      	b.n	8004f0c <UART_SetConfig+0x194>
 8004e2a:	2302      	movs	r3, #2
 8004e2c:	76fb      	strb	r3, [r7, #27]
 8004e2e:	e06d      	b.n	8004f0c <UART_SetConfig+0x194>
 8004e30:	2304      	movs	r3, #4
 8004e32:	76fb      	strb	r3, [r7, #27]
 8004e34:	e06a      	b.n	8004f0c <UART_SetConfig+0x194>
 8004e36:	2308      	movs	r3, #8
 8004e38:	76fb      	strb	r3, [r7, #27]
 8004e3a:	e067      	b.n	8004f0c <UART_SetConfig+0x194>
 8004e3c:	2310      	movs	r3, #16
 8004e3e:	76fb      	strb	r3, [r7, #27]
 8004e40:	e064      	b.n	8004f0c <UART_SetConfig+0x194>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a8a      	ldr	r2, [pc, #552]	; (8005070 <UART_SetConfig+0x2f8>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d132      	bne.n	8004eb2 <UART_SetConfig+0x13a>
 8004e4c:	4b87      	ldr	r3, [pc, #540]	; (800506c <UART_SetConfig+0x2f4>)
 8004e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e52:	f003 030c 	and.w	r3, r3, #12
 8004e56:	2b0c      	cmp	r3, #12
 8004e58:	d828      	bhi.n	8004eac <UART_SetConfig+0x134>
 8004e5a:	a201      	add	r2, pc, #4	; (adr r2, 8004e60 <UART_SetConfig+0xe8>)
 8004e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e60:	08004e95 	.word	0x08004e95
 8004e64:	08004ead 	.word	0x08004ead
 8004e68:	08004ead 	.word	0x08004ead
 8004e6c:	08004ead 	.word	0x08004ead
 8004e70:	08004ea1 	.word	0x08004ea1
 8004e74:	08004ead 	.word	0x08004ead
 8004e78:	08004ead 	.word	0x08004ead
 8004e7c:	08004ead 	.word	0x08004ead
 8004e80:	08004e9b 	.word	0x08004e9b
 8004e84:	08004ead 	.word	0x08004ead
 8004e88:	08004ead 	.word	0x08004ead
 8004e8c:	08004ead 	.word	0x08004ead
 8004e90:	08004ea7 	.word	0x08004ea7
 8004e94:	2300      	movs	r3, #0
 8004e96:	76fb      	strb	r3, [r7, #27]
 8004e98:	e038      	b.n	8004f0c <UART_SetConfig+0x194>
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	76fb      	strb	r3, [r7, #27]
 8004e9e:	e035      	b.n	8004f0c <UART_SetConfig+0x194>
 8004ea0:	2304      	movs	r3, #4
 8004ea2:	76fb      	strb	r3, [r7, #27]
 8004ea4:	e032      	b.n	8004f0c <UART_SetConfig+0x194>
 8004ea6:	2308      	movs	r3, #8
 8004ea8:	76fb      	strb	r3, [r7, #27]
 8004eaa:	e02f      	b.n	8004f0c <UART_SetConfig+0x194>
 8004eac:	2310      	movs	r3, #16
 8004eae:	76fb      	strb	r3, [r7, #27]
 8004eb0:	e02c      	b.n	8004f0c <UART_SetConfig+0x194>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a6b      	ldr	r2, [pc, #428]	; (8005064 <UART_SetConfig+0x2ec>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d125      	bne.n	8004f08 <UART_SetConfig+0x190>
 8004ebc:	4b6b      	ldr	r3, [pc, #428]	; (800506c <UART_SetConfig+0x2f4>)
 8004ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ec6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004eca:	d017      	beq.n	8004efc <UART_SetConfig+0x184>
 8004ecc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ed0:	d817      	bhi.n	8004f02 <UART_SetConfig+0x18a>
 8004ed2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ed6:	d00b      	beq.n	8004ef0 <UART_SetConfig+0x178>
 8004ed8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004edc:	d811      	bhi.n	8004f02 <UART_SetConfig+0x18a>
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <UART_SetConfig+0x172>
 8004ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ee6:	d006      	beq.n	8004ef6 <UART_SetConfig+0x17e>
 8004ee8:	e00b      	b.n	8004f02 <UART_SetConfig+0x18a>
 8004eea:	2300      	movs	r3, #0
 8004eec:	76fb      	strb	r3, [r7, #27]
 8004eee:	e00d      	b.n	8004f0c <UART_SetConfig+0x194>
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	76fb      	strb	r3, [r7, #27]
 8004ef4:	e00a      	b.n	8004f0c <UART_SetConfig+0x194>
 8004ef6:	2304      	movs	r3, #4
 8004ef8:	76fb      	strb	r3, [r7, #27]
 8004efa:	e007      	b.n	8004f0c <UART_SetConfig+0x194>
 8004efc:	2308      	movs	r3, #8
 8004efe:	76fb      	strb	r3, [r7, #27]
 8004f00:	e004      	b.n	8004f0c <UART_SetConfig+0x194>
 8004f02:	2310      	movs	r3, #16
 8004f04:	76fb      	strb	r3, [r7, #27]
 8004f06:	e001      	b.n	8004f0c <UART_SetConfig+0x194>
 8004f08:	2310      	movs	r3, #16
 8004f0a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a54      	ldr	r2, [pc, #336]	; (8005064 <UART_SetConfig+0x2ec>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d173      	bne.n	8004ffe <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f16:	7efb      	ldrb	r3, [r7, #27]
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	d824      	bhi.n	8004f66 <UART_SetConfig+0x1ee>
 8004f1c:	a201      	add	r2, pc, #4	; (adr r2, 8004f24 <UART_SetConfig+0x1ac>)
 8004f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f22:	bf00      	nop
 8004f24:	08004f49 	.word	0x08004f49
 8004f28:	08004f67 	.word	0x08004f67
 8004f2c:	08004f51 	.word	0x08004f51
 8004f30:	08004f67 	.word	0x08004f67
 8004f34:	08004f57 	.word	0x08004f57
 8004f38:	08004f67 	.word	0x08004f67
 8004f3c:	08004f67 	.word	0x08004f67
 8004f40:	08004f67 	.word	0x08004f67
 8004f44:	08004f5f 	.word	0x08004f5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f48:	f7fe fb9a 	bl	8003680 <HAL_RCC_GetPCLK1Freq>
 8004f4c:	6178      	str	r0, [r7, #20]
        break;
 8004f4e:	e00f      	b.n	8004f70 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f50:	4b48      	ldr	r3, [pc, #288]	; (8005074 <UART_SetConfig+0x2fc>)
 8004f52:	617b      	str	r3, [r7, #20]
        break;
 8004f54:	e00c      	b.n	8004f70 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f56:	f7fe fafb 	bl	8003550 <HAL_RCC_GetSysClockFreq>
 8004f5a:	6178      	str	r0, [r7, #20]
        break;
 8004f5c:	e008      	b.n	8004f70 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f62:	617b      	str	r3, [r7, #20]
        break;
 8004f64:	e004      	b.n	8004f70 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8004f66:	2300      	movs	r3, #0
 8004f68:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	76bb      	strb	r3, [r7, #26]
        break;
 8004f6e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f000 80fe 	beq.w	8005174 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	4413      	add	r3, r2
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d305      	bcc.n	8004f94 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d902      	bls.n	8004f9a <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	76bb      	strb	r3, [r7, #26]
 8004f98:	e0ec      	b.n	8005174 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f04f 0100 	mov.w	r1, #0
 8004fa2:	f04f 0200 	mov.w	r2, #0
 8004fa6:	f04f 0300 	mov.w	r3, #0
 8004faa:	020b      	lsls	r3, r1, #8
 8004fac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004fb0:	0202      	lsls	r2, r0, #8
 8004fb2:	6879      	ldr	r1, [r7, #4]
 8004fb4:	6849      	ldr	r1, [r1, #4]
 8004fb6:	0849      	lsrs	r1, r1, #1
 8004fb8:	4608      	mov	r0, r1
 8004fba:	f04f 0100 	mov.w	r1, #0
 8004fbe:	1814      	adds	r4, r2, r0
 8004fc0:	eb43 0501 	adc.w	r5, r3, r1
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	461a      	mov	r2, r3
 8004fca:	f04f 0300 	mov.w	r3, #0
 8004fce:	4620      	mov	r0, r4
 8004fd0:	4629      	mov	r1, r5
 8004fd2:	f7fb fad7 	bl	8000584 <__aeabi_uldivmod>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	460b      	mov	r3, r1
 8004fda:	4613      	mov	r3, r2
 8004fdc:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fe4:	d308      	bcc.n	8004ff8 <UART_SetConfig+0x280>
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fec:	d204      	bcs.n	8004ff8 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	60da      	str	r2, [r3, #12]
 8004ff6:	e0bd      	b.n	8005174 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	76bb      	strb	r3, [r7, #26]
 8004ffc:	e0ba      	b.n	8005174 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005006:	d168      	bne.n	80050da <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8005008:	7efb      	ldrb	r3, [r7, #27]
 800500a:	2b08      	cmp	r3, #8
 800500c:	d834      	bhi.n	8005078 <UART_SetConfig+0x300>
 800500e:	a201      	add	r2, pc, #4	; (adr r2, 8005014 <UART_SetConfig+0x29c>)
 8005010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005014:	08005039 	.word	0x08005039
 8005018:	08005041 	.word	0x08005041
 800501c:	08005049 	.word	0x08005049
 8005020:	08005079 	.word	0x08005079
 8005024:	0800504f 	.word	0x0800504f
 8005028:	08005079 	.word	0x08005079
 800502c:	08005079 	.word	0x08005079
 8005030:	08005079 	.word	0x08005079
 8005034:	08005057 	.word	0x08005057
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005038:	f7fe fb22 	bl	8003680 <HAL_RCC_GetPCLK1Freq>
 800503c:	6178      	str	r0, [r7, #20]
        break;
 800503e:	e020      	b.n	8005082 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005040:	f7fe fb34 	bl	80036ac <HAL_RCC_GetPCLK2Freq>
 8005044:	6178      	str	r0, [r7, #20]
        break;
 8005046:	e01c      	b.n	8005082 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005048:	4b0a      	ldr	r3, [pc, #40]	; (8005074 <UART_SetConfig+0x2fc>)
 800504a:	617b      	str	r3, [r7, #20]
        break;
 800504c:	e019      	b.n	8005082 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800504e:	f7fe fa7f 	bl	8003550 <HAL_RCC_GetSysClockFreq>
 8005052:	6178      	str	r0, [r7, #20]
        break;
 8005054:	e015      	b.n	8005082 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005056:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800505a:	617b      	str	r3, [r7, #20]
        break;
 800505c:	e011      	b.n	8005082 <UART_SetConfig+0x30a>
 800505e:	bf00      	nop
 8005060:	efff69f3 	.word	0xefff69f3
 8005064:	40008000 	.word	0x40008000
 8005068:	40013800 	.word	0x40013800
 800506c:	40021000 	.word	0x40021000
 8005070:	40004400 	.word	0x40004400
 8005074:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005078:	2300      	movs	r3, #0
 800507a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	76bb      	strb	r3, [r7, #26]
        break;
 8005080:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d075      	beq.n	8005174 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	005a      	lsls	r2, r3, #1
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	085b      	lsrs	r3, r3, #1
 8005092:	441a      	add	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	fbb2 f3f3 	udiv	r3, r2, r3
 800509c:	b29b      	uxth	r3, r3
 800509e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	2b0f      	cmp	r3, #15
 80050a4:	d916      	bls.n	80050d4 <UART_SetConfig+0x35c>
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050ac:	d212      	bcs.n	80050d4 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	f023 030f 	bic.w	r3, r3, #15
 80050b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	085b      	lsrs	r3, r3, #1
 80050bc:	b29b      	uxth	r3, r3
 80050be:	f003 0307 	and.w	r3, r3, #7
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	89fb      	ldrh	r3, [r7, #14]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	89fa      	ldrh	r2, [r7, #14]
 80050d0:	60da      	str	r2, [r3, #12]
 80050d2:	e04f      	b.n	8005174 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	76bb      	strb	r3, [r7, #26]
 80050d8:	e04c      	b.n	8005174 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050da:	7efb      	ldrb	r3, [r7, #27]
 80050dc:	2b08      	cmp	r3, #8
 80050de:	d828      	bhi.n	8005132 <UART_SetConfig+0x3ba>
 80050e0:	a201      	add	r2, pc, #4	; (adr r2, 80050e8 <UART_SetConfig+0x370>)
 80050e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e6:	bf00      	nop
 80050e8:	0800510d 	.word	0x0800510d
 80050ec:	08005115 	.word	0x08005115
 80050f0:	0800511d 	.word	0x0800511d
 80050f4:	08005133 	.word	0x08005133
 80050f8:	08005123 	.word	0x08005123
 80050fc:	08005133 	.word	0x08005133
 8005100:	08005133 	.word	0x08005133
 8005104:	08005133 	.word	0x08005133
 8005108:	0800512b 	.word	0x0800512b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800510c:	f7fe fab8 	bl	8003680 <HAL_RCC_GetPCLK1Freq>
 8005110:	6178      	str	r0, [r7, #20]
        break;
 8005112:	e013      	b.n	800513c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005114:	f7fe faca 	bl	80036ac <HAL_RCC_GetPCLK2Freq>
 8005118:	6178      	str	r0, [r7, #20]
        break;
 800511a:	e00f      	b.n	800513c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800511c:	4b1b      	ldr	r3, [pc, #108]	; (800518c <UART_SetConfig+0x414>)
 800511e:	617b      	str	r3, [r7, #20]
        break;
 8005120:	e00c      	b.n	800513c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005122:	f7fe fa15 	bl	8003550 <HAL_RCC_GetSysClockFreq>
 8005126:	6178      	str	r0, [r7, #20]
        break;
 8005128:	e008      	b.n	800513c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800512a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800512e:	617b      	str	r3, [r7, #20]
        break;
 8005130:	e004      	b.n	800513c <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8005132:	2300      	movs	r3, #0
 8005134:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	76bb      	strb	r3, [r7, #26]
        break;
 800513a:	bf00      	nop
    }

    if (pclk != 0U)
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d018      	beq.n	8005174 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	085a      	lsrs	r2, r3, #1
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	441a      	add	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	fbb2 f3f3 	udiv	r3, r2, r3
 8005154:	b29b      	uxth	r3, r3
 8005156:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	2b0f      	cmp	r3, #15
 800515c:	d908      	bls.n	8005170 <UART_SetConfig+0x3f8>
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005164:	d204      	bcs.n	8005170 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	60da      	str	r2, [r3, #12]
 800516e:	e001      	b.n	8005174 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005180:	7ebb      	ldrb	r3, [r7, #26]
}
 8005182:	4618      	mov	r0, r3
 8005184:	3720      	adds	r7, #32
 8005186:	46bd      	mov	sp, r7
 8005188:	bdb0      	pop	{r4, r5, r7, pc}
 800518a:	bf00      	nop
 800518c:	00f42400 	.word	0x00f42400

08005190 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519c:	f003 0301 	and.w	r3, r3, #1
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00a      	beq.n	80051ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00a      	beq.n	80051dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	430a      	orrs	r2, r1
 80051da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00a      	beq.n	80051fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005202:	f003 0308 	and.w	r3, r3, #8
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00a      	beq.n	8005220 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005224:	f003 0310 	and.w	r3, r3, #16
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00a      	beq.n	8005242 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	430a      	orrs	r2, r1
 8005240:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005246:	f003 0320 	and.w	r3, r3, #32
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00a      	beq.n	8005264 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	430a      	orrs	r2, r1
 8005262:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800526c:	2b00      	cmp	r3, #0
 800526e:	d01a      	beq.n	80052a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	430a      	orrs	r2, r1
 8005284:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800528e:	d10a      	bne.n	80052a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	430a      	orrs	r2, r1
 80052a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00a      	beq.n	80052c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	430a      	orrs	r2, r1
 80052c6:	605a      	str	r2, [r3, #4]
  }
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b086      	sub	sp, #24
 80052d8:	af02      	add	r7, sp, #8
 80052da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052e4:	f7fc f902 	bl	80014ec <HAL_GetTick>
 80052e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0308 	and.w	r3, r3, #8
 80052f4:	2b08      	cmp	r3, #8
 80052f6:	d10e      	bne.n	8005316 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f82d 	bl	8005366 <UART_WaitOnFlagUntilTimeout>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d001      	beq.n	8005316 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e023      	b.n	800535e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0304 	and.w	r3, r3, #4
 8005320:	2b04      	cmp	r3, #4
 8005322:	d10e      	bne.n	8005342 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005324:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f817 	bl	8005366 <UART_WaitOnFlagUntilTimeout>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e00d      	b.n	800535e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2220      	movs	r2, #32
 8005346:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2220      	movs	r2, #32
 800534c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005366:	b580      	push	{r7, lr}
 8005368:	b084      	sub	sp, #16
 800536a:	af00      	add	r7, sp, #0
 800536c:	60f8      	str	r0, [r7, #12]
 800536e:	60b9      	str	r1, [r7, #8]
 8005370:	603b      	str	r3, [r7, #0]
 8005372:	4613      	mov	r3, r2
 8005374:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005376:	e05e      	b.n	8005436 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537e:	d05a      	beq.n	8005436 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005380:	f7fc f8b4 	bl	80014ec <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	69ba      	ldr	r2, [r7, #24]
 800538c:	429a      	cmp	r2, r3
 800538e:	d302      	bcc.n	8005396 <UART_WaitOnFlagUntilTimeout+0x30>
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d11b      	bne.n	80053ce <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80053a4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	689a      	ldr	r2, [r3, #8]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f022 0201 	bic.w	r2, r2, #1
 80053b4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2220      	movs	r2, #32
 80053ba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2220      	movs	r2, #32
 80053c0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e043      	b.n	8005456 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0304 	and.w	r3, r3, #4
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d02c      	beq.n	8005436 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	69db      	ldr	r3, [r3, #28]
 80053e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053ea:	d124      	bne.n	8005436 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053f4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005404:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	689a      	ldr	r2, [r3, #8]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f022 0201 	bic.w	r2, r2, #1
 8005414:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2220      	movs	r2, #32
 800541a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2220      	movs	r2, #32
 8005420:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2220      	movs	r2, #32
 8005426:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e00f      	b.n	8005456 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	69da      	ldr	r2, [r3, #28]
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	4013      	ands	r3, r2
 8005440:	68ba      	ldr	r2, [r7, #8]
 8005442:	429a      	cmp	r2, r3
 8005444:	bf0c      	ite	eq
 8005446:	2301      	moveq	r3, #1
 8005448:	2300      	movne	r3, #0
 800544a:	b2db      	uxtb	r3, r3
 800544c:	461a      	mov	r2, r3
 800544e:	79fb      	ldrb	r3, [r7, #7]
 8005450:	429a      	cmp	r2, r3
 8005452:	d091      	beq.n	8005378 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
	...

08005460 <__libc_init_array>:
 8005460:	b570      	push	{r4, r5, r6, lr}
 8005462:	4d0d      	ldr	r5, [pc, #52]	; (8005498 <__libc_init_array+0x38>)
 8005464:	4c0d      	ldr	r4, [pc, #52]	; (800549c <__libc_init_array+0x3c>)
 8005466:	1b64      	subs	r4, r4, r5
 8005468:	10a4      	asrs	r4, r4, #2
 800546a:	2600      	movs	r6, #0
 800546c:	42a6      	cmp	r6, r4
 800546e:	d109      	bne.n	8005484 <__libc_init_array+0x24>
 8005470:	4d0b      	ldr	r5, [pc, #44]	; (80054a0 <__libc_init_array+0x40>)
 8005472:	4c0c      	ldr	r4, [pc, #48]	; (80054a4 <__libc_init_array+0x44>)
 8005474:	f000 f820 	bl	80054b8 <_init>
 8005478:	1b64      	subs	r4, r4, r5
 800547a:	10a4      	asrs	r4, r4, #2
 800547c:	2600      	movs	r6, #0
 800547e:	42a6      	cmp	r6, r4
 8005480:	d105      	bne.n	800548e <__libc_init_array+0x2e>
 8005482:	bd70      	pop	{r4, r5, r6, pc}
 8005484:	f855 3b04 	ldr.w	r3, [r5], #4
 8005488:	4798      	blx	r3
 800548a:	3601      	adds	r6, #1
 800548c:	e7ee      	b.n	800546c <__libc_init_array+0xc>
 800548e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005492:	4798      	blx	r3
 8005494:	3601      	adds	r6, #1
 8005496:	e7f2      	b.n	800547e <__libc_init_array+0x1e>
 8005498:	08005520 	.word	0x08005520
 800549c:	08005520 	.word	0x08005520
 80054a0:	08005520 	.word	0x08005520
 80054a4:	08005524 	.word	0x08005524

080054a8 <memset>:
 80054a8:	4402      	add	r2, r0
 80054aa:	4603      	mov	r3, r0
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d100      	bne.n	80054b2 <memset+0xa>
 80054b0:	4770      	bx	lr
 80054b2:	f803 1b01 	strb.w	r1, [r3], #1
 80054b6:	e7f9      	b.n	80054ac <memset+0x4>

080054b8 <_init>:
 80054b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ba:	bf00      	nop
 80054bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054be:	bc08      	pop	{r3}
 80054c0:	469e      	mov	lr, r3
 80054c2:	4770      	bx	lr

080054c4 <_fini>:
 80054c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c6:	bf00      	nop
 80054c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ca:	bc08      	pop	{r3}
 80054cc:	469e      	mov	lr, r3
 80054ce:	4770      	bx	lr
